// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	"gnboot/internal/repo/model"
)

func newStudio(db *gorm.DB, opts ...gen.DOOption) studio {
	_studio := studio{}

	_studio.studioDo.UseDB(db, opts...)
	_studio.studioDo.UseModel(&model.Studio{})

	tableName := _studio.studioDo.TableName()
	_studio.ALL = field.NewAsterisk(tableName)
	_studio.ID = field.NewUint64(tableName, "id")
	_studio.Name = field.NewString(tableName, "name")
	_studio.Country = field.NewString(tableName, "country")
	_studio.Logo = field.NewString(tableName, "logo")

	_studio.fillFieldMap()

	return _studio
}

// studio 出品方
type studio struct {
	studioDo studioDo

	ALL     field.Asterisk
	ID      field.Uint64 // 主键
	Name    field.String // 名称
	Country field.String // 国家
	Logo    field.String // logo的地址

	fieldMap map[string]field.Expr
}

func (s studio) Table(newTableName string) *studio {
	s.studioDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s studio) As(alias string) *studio {
	s.studioDo.DO = *(s.studioDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *studio) updateTableName(table string) *studio {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint64(table, "id")
	s.Name = field.NewString(table, "name")
	s.Country = field.NewString(table, "country")
	s.Logo = field.NewString(table, "logo")

	s.fillFieldMap()

	return s
}

func (s *studio) WithContext(ctx context.Context) *studioDo { return s.studioDo.WithContext(ctx) }

func (s studio) TableName() string { return s.studioDo.TableName() }

func (s studio) Alias() string { return s.studioDo.Alias() }

func (s studio) Columns(cols ...field.Expr) gen.Columns { return s.studioDo.Columns(cols...) }

func (s *studio) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *studio) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["country"] = s.Country
	s.fieldMap["logo"] = s.Logo
}

func (s studio) clone(db *gorm.DB) studio {
	s.studioDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s studio) replaceDB(db *gorm.DB) studio {
	s.studioDo.ReplaceDB(db)
	return s
}

type studioDo struct{ gen.DO }

// SELECT * FROM `@@table` WHERE `id` = @id LIMIT 1
func (s studioDo) GetByID(id uint64) (result model.Studio) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM `studio` WHERE `id` = ? LIMIT 1 ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	_ = executeSQL

	return
}

// SELECT * FROM `@@table`
// {{where}}
//
//	{{if val != ""}}
//	  {{if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%")}}
//	    @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val), '%')
//	  {{else if strings.HasPrefix(val, "%")}}
//	    @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val))
//	  {{else if strings.HasSuffix(val, "%")}}
//	    @@col LIKE CONCAT(TRIM(BOTH '%' FROM @val), '%')
//	  {{else}}
//	    @@col = @val
//	  {{end}}
//	{{end}}
//
// {{end}}
// LIMIT 1
func (s studioDo) GetByCol(col string, val string) (result model.Studio) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM `studio` ")
	var whereSQL0 strings.Builder
	if val != "" {
		if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(s.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?), '%') ")
		} else if strings.HasPrefix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(s.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?)) ")
		} else if strings.HasSuffix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(s.Quote(col) + " LIKE CONCAT(TRIM(BOTH '%' FROM ?), '%') ")
		} else {
			params = append(params, val)
			whereSQL0.WriteString(s.Quote(col) + " = ? ")
		}
	}
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString("LIMIT 1 ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	_ = executeSQL

	return
}

// SELECT * FROM `@@table`
// {{if len(cols) == len(vals)}}
// {{where}}
//
//	  {{for i, col := range cols}}
//	    {{for j, val := range vals}}
//	      {{if i == j}}
//	        {{if val != ""}}
//	          {{if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%")}}
//	            @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val), '%') AND
//	          {{else if strings.HasPrefix(val, "%")}}
//	            @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val)) AND
//	          {{else if strings.HasSuffix(val, "%")}}
//	            @@col LIKE CONCAT(TRIM(BOTH '%' FROM @val), '%') AND
//	          {{else}}
//	            @@col = @val AND
//	          {{end}}
//	        {{end}}
//	      {{end}}
//	    {{end}}
//	  {{end}}
//	{{end}}
//
// {{end}}
// LIMIT 1
func (s studioDo) GetByCols(cols []string, vals []string) (result model.Studio) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM `studio` ")
	if len(cols) == len(vals) {
		var whereSQL0 strings.Builder
		for i, col := range cols {
			for j, val := range vals {
				if i == j {
					if val != "" {
						if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(s.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?), '%') AND ")
						} else if strings.HasPrefix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(s.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?)) AND ")
						} else if strings.HasSuffix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(s.Quote(col) + " LIKE CONCAT(TRIM(BOTH '%' FROM ?), '%') AND ")
						} else {
							params = append(params, val)
							whereSQL0.WriteString(s.Quote(col) + " = ? AND ")
						}
					}
				}
			}
		}
		helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	}
	generateSQL.WriteString("LIMIT 1 ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	_ = executeSQL

	return
}

// SELECT * FROM `@@table`
// {{where}}
//
//	{{if val != ""}}
//	  {{if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%")}}
//	    @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val), '%')
//	  {{else if strings.HasPrefix(val, "%")}}
//	    @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val))
//	  {{else if strings.HasSuffix(val, "%")}}
//	    @@col LIKE CONCAT(TRIM(BOTH '%' FROM @val), '%')
//	  {{else}}
//	    @@col = @val
//	  {{end}}
//	{{end}}
//
// {{end}}
func (s studioDo) FindByCol(col string, val string) (result []model.Studio) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM `studio` ")
	var whereSQL0 strings.Builder
	if val != "" {
		if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(s.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?), '%') ")
		} else if strings.HasPrefix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(s.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?)) ")
		} else if strings.HasSuffix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(s.Quote(col) + " LIKE CONCAT(TRIM(BOTH '%' FROM ?), '%') ")
		} else {
			params = append(params, val)
			whereSQL0.WriteString(s.Quote(col) + " = ? ")
		}
	}
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	_ = executeSQL

	return
}

// SELECT * FROM `@@table`
// {{if len(cols) == len(vals)}}
// {{where}}
//
//	  {{for i, col := range cols}}
//	    {{for j, val := range vals}}
//	      {{if i == j}}
//	        {{if val != ""}}
//	          {{if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%")}}
//	            @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val), '%') AND
//	          {{else if strings.HasPrefix(val, "%")}}
//	            @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val)) AND
//	          {{else if strings.HasSuffix(val, "%")}}
//	            @@col LIKE CONCAT(TRIM(BOTH '%' FROM @val), '%') AND
//	          {{else}}
//	            @@col = @val AND
//	          {{end}}
//	        {{end}}
//	      {{end}}
//	    {{end}}
//	  {{end}}
//	{{end}}
//
// {{end}}
func (s studioDo) FindByCols(cols []string, vals []string) (result []model.Studio) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM `studio` ")
	if len(cols) == len(vals) {
		var whereSQL0 strings.Builder
		for i, col := range cols {
			for j, val := range vals {
				if i == j {
					if val != "" {
						if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(s.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?), '%') AND ")
						} else if strings.HasPrefix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(s.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?)) AND ")
						} else if strings.HasSuffix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(s.Quote(col) + " LIKE CONCAT(TRIM(BOTH '%' FROM ?), '%') AND ")
						} else {
							params = append(params, val)
							whereSQL0.WriteString(s.Quote(col) + " = ? AND ")
						}
					}
				}
			}
		}
		helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	}

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	_ = executeSQL

	return
}

func (s studioDo) Debug() *studioDo {
	return s.withDO(s.DO.Debug())
}

func (s studioDo) WithContext(ctx context.Context) *studioDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s studioDo) ReadDB() *studioDo {
	return s.Clauses(dbresolver.Read)
}

func (s studioDo) WriteDB() *studioDo {
	return s.Clauses(dbresolver.Write)
}

func (s studioDo) Session(config *gorm.Session) *studioDo {
	return s.withDO(s.DO.Session(config))
}

func (s studioDo) Clauses(conds ...clause.Expression) *studioDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s studioDo) Returning(value interface{}, columns ...string) *studioDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s studioDo) Not(conds ...gen.Condition) *studioDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s studioDo) Or(conds ...gen.Condition) *studioDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s studioDo) Select(conds ...field.Expr) *studioDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s studioDo) Where(conds ...gen.Condition) *studioDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s studioDo) Order(conds ...field.Expr) *studioDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s studioDo) Distinct(cols ...field.Expr) *studioDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s studioDo) Omit(cols ...field.Expr) *studioDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s studioDo) Join(table schema.Tabler, on ...field.Expr) *studioDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s studioDo) LeftJoin(table schema.Tabler, on ...field.Expr) *studioDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s studioDo) RightJoin(table schema.Tabler, on ...field.Expr) *studioDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s studioDo) Group(cols ...field.Expr) *studioDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s studioDo) Having(conds ...gen.Condition) *studioDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s studioDo) Limit(limit int) *studioDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s studioDo) Offset(offset int) *studioDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s studioDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *studioDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s studioDo) Unscoped() *studioDo {
	return s.withDO(s.DO.Unscoped())
}

func (s studioDo) Create(values ...*model.Studio) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s studioDo) CreateInBatches(values []*model.Studio, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s studioDo) Save(values ...*model.Studio) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s studioDo) First() (*model.Studio, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Studio), nil
	}
}

func (s studioDo) Take() (*model.Studio, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Studio), nil
	}
}

func (s studioDo) Last() (*model.Studio, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Studio), nil
	}
}

func (s studioDo) Find() ([]*model.Studio, error) {
	result, err := s.DO.Find()
	return result.([]*model.Studio), err
}

func (s studioDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Studio, err error) {
	buf := make([]*model.Studio, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s studioDo) FindInBatches(result *[]*model.Studio, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s studioDo) Attrs(attrs ...field.AssignExpr) *studioDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s studioDo) Assign(attrs ...field.AssignExpr) *studioDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s studioDo) Joins(fields ...field.RelationField) *studioDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s studioDo) Preload(fields ...field.RelationField) *studioDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s studioDo) FirstOrInit() (*model.Studio, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Studio), nil
	}
}

func (s studioDo) FirstOrCreate() (*model.Studio, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Studio), nil
	}
}

func (s studioDo) FindByPage(offset int, limit int) (result []*model.Studio, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s studioDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s studioDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s studioDo) Delete(models ...*model.Studio) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *studioDo) withDO(do gen.Dao) *studioDo {
	s.DO = *do.(*gen.DO)
	return s
}
