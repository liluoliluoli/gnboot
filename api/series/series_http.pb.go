// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.1
// - protoc             v5.28.3
// source: proto/series.proto

package series

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	api "github.com/liluoliluoli/gnboot/api"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSeriesRemoteServiceDeleteSeries = "/gnboot.SeriesRemoteService/DeleteSeries"
const OperationSeriesRemoteServiceFilterSeries = "/gnboot.SeriesRemoteService/FilterSeries"
const OperationSeriesRemoteServiceFindSeries = "/gnboot.SeriesRemoteService/FindSeries"
const OperationSeriesRemoteServiceGetSeries = "/gnboot.SeriesRemoteService/GetSeries"
const OperationSeriesRemoteServiceNextToPlaySeries = "/gnboot.SeriesRemoteService/NextToPlaySeries"
const OperationSeriesRemoteServiceUpdateSeries = "/gnboot.SeriesRemoteService/UpdateSeries"

type SeriesRemoteServiceHTTPServer interface {
	DeleteSeries(context.Context, *api.IdsRequest) (*emptypb.Empty, error)
	FilterSeries(context.Context, *FilterSeriesRequest) (*SearchSeriesResp, error)
	FindSeries(context.Context, *FindSeriesRequest) (*SearchSeriesResp, error)
	GetSeries(context.Context, *GetSeriesRequest) (*SeriesResp, error)
	NextToPlaySeries(context.Context, *NextToPlaySeriesRequest) (*NextToPlaySeriesResp, error)
	UpdateSeries(context.Context, *UpdateSeriesRequest) (*emptypb.Empty, error)
}

func RegisterSeriesRemoteServiceHTTPServer(s *http.Server, srv SeriesRemoteServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/series/query/id", _SeriesRemoteService_GetSeries0_HTTP_Handler(srv))
	r.POST("/series/query/all", _SeriesRemoteService_FindSeries0_HTTP_Handler(srv))
	r.POST("/series/query/filter", _SeriesRemoteService_FilterSeries0_HTTP_Handler(srv))
	r.POST("/series/nextToPlay/query/all", _SeriesRemoteService_NextToPlaySeries0_HTTP_Handler(srv))
	r.PATCH("/series/update", _SeriesRemoteService_UpdateSeries0_HTTP_Handler(srv))
	r.PUT("/series/update", _SeriesRemoteService_UpdateSeries1_HTTP_Handler(srv))
	r.DELETE("/series/delete", _SeriesRemoteService_DeleteSeries0_HTTP_Handler(srv))
}

func _SeriesRemoteService_GetSeries0_HTTP_Handler(srv SeriesRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSeriesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSeriesRemoteServiceGetSeries)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSeries(ctx, req.(*GetSeriesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SeriesResp)
		return ctx.Result(200, reply)
	}
}

func _SeriesRemoteService_FindSeries0_HTTP_Handler(srv SeriesRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FindSeriesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSeriesRemoteServiceFindSeries)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FindSeries(ctx, req.(*FindSeriesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchSeriesResp)
		return ctx.Result(200, reply)
	}
}

func _SeriesRemoteService_FilterSeries0_HTTP_Handler(srv SeriesRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FilterSeriesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSeriesRemoteServiceFilterSeries)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FilterSeries(ctx, req.(*FilterSeriesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchSeriesResp)
		return ctx.Result(200, reply)
	}
}

func _SeriesRemoteService_NextToPlaySeries0_HTTP_Handler(srv SeriesRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NextToPlaySeriesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSeriesRemoteServiceNextToPlaySeries)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.NextToPlaySeries(ctx, req.(*NextToPlaySeriesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NextToPlaySeriesResp)
		return ctx.Result(200, reply)
	}
}

func _SeriesRemoteService_UpdateSeries0_HTTP_Handler(srv SeriesRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateSeriesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSeriesRemoteServiceUpdateSeries)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSeries(ctx, req.(*UpdateSeriesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _SeriesRemoteService_UpdateSeries1_HTTP_Handler(srv SeriesRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateSeriesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSeriesRemoteServiceUpdateSeries)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSeries(ctx, req.(*UpdateSeriesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _SeriesRemoteService_DeleteSeries0_HTTP_Handler(srv SeriesRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in api.IdsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSeriesRemoteServiceDeleteSeries)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSeries(ctx, req.(*api.IdsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type SeriesRemoteServiceHTTPClient interface {
	DeleteSeries(ctx context.Context, req *api.IdsRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	FilterSeries(ctx context.Context, req *FilterSeriesRequest, opts ...http.CallOption) (rsp *SearchSeriesResp, err error)
	FindSeries(ctx context.Context, req *FindSeriesRequest, opts ...http.CallOption) (rsp *SearchSeriesResp, err error)
	GetSeries(ctx context.Context, req *GetSeriesRequest, opts ...http.CallOption) (rsp *SeriesResp, err error)
	NextToPlaySeries(ctx context.Context, req *NextToPlaySeriesRequest, opts ...http.CallOption) (rsp *NextToPlaySeriesResp, err error)
	UpdateSeries(ctx context.Context, req *UpdateSeriesRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type SeriesRemoteServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewSeriesRemoteServiceHTTPClient(client *http.Client) SeriesRemoteServiceHTTPClient {
	return &SeriesRemoteServiceHTTPClientImpl{client}
}

func (c *SeriesRemoteServiceHTTPClientImpl) DeleteSeries(ctx context.Context, in *api.IdsRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/series/delete"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSeriesRemoteServiceDeleteSeries))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SeriesRemoteServiceHTTPClientImpl) FilterSeries(ctx context.Context, in *FilterSeriesRequest, opts ...http.CallOption) (*SearchSeriesResp, error) {
	var out SearchSeriesResp
	pattern := "/series/query/filter"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSeriesRemoteServiceFilterSeries))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SeriesRemoteServiceHTTPClientImpl) FindSeries(ctx context.Context, in *FindSeriesRequest, opts ...http.CallOption) (*SearchSeriesResp, error) {
	var out SearchSeriesResp
	pattern := "/series/query/all"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSeriesRemoteServiceFindSeries))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SeriesRemoteServiceHTTPClientImpl) GetSeries(ctx context.Context, in *GetSeriesRequest, opts ...http.CallOption) (*SeriesResp, error) {
	var out SeriesResp
	pattern := "/series/query/id"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSeriesRemoteServiceGetSeries))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SeriesRemoteServiceHTTPClientImpl) NextToPlaySeries(ctx context.Context, in *NextToPlaySeriesRequest, opts ...http.CallOption) (*NextToPlaySeriesResp, error) {
	var out NextToPlaySeriesResp
	pattern := "/series/nextToPlay/query/all"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSeriesRemoteServiceNextToPlaySeries))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SeriesRemoteServiceHTTPClientImpl) UpdateSeries(ctx context.Context, in *UpdateSeriesRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/series/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSeriesRemoteServiceUpdateSeries))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
