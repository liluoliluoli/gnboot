// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liluoliluoli/gnboot/internal/repo/model"
)

func newEpisode(db *gorm.DB, opts ...gen.DOOption) episode {
	_episode := episode{}

	_episode.episodeDo.UseDB(db, opts...)
	_episode.episodeDo.UseModel(&model.Episode{})

	tableName := _episode.episodeDo.TableName()
	_episode.ALL = field.NewAsterisk(tableName)
	_episode.ID = field.NewInt64(tableName, "id")
	_episode.VideoID = field.NewInt64(tableName, "video_id")
	_episode.XiaoyaPath = field.NewString(tableName, "xiaoya_path")
	_episode.Episode = field.NewInt32(tableName, "episode")
	_episode.EpisodeTitle = field.NewString(tableName, "episode_title")
	_episode.URL = field.NewString(tableName, "url")
	_episode.Platform = field.NewString(tableName, "platform")
	_episode.Ext = field.NewString(tableName, "ext")
	_episode.Duration = field.NewInt64(tableName, "duration")
	_episode.Size = field.NewString(tableName, "size")
	_episode.IsValid = field.NewBool(tableName, "is_valid")
	_episode.ExpiredTime = field.NewTime(tableName, "expired_time")
	_episode.CreateTime = field.NewTime(tableName, "create_time")
	_episode.UpdateTime = field.NewTime(tableName, "update_time")
	_episode.Ratio = field.NewString(tableName, "ratio")
	_episode.JellyfinID = field.NewString(tableName, "jellyfin_id")
	_episode.DisplayTitle = field.NewString(tableName, "display_title")

	_episode.fillFieldMap()

	return _episode
}

type episode struct {
	episodeDo episodeDo

	ALL          field.Asterisk
	ID           field.Int64 // 主键
	VideoID      field.Int64 // 影片id
	XiaoyaPath   field.String
	Episode      field.Int32  // 第几集
	EpisodeTitle field.String // 集标题
	URL          field.String // 影片地址，如果非internal可以为空，每次调用外部数据源接口获取播放地址
	Platform     field.String //  aliyun
	Ext          field.String // 扩展参数
	Duration     field.Int64  // 影片时长，秒
	Size         field.String // 影片大小
	IsValid      field.Bool   // 是否有效
	ExpiredTime  field.Time   // 阿里云盘过期时间
	CreateTime   field.Time   // 创建时间
	UpdateTime   field.Time   // 更新时间
	Ratio        field.String // 分辨率LD，SD，HD，QHD
	JellyfinID   field.String // jellyfin id
	DisplayTitle field.String // 用于展示的title

	fieldMap map[string]field.Expr
}

func (e episode) Table(newTableName string) *episode {
	e.episodeDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e episode) As(alias string) *episode {
	e.episodeDo.DO = *(e.episodeDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *episode) updateTableName(table string) *episode {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.VideoID = field.NewInt64(table, "video_id")
	e.XiaoyaPath = field.NewString(table, "xiaoya_path")
	e.Episode = field.NewInt32(table, "episode")
	e.EpisodeTitle = field.NewString(table, "episode_title")
	e.URL = field.NewString(table, "url")
	e.Platform = field.NewString(table, "platform")
	e.Ext = field.NewString(table, "ext")
	e.Duration = field.NewInt64(table, "duration")
	e.Size = field.NewString(table, "size")
	e.IsValid = field.NewBool(table, "is_valid")
	e.ExpiredTime = field.NewTime(table, "expired_time")
	e.CreateTime = field.NewTime(table, "create_time")
	e.UpdateTime = field.NewTime(table, "update_time")
	e.Ratio = field.NewString(table, "ratio")
	e.JellyfinID = field.NewString(table, "jellyfin_id")
	e.DisplayTitle = field.NewString(table, "display_title")

	e.fillFieldMap()

	return e
}

func (e *episode) WithContext(ctx context.Context) IEpisodeDo { return e.episodeDo.WithContext(ctx) }

func (e episode) TableName() string { return e.episodeDo.TableName() }

func (e episode) Alias() string { return e.episodeDo.Alias() }

func (e *episode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *episode) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 17)
	e.fieldMap["id"] = e.ID
	e.fieldMap["video_id"] = e.VideoID
	e.fieldMap["xiaoya_path"] = e.XiaoyaPath
	e.fieldMap["episode"] = e.Episode
	e.fieldMap["episode_title"] = e.EpisodeTitle
	e.fieldMap["url"] = e.URL
	e.fieldMap["platform"] = e.Platform
	e.fieldMap["ext"] = e.Ext
	e.fieldMap["duration"] = e.Duration
	e.fieldMap["size"] = e.Size
	e.fieldMap["is_valid"] = e.IsValid
	e.fieldMap["expired_time"] = e.ExpiredTime
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["update_time"] = e.UpdateTime
	e.fieldMap["ratio"] = e.Ratio
	e.fieldMap["jellyfin_id"] = e.JellyfinID
	e.fieldMap["display_title"] = e.DisplayTitle
}

func (e episode) clone(db *gorm.DB) episode {
	e.episodeDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e episode) replaceDB(db *gorm.DB) episode {
	e.episodeDo.ReplaceDB(db)
	return e
}

type episodeDo struct{ gen.DO }

type IEpisodeDo interface {
	gen.SubQuery
	Debug() IEpisodeDo
	WithContext(ctx context.Context) IEpisodeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEpisodeDo
	WriteDB() IEpisodeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEpisodeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEpisodeDo
	Not(conds ...gen.Condition) IEpisodeDo
	Or(conds ...gen.Condition) IEpisodeDo
	Select(conds ...field.Expr) IEpisodeDo
	Where(conds ...gen.Condition) IEpisodeDo
	Order(conds ...field.Expr) IEpisodeDo
	Distinct(cols ...field.Expr) IEpisodeDo
	Omit(cols ...field.Expr) IEpisodeDo
	Join(table schema.Tabler, on ...field.Expr) IEpisodeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEpisodeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEpisodeDo
	Group(cols ...field.Expr) IEpisodeDo
	Having(conds ...gen.Condition) IEpisodeDo
	Limit(limit int) IEpisodeDo
	Offset(offset int) IEpisodeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEpisodeDo
	Unscoped() IEpisodeDo
	Create(values ...*model.Episode) error
	CreateInBatches(values []*model.Episode, batchSize int) error
	Save(values ...*model.Episode) error
	First() (*model.Episode, error)
	Take() (*model.Episode, error)
	Last() (*model.Episode, error)
	Find() ([]*model.Episode, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Episode, err error)
	FindInBatches(result *[]*model.Episode, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Episode) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEpisodeDo
	Assign(attrs ...field.AssignExpr) IEpisodeDo
	Joins(fields ...field.RelationField) IEpisodeDo
	Preload(fields ...field.RelationField) IEpisodeDo
	FirstOrInit() (*model.Episode, error)
	FirstOrCreate() (*model.Episode, error)
	FindByPage(offset int, limit int) (result []*model.Episode, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEpisodeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	SelectByID(id int64) (result *model.Episode, err error)
}

// SELECT * FROM @@table WHERE id=@id
func (e episodeDo) SelectByID(id int64) (result *model.Episode, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM episode WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (e episodeDo) Debug() IEpisodeDo {
	return e.withDO(e.DO.Debug())
}

func (e episodeDo) WithContext(ctx context.Context) IEpisodeDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e episodeDo) ReadDB() IEpisodeDo {
	return e.Clauses(dbresolver.Read)
}

func (e episodeDo) WriteDB() IEpisodeDo {
	return e.Clauses(dbresolver.Write)
}

func (e episodeDo) Session(config *gorm.Session) IEpisodeDo {
	return e.withDO(e.DO.Session(config))
}

func (e episodeDo) Clauses(conds ...clause.Expression) IEpisodeDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e episodeDo) Returning(value interface{}, columns ...string) IEpisodeDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e episodeDo) Not(conds ...gen.Condition) IEpisodeDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e episodeDo) Or(conds ...gen.Condition) IEpisodeDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e episodeDo) Select(conds ...field.Expr) IEpisodeDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e episodeDo) Where(conds ...gen.Condition) IEpisodeDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e episodeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IEpisodeDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e episodeDo) Order(conds ...field.Expr) IEpisodeDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e episodeDo) Distinct(cols ...field.Expr) IEpisodeDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e episodeDo) Omit(cols ...field.Expr) IEpisodeDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e episodeDo) Join(table schema.Tabler, on ...field.Expr) IEpisodeDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e episodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEpisodeDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e episodeDo) RightJoin(table schema.Tabler, on ...field.Expr) IEpisodeDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e episodeDo) Group(cols ...field.Expr) IEpisodeDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e episodeDo) Having(conds ...gen.Condition) IEpisodeDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e episodeDo) Limit(limit int) IEpisodeDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e episodeDo) Offset(offset int) IEpisodeDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e episodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEpisodeDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e episodeDo) Unscoped() IEpisodeDo {
	return e.withDO(e.DO.Unscoped())
}

func (e episodeDo) Create(values ...*model.Episode) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e episodeDo) CreateInBatches(values []*model.Episode, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e episodeDo) Save(values ...*model.Episode) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e episodeDo) First() (*model.Episode, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Episode), nil
	}
}

func (e episodeDo) Take() (*model.Episode, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Episode), nil
	}
}

func (e episodeDo) Last() (*model.Episode, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Episode), nil
	}
}

func (e episodeDo) Find() ([]*model.Episode, error) {
	result, err := e.DO.Find()
	return result.([]*model.Episode), err
}

func (e episodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Episode, err error) {
	buf := make([]*model.Episode, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e episodeDo) FindInBatches(result *[]*model.Episode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e episodeDo) Attrs(attrs ...field.AssignExpr) IEpisodeDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e episodeDo) Assign(attrs ...field.AssignExpr) IEpisodeDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e episodeDo) Joins(fields ...field.RelationField) IEpisodeDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e episodeDo) Preload(fields ...field.RelationField) IEpisodeDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e episodeDo) FirstOrInit() (*model.Episode, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Episode), nil
	}
}

func (e episodeDo) FirstOrCreate() (*model.Episode, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Episode), nil
	}
}

func (e episodeDo) FindByPage(offset int, limit int) (result []*model.Episode, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e episodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e episodeDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e episodeDo) Delete(models ...*model.Episode) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *episodeDo) withDO(do gen.Dao) *episodeDo {
	e.DO = *do.(*gen.DO)
	return e
}
