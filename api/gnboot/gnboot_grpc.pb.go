// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: gnboot-proto/gnboot.proto

package gnboot

import (
	context "context"
	params "github.com/go-cinch/common/proto/params"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gnboot_CreateMovie_FullMethodName = "/gnboot.v1.Gnboot/CreateMovie"
	Gnboot_GetMovie_FullMethodName    = "/gnboot.v1.Gnboot/GetMovie"
	Gnboot_FindMovie_FullMethodName   = "/gnboot.v1.Gnboot/FindMovie"
	Gnboot_UpdateMovie_FullMethodName = "/gnboot.v1.Gnboot/UpdateMovie"
	Gnboot_DeleteMovie_FullMethodName = "/gnboot.v1.Gnboot/DeleteMovie"
)

// GnbootClient is the client API for Gnboot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GnbootClient interface {
	// create one Movie record
	CreateMovie(ctx context.Context, in *CreateMovieRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// query one Movie record
	GetMovie(ctx context.Context, in *GetMovieRequest, opts ...grpc.CallOption) (*GetMovieReply, error)
	// query Movie list by page
	FindMovie(ctx context.Context, in *FindMovieRequest, opts ...grpc.CallOption) (*FindMovieReply, error)
	// update one Movie record by id
	UpdateMovie(ctx context.Context, in *UpdateMovieRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// delete one or more Movie record by id
	DeleteMovie(ctx context.Context, in *params.IdsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type gnbootClient struct {
	cc grpc.ClientConnInterface
}

func NewGnbootClient(cc grpc.ClientConnInterface) GnbootClient {
	return &gnbootClient{cc}
}

func (c *gnbootClient) CreateMovie(ctx context.Context, in *CreateMovieRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Gnboot_CreateMovie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gnbootClient) GetMovie(ctx context.Context, in *GetMovieRequest, opts ...grpc.CallOption) (*GetMovieReply, error) {
	out := new(GetMovieReply)
	err := c.cc.Invoke(ctx, Gnboot_GetMovie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gnbootClient) FindMovie(ctx context.Context, in *FindMovieRequest, opts ...grpc.CallOption) (*FindMovieReply, error) {
	out := new(FindMovieReply)
	err := c.cc.Invoke(ctx, Gnboot_FindMovie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gnbootClient) UpdateMovie(ctx context.Context, in *UpdateMovieRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Gnboot_UpdateMovie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gnbootClient) DeleteMovie(ctx context.Context, in *params.IdsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Gnboot_DeleteMovie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GnbootServer is the server API for Gnboot service.
// All implementations must embed UnimplementedGnbootServer
// for forward compatibility
type GnbootServer interface {
	// create one Movie record
	CreateMovie(context.Context, *CreateMovieRequest) (*emptypb.Empty, error)
	// query one Movie record
	GetMovie(context.Context, *GetMovieRequest) (*GetMovieReply, error)
	// query Movie list by page
	FindMovie(context.Context, *FindMovieRequest) (*FindMovieReply, error)
	// update one Movie record by id
	UpdateMovie(context.Context, *UpdateMovieRequest) (*emptypb.Empty, error)
	// delete one or more Movie record by id
	DeleteMovie(context.Context, *params.IdsRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedGnbootServer()
}

// UnimplementedGnbootServer must be embedded to have forward compatible implementations.
type UnimplementedGnbootServer struct {
}

func (UnimplementedGnbootServer) CreateMovie(context.Context, *CreateMovieRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMovie not implemented")
}
func (UnimplementedGnbootServer) GetMovie(context.Context, *GetMovieRequest) (*GetMovieReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovie not implemented")
}
func (UnimplementedGnbootServer) FindMovie(context.Context, *FindMovieRequest) (*FindMovieReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMovie not implemented")
}
func (UnimplementedGnbootServer) UpdateMovie(context.Context, *UpdateMovieRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMovie not implemented")
}
func (UnimplementedGnbootServer) DeleteMovie(context.Context, *params.IdsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovie not implemented")
}
func (UnimplementedGnbootServer) mustEmbedUnimplementedGnbootServer() {}

// UnsafeGnbootServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GnbootServer will
// result in compilation errors.
type UnsafeGnbootServer interface {
	mustEmbedUnimplementedGnbootServer()
}

func RegisterGnbootServer(s grpc.ServiceRegistrar, srv GnbootServer) {
	s.RegisterService(&Gnboot_ServiceDesc, srv)
}

func _Gnboot_CreateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GnbootServer).CreateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gnboot_CreateMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GnbootServer).CreateMovie(ctx, req.(*CreateMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gnboot_GetMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GnbootServer).GetMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gnboot_GetMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GnbootServer).GetMovie(ctx, req.(*GetMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gnboot_FindMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GnbootServer).FindMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gnboot_FindMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GnbootServer).FindMovie(ctx, req.(*FindMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gnboot_UpdateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GnbootServer).UpdateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gnboot_UpdateMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GnbootServer).UpdateMovie(ctx, req.(*UpdateMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gnboot_DeleteMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(params.IdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GnbootServer).DeleteMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gnboot_DeleteMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GnbootServer).DeleteMovie(ctx, req.(*params.IdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gnboot_ServiceDesc is the grpc.ServiceDesc for Gnboot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gnboot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnboot.v1.Gnboot",
	HandlerType: (*GnbootServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMovie",
			Handler:    _Gnboot_CreateMovie_Handler,
		},
		{
			MethodName: "GetMovie",
			Handler:    _Gnboot_GetMovie_Handler,
		},
		{
			MethodName: "FindMovie",
			Handler:    _Gnboot_FindMovie_Handler,
		},
		{
			MethodName: "UpdateMovie",
			Handler:    _Gnboot_UpdateMovie_Handler,
		},
		{
			MethodName: "DeleteMovie",
			Handler:    _Gnboot_DeleteMovie_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gnboot-proto/gnboot.proto",
}
