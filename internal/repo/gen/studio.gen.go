// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gnboot/internal/repo/model"
)

func newStudio(db *gorm.DB, opts ...gen.DOOption) studio {
	_studio := studio{}

	_studio.studioDo.UseDB(db, opts...)
	_studio.studioDo.UseModel(&model.Studio{})

	tableName := _studio.studioDo.TableName()
	_studio.ALL = field.NewAsterisk(tableName)
	_studio.ID = field.NewInt64(tableName, "id")
	_studio.Name = field.NewString(tableName, "name")
	_studio.Country = field.NewString(tableName, "country")
	_studio.Logo = field.NewString(tableName, "logo")

	_studio.fillFieldMap()

	return _studio
}

type studio struct {
	studioDo studioDo

	ALL     field.Asterisk
	ID      field.Int64  // 主键
	Name    field.String // 名称
	Country field.String // 国家
	Logo    field.String // logo的地址

	fieldMap map[string]field.Expr
}

func (s studio) Table(newTableName string) *studio {
	s.studioDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s studio) As(alias string) *studio {
	s.studioDo.DO = *(s.studioDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *studio) updateTableName(table string) *studio {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Name = field.NewString(table, "name")
	s.Country = field.NewString(table, "country")
	s.Logo = field.NewString(table, "logo")

	s.fillFieldMap()

	return s
}

func (s *studio) WithContext(ctx context.Context) IStudioDo { return s.studioDo.WithContext(ctx) }

func (s studio) TableName() string { return s.studioDo.TableName() }

func (s studio) Alias() string { return s.studioDo.Alias() }

func (s *studio) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *studio) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["country"] = s.Country
	s.fieldMap["logo"] = s.Logo
}

func (s studio) clone(db *gorm.DB) studio {
	s.studioDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s studio) replaceDB(db *gorm.DB) studio {
	s.studioDo.ReplaceDB(db)
	return s
}

type studioDo struct{ gen.DO }

type IStudioDo interface {
	gen.SubQuery
	Debug() IStudioDo
	WithContext(ctx context.Context) IStudioDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStudioDo
	WriteDB() IStudioDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStudioDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStudioDo
	Not(conds ...gen.Condition) IStudioDo
	Or(conds ...gen.Condition) IStudioDo
	Select(conds ...field.Expr) IStudioDo
	Where(conds ...gen.Condition) IStudioDo
	Order(conds ...field.Expr) IStudioDo
	Distinct(cols ...field.Expr) IStudioDo
	Omit(cols ...field.Expr) IStudioDo
	Join(table schema.Tabler, on ...field.Expr) IStudioDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStudioDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStudioDo
	Group(cols ...field.Expr) IStudioDo
	Having(conds ...gen.Condition) IStudioDo
	Limit(limit int) IStudioDo
	Offset(offset int) IStudioDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStudioDo
	Unscoped() IStudioDo
	Create(values ...*model.Studio) error
	CreateInBatches(values []*model.Studio, batchSize int) error
	Save(values ...*model.Studio) error
	First() (*model.Studio, error)
	Take() (*model.Studio, error)
	Last() (*model.Studio, error)
	Find() ([]*model.Studio, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Studio, err error)
	FindInBatches(result *[]*model.Studio, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Studio) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStudioDo
	Assign(attrs ...field.AssignExpr) IStudioDo
	Joins(fields ...field.RelationField) IStudioDo
	Preload(fields ...field.RelationField) IStudioDo
	FirstOrInit() (*model.Studio, error)
	FirstOrCreate() (*model.Studio, error)
	FindByPage(offset int, limit int) (result []*model.Studio, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStudioDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	SelectByID(id int64) (result *model.Studio, err error)
}

// SELECT * FROM @@table WHERE id=@id
func (s studioDo) SelectByID(id int64) (result *model.Studio, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM studio WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (s studioDo) Debug() IStudioDo {
	return s.withDO(s.DO.Debug())
}

func (s studioDo) WithContext(ctx context.Context) IStudioDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s studioDo) ReadDB() IStudioDo {
	return s.Clauses(dbresolver.Read)
}

func (s studioDo) WriteDB() IStudioDo {
	return s.Clauses(dbresolver.Write)
}

func (s studioDo) Session(config *gorm.Session) IStudioDo {
	return s.withDO(s.DO.Session(config))
}

func (s studioDo) Clauses(conds ...clause.Expression) IStudioDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s studioDo) Returning(value interface{}, columns ...string) IStudioDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s studioDo) Not(conds ...gen.Condition) IStudioDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s studioDo) Or(conds ...gen.Condition) IStudioDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s studioDo) Select(conds ...field.Expr) IStudioDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s studioDo) Where(conds ...gen.Condition) IStudioDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s studioDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IStudioDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s studioDo) Order(conds ...field.Expr) IStudioDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s studioDo) Distinct(cols ...field.Expr) IStudioDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s studioDo) Omit(cols ...field.Expr) IStudioDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s studioDo) Join(table schema.Tabler, on ...field.Expr) IStudioDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s studioDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStudioDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s studioDo) RightJoin(table schema.Tabler, on ...field.Expr) IStudioDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s studioDo) Group(cols ...field.Expr) IStudioDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s studioDo) Having(conds ...gen.Condition) IStudioDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s studioDo) Limit(limit int) IStudioDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s studioDo) Offset(offset int) IStudioDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s studioDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStudioDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s studioDo) Unscoped() IStudioDo {
	return s.withDO(s.DO.Unscoped())
}

func (s studioDo) Create(values ...*model.Studio) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s studioDo) CreateInBatches(values []*model.Studio, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s studioDo) Save(values ...*model.Studio) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s studioDo) First() (*model.Studio, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Studio), nil
	}
}

func (s studioDo) Take() (*model.Studio, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Studio), nil
	}
}

func (s studioDo) Last() (*model.Studio, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Studio), nil
	}
}

func (s studioDo) Find() ([]*model.Studio, error) {
	result, err := s.DO.Find()
	return result.([]*model.Studio), err
}

func (s studioDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Studio, err error) {
	buf := make([]*model.Studio, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s studioDo) FindInBatches(result *[]*model.Studio, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s studioDo) Attrs(attrs ...field.AssignExpr) IStudioDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s studioDo) Assign(attrs ...field.AssignExpr) IStudioDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s studioDo) Joins(fields ...field.RelationField) IStudioDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s studioDo) Preload(fields ...field.RelationField) IStudioDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s studioDo) FirstOrInit() (*model.Studio, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Studio), nil
	}
}

func (s studioDo) FirstOrCreate() (*model.Studio, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Studio), nil
	}
}

func (s studioDo) FindByPage(offset int, limit int) (result []*model.Studio, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s studioDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s studioDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s studioDo) Delete(models ...*model.Studio) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *studioDo) withDO(do gen.Dao) *studioDo {
	s.DO = *do.(*gen.DO)
	return s
}
