// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liluoliluoli/gnboot/internal/repo/model"
)

func newSeason(db *gorm.DB, opts ...gen.DOOption) season {
	_season := season{}

	_season.seasonDo.UseDB(db, opts...)
	_season.seasonDo.UseModel(&model.Season{})

	tableName := _season.seasonDo.TableName()
	_season.ALL = field.NewAsterisk(tableName)
	_season.ID = field.NewInt64(tableName, "id")
	_season.SeriesID = field.NewInt64(tableName, "series_id")
	_season.Season = field.NewInt32(tableName, "season")
	_season.SeriesTitle = field.NewString(tableName, "series_title")
	_season.SkipIntro = field.NewInt32(tableName, "skip_intro")
	_season.SkipEnding = field.NewInt32(tableName, "skip_ending")
	_season.EpisodeCount = field.NewInt32(tableName, "episode_count")
	_season.CreateTime = field.NewTime(tableName, "create_time")
	_season.UpdateTime = field.NewTime(tableName, "update_time")

	_season.fillFieldMap()

	return _season
}

type season struct {
	seasonDo seasonDo

	ALL          field.Asterisk
	ID           field.Int64  // 主键
	SeriesID     field.Int64  // 连续剧id
	Season       field.Int32  // 第几季
	SeriesTitle  field.String // 季名称
	SkipIntro    field.Int32  // 片头跳过秒数
	SkipEnding   field.Int32  // 片尾跳过秒数
	EpisodeCount field.Int32  // 总集数
	CreateTime   field.Time
	UpdateTime   field.Time

	fieldMap map[string]field.Expr
}

func (s season) Table(newTableName string) *season {
	s.seasonDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s season) As(alias string) *season {
	s.seasonDo.DO = *(s.seasonDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *season) updateTableName(table string) *season {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.SeriesID = field.NewInt64(table, "series_id")
	s.Season = field.NewInt32(table, "season")
	s.SeriesTitle = field.NewString(table, "series_title")
	s.SkipIntro = field.NewInt32(table, "skip_intro")
	s.SkipEnding = field.NewInt32(table, "skip_ending")
	s.EpisodeCount = field.NewInt32(table, "episode_count")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateTime = field.NewTime(table, "update_time")

	s.fillFieldMap()

	return s
}

func (s *season) WithContext(ctx context.Context) ISeasonDo { return s.seasonDo.WithContext(ctx) }

func (s season) TableName() string { return s.seasonDo.TableName() }

func (s season) Alias() string { return s.seasonDo.Alias() }

func (s *season) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *season) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["id"] = s.ID
	s.fieldMap["series_id"] = s.SeriesID
	s.fieldMap["season"] = s.Season
	s.fieldMap["series_title"] = s.SeriesTitle
	s.fieldMap["skip_intro"] = s.SkipIntro
	s.fieldMap["skip_ending"] = s.SkipEnding
	s.fieldMap["episode_count"] = s.EpisodeCount
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_time"] = s.UpdateTime
}

func (s season) clone(db *gorm.DB) season {
	s.seasonDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s season) replaceDB(db *gorm.DB) season {
	s.seasonDo.ReplaceDB(db)
	return s
}

type seasonDo struct{ gen.DO }

type ISeasonDo interface {
	gen.SubQuery
	Debug() ISeasonDo
	WithContext(ctx context.Context) ISeasonDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeasonDo
	WriteDB() ISeasonDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeasonDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeasonDo
	Not(conds ...gen.Condition) ISeasonDo
	Or(conds ...gen.Condition) ISeasonDo
	Select(conds ...field.Expr) ISeasonDo
	Where(conds ...gen.Condition) ISeasonDo
	Order(conds ...field.Expr) ISeasonDo
	Distinct(cols ...field.Expr) ISeasonDo
	Omit(cols ...field.Expr) ISeasonDo
	Join(table schema.Tabler, on ...field.Expr) ISeasonDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeasonDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeasonDo
	Group(cols ...field.Expr) ISeasonDo
	Having(conds ...gen.Condition) ISeasonDo
	Limit(limit int) ISeasonDo
	Offset(offset int) ISeasonDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeasonDo
	Unscoped() ISeasonDo
	Create(values ...*model.Season) error
	CreateInBatches(values []*model.Season, batchSize int) error
	Save(values ...*model.Season) error
	First() (*model.Season, error)
	Take() (*model.Season, error)
	Last() (*model.Season, error)
	Find() ([]*model.Season, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Season, err error)
	FindInBatches(result *[]*model.Season, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Season) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeasonDo
	Assign(attrs ...field.AssignExpr) ISeasonDo
	Joins(fields ...field.RelationField) ISeasonDo
	Preload(fields ...field.RelationField) ISeasonDo
	FirstOrInit() (*model.Season, error)
	FirstOrCreate() (*model.Season, error)
	FindByPage(offset int, limit int) (result []*model.Season, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeasonDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	SelectByID(id int64) (result *model.Season, err error)
}

// SELECT * FROM @@table WHERE id=@id
func (s seasonDo) SelectByID(id int64) (result *model.Season, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM season WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (s seasonDo) Debug() ISeasonDo {
	return s.withDO(s.DO.Debug())
}

func (s seasonDo) WithContext(ctx context.Context) ISeasonDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seasonDo) ReadDB() ISeasonDo {
	return s.Clauses(dbresolver.Read)
}

func (s seasonDo) WriteDB() ISeasonDo {
	return s.Clauses(dbresolver.Write)
}

func (s seasonDo) Session(config *gorm.Session) ISeasonDo {
	return s.withDO(s.DO.Session(config))
}

func (s seasonDo) Clauses(conds ...clause.Expression) ISeasonDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seasonDo) Returning(value interface{}, columns ...string) ISeasonDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seasonDo) Not(conds ...gen.Condition) ISeasonDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seasonDo) Or(conds ...gen.Condition) ISeasonDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seasonDo) Select(conds ...field.Expr) ISeasonDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seasonDo) Where(conds ...gen.Condition) ISeasonDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seasonDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISeasonDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s seasonDo) Order(conds ...field.Expr) ISeasonDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seasonDo) Distinct(cols ...field.Expr) ISeasonDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seasonDo) Omit(cols ...field.Expr) ISeasonDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seasonDo) Join(table schema.Tabler, on ...field.Expr) ISeasonDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seasonDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeasonDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seasonDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeasonDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seasonDo) Group(cols ...field.Expr) ISeasonDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seasonDo) Having(conds ...gen.Condition) ISeasonDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seasonDo) Limit(limit int) ISeasonDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seasonDo) Offset(offset int) ISeasonDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seasonDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeasonDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seasonDo) Unscoped() ISeasonDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seasonDo) Create(values ...*model.Season) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seasonDo) CreateInBatches(values []*model.Season, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seasonDo) Save(values ...*model.Season) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seasonDo) First() (*model.Season, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Season), nil
	}
}

func (s seasonDo) Take() (*model.Season, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Season), nil
	}
}

func (s seasonDo) Last() (*model.Season, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Season), nil
	}
}

func (s seasonDo) Find() ([]*model.Season, error) {
	result, err := s.DO.Find()
	return result.([]*model.Season), err
}

func (s seasonDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Season, err error) {
	buf := make([]*model.Season, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seasonDo) FindInBatches(result *[]*model.Season, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seasonDo) Attrs(attrs ...field.AssignExpr) ISeasonDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seasonDo) Assign(attrs ...field.AssignExpr) ISeasonDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seasonDo) Joins(fields ...field.RelationField) ISeasonDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seasonDo) Preload(fields ...field.RelationField) ISeasonDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seasonDo) FirstOrInit() (*model.Season, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Season), nil
	}
}

func (s seasonDo) FirstOrCreate() (*model.Season, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Season), nil
	}
}

func (s seasonDo) FindByPage(offset int, limit int) (result []*model.Season, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seasonDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seasonDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seasonDo) Delete(models ...*model.Season) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seasonDo) withDO(do gen.Dao) *seasonDo {
	s.DO = *do.(*gen.DO)
	return s
}
