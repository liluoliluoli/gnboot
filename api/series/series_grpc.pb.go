// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: proto/series.proto

package series

import (
	context "context"
	api "github.com/liluoliluoli/gnboot/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SeriesRemoteService_GetSeries_FullMethodName        = "/gnboot.SeriesRemoteService/GetSeries"
	SeriesRemoteService_FindSeries_FullMethodName       = "/gnboot.SeriesRemoteService/FindSeries"
	SeriesRemoteService_FilterSeries_FullMethodName     = "/gnboot.SeriesRemoteService/FilterSeries"
	SeriesRemoteService_NextToPlaySeries_FullMethodName = "/gnboot.SeriesRemoteService/NextToPlaySeries"
	SeriesRemoteService_UpdateSeries_FullMethodName     = "/gnboot.SeriesRemoteService/UpdateSeries"
	SeriesRemoteService_DeleteSeries_FullMethodName     = "/gnboot.SeriesRemoteService/DeleteSeries"
)

// SeriesRemoteServiceClient is the client API for SeriesRemoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeriesRemoteServiceClient interface {
	GetSeries(ctx context.Context, in *GetSeriesRequest, opts ...grpc.CallOption) (*SeriesResp, error)
	FindSeries(ctx context.Context, in *FindSeriesRequest, opts ...grpc.CallOption) (*SearchSeriesResp, error)
	FilterSeries(ctx context.Context, in *FilterSeriesRequest, opts ...grpc.CallOption) (*SearchSeriesResp, error)
	NextToPlaySeries(ctx context.Context, in *NextToPlaySeriesRequest, opts ...grpc.CallOption) (*NextToPlaySeriesResp, error)
	UpdateSeries(ctx context.Context, in *UpdateSeriesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteSeries(ctx context.Context, in *api.IdsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type seriesRemoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeriesRemoteServiceClient(cc grpc.ClientConnInterface) SeriesRemoteServiceClient {
	return &seriesRemoteServiceClient{cc}
}

func (c *seriesRemoteServiceClient) GetSeries(ctx context.Context, in *GetSeriesRequest, opts ...grpc.CallOption) (*SeriesResp, error) {
	out := new(SeriesResp)
	err := c.cc.Invoke(ctx, SeriesRemoteService_GetSeries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seriesRemoteServiceClient) FindSeries(ctx context.Context, in *FindSeriesRequest, opts ...grpc.CallOption) (*SearchSeriesResp, error) {
	out := new(SearchSeriesResp)
	err := c.cc.Invoke(ctx, SeriesRemoteService_FindSeries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seriesRemoteServiceClient) FilterSeries(ctx context.Context, in *FilterSeriesRequest, opts ...grpc.CallOption) (*SearchSeriesResp, error) {
	out := new(SearchSeriesResp)
	err := c.cc.Invoke(ctx, SeriesRemoteService_FilterSeries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seriesRemoteServiceClient) NextToPlaySeries(ctx context.Context, in *NextToPlaySeriesRequest, opts ...grpc.CallOption) (*NextToPlaySeriesResp, error) {
	out := new(NextToPlaySeriesResp)
	err := c.cc.Invoke(ctx, SeriesRemoteService_NextToPlaySeries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seriesRemoteServiceClient) UpdateSeries(ctx context.Context, in *UpdateSeriesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SeriesRemoteService_UpdateSeries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seriesRemoteServiceClient) DeleteSeries(ctx context.Context, in *api.IdsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SeriesRemoteService_DeleteSeries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeriesRemoteServiceServer is the server API for SeriesRemoteService service.
// All implementations must embed UnimplementedSeriesRemoteServiceServer
// for forward compatibility
type SeriesRemoteServiceServer interface {
	GetSeries(context.Context, *GetSeriesRequest) (*SeriesResp, error)
	FindSeries(context.Context, *FindSeriesRequest) (*SearchSeriesResp, error)
	FilterSeries(context.Context, *FilterSeriesRequest) (*SearchSeriesResp, error)
	NextToPlaySeries(context.Context, *NextToPlaySeriesRequest) (*NextToPlaySeriesResp, error)
	UpdateSeries(context.Context, *UpdateSeriesRequest) (*emptypb.Empty, error)
	DeleteSeries(context.Context, *api.IdsRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSeriesRemoteServiceServer()
}

// UnimplementedSeriesRemoteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSeriesRemoteServiceServer struct {
}

func (UnimplementedSeriesRemoteServiceServer) GetSeries(context.Context, *GetSeriesRequest) (*SeriesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeries not implemented")
}
func (UnimplementedSeriesRemoteServiceServer) FindSeries(context.Context, *FindSeriesRequest) (*SearchSeriesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSeries not implemented")
}
func (UnimplementedSeriesRemoteServiceServer) FilterSeries(context.Context, *FilterSeriesRequest) (*SearchSeriesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterSeries not implemented")
}
func (UnimplementedSeriesRemoteServiceServer) NextToPlaySeries(context.Context, *NextToPlaySeriesRequest) (*NextToPlaySeriesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextToPlaySeries not implemented")
}
func (UnimplementedSeriesRemoteServiceServer) UpdateSeries(context.Context, *UpdateSeriesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeries not implemented")
}
func (UnimplementedSeriesRemoteServiceServer) DeleteSeries(context.Context, *api.IdsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeries not implemented")
}
func (UnimplementedSeriesRemoteServiceServer) mustEmbedUnimplementedSeriesRemoteServiceServer() {}

// UnsafeSeriesRemoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeriesRemoteServiceServer will
// result in compilation errors.
type UnsafeSeriesRemoteServiceServer interface {
	mustEmbedUnimplementedSeriesRemoteServiceServer()
}

func RegisterSeriesRemoteServiceServer(s grpc.ServiceRegistrar, srv SeriesRemoteServiceServer) {
	s.RegisterService(&SeriesRemoteService_ServiceDesc, srv)
}

func _SeriesRemoteService_GetSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeriesRemoteServiceServer).GetSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeriesRemoteService_GetSeries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeriesRemoteServiceServer).GetSeries(ctx, req.(*GetSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeriesRemoteService_FindSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeriesRemoteServiceServer).FindSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeriesRemoteService_FindSeries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeriesRemoteServiceServer).FindSeries(ctx, req.(*FindSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeriesRemoteService_FilterSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeriesRemoteServiceServer).FilterSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeriesRemoteService_FilterSeries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeriesRemoteServiceServer).FilterSeries(ctx, req.(*FilterSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeriesRemoteService_NextToPlaySeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextToPlaySeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeriesRemoteServiceServer).NextToPlaySeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeriesRemoteService_NextToPlaySeries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeriesRemoteServiceServer).NextToPlaySeries(ctx, req.(*NextToPlaySeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeriesRemoteService_UpdateSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeriesRemoteServiceServer).UpdateSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeriesRemoteService_UpdateSeries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeriesRemoteServiceServer).UpdateSeries(ctx, req.(*UpdateSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeriesRemoteService_DeleteSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.IdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeriesRemoteServiceServer).DeleteSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeriesRemoteService_DeleteSeries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeriesRemoteServiceServer).DeleteSeries(ctx, req.(*api.IdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SeriesRemoteService_ServiceDesc is the grpc.ServiceDesc for SeriesRemoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeriesRemoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnboot.SeriesRemoteService",
	HandlerType: (*SeriesRemoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSeries",
			Handler:    _SeriesRemoteService_GetSeries_Handler,
		},
		{
			MethodName: "FindSeries",
			Handler:    _SeriesRemoteService_FindSeries_Handler,
		},
		{
			MethodName: "FilterSeries",
			Handler:    _SeriesRemoteService_FilterSeries_Handler,
		},
		{
			MethodName: "NextToPlaySeries",
			Handler:    _SeriesRemoteService_NextToPlaySeries_Handler,
		},
		{
			MethodName: "UpdateSeries",
			Handler:    _SeriesRemoteService_UpdateSeries_Handler,
		},
		{
			MethodName: "DeleteSeries",
			Handler:    _SeriesRemoteService_DeleteSeries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/series.proto",
}
