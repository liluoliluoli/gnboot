// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: gnboot-proto/gnboot.proto

package gnboot

import (
	context "context"
	params "github.com/go-cinch/common/proto/params"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gnboot_CreateGnboot_FullMethodName = "/gnboot.v1.Gnboot/CreateGnboot"
	Gnboot_GetGnboot_FullMethodName    = "/gnboot.v1.Gnboot/GetGnboot"
	Gnboot_FindGnboot_FullMethodName   = "/gnboot.v1.Gnboot/FindGnboot"
	Gnboot_UpdateGnboot_FullMethodName = "/gnboot.v1.Gnboot/UpdateGnboot"
	Gnboot_DeleteGnboot_FullMethodName = "/gnboot.v1.Gnboot/DeleteGnboot"
)

// GnbootClient is the client API for Gnboot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GnbootClient interface {
	// create one Gnboot record
	CreateGnboot(ctx context.Context, in *CreateGnbootRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// query one Gnboot record
	GetGnboot(ctx context.Context, in *GetGnbootRequest, opts ...grpc.CallOption) (*GetGnbootReply, error)
	// query Gnboot list by page
	FindGnboot(ctx context.Context, in *FindGnbootRequest, opts ...grpc.CallOption) (*FindGnbootReply, error)
	// update one Gnboot record by id
	UpdateGnboot(ctx context.Context, in *UpdateGnbootRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// delete one or more Gnboot record by id
	DeleteGnboot(ctx context.Context, in *params.IdsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type gnbootClient struct {
	cc grpc.ClientConnInterface
}

func NewGnbootClient(cc grpc.ClientConnInterface) GnbootClient {
	return &gnbootClient{cc}
}

func (c *gnbootClient) CreateGnboot(ctx context.Context, in *CreateGnbootRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Gnboot_CreateGnboot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gnbootClient) GetGnboot(ctx context.Context, in *GetGnbootRequest, opts ...grpc.CallOption) (*GetGnbootReply, error) {
	out := new(GetGnbootReply)
	err := c.cc.Invoke(ctx, Gnboot_GetGnboot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gnbootClient) FindGnboot(ctx context.Context, in *FindGnbootRequest, opts ...grpc.CallOption) (*FindGnbootReply, error) {
	out := new(FindGnbootReply)
	err := c.cc.Invoke(ctx, Gnboot_FindGnboot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gnbootClient) UpdateGnboot(ctx context.Context, in *UpdateGnbootRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Gnboot_UpdateGnboot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gnbootClient) DeleteGnboot(ctx context.Context, in *params.IdsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Gnboot_DeleteGnboot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GnbootServer is the server API for Gnboot service.
// All implementations must embed UnimplementedGnbootServer
// for forward compatibility
type GnbootServer interface {
	// create one Gnboot record
	CreateGnboot(context.Context, *CreateGnbootRequest) (*emptypb.Empty, error)
	// query one Gnboot record
	GetGnboot(context.Context, *GetGnbootRequest) (*GetGnbootReply, error)
	// query Gnboot list by page
	FindGnboot(context.Context, *FindGnbootRequest) (*FindGnbootReply, error)
	// update one Gnboot record by id
	UpdateGnboot(context.Context, *UpdateGnbootRequest) (*emptypb.Empty, error)
	// delete one or more Gnboot record by id
	DeleteGnboot(context.Context, *params.IdsRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedGnbootServer()
}

// UnimplementedGnbootServer must be embedded to have forward compatible implementations.
type UnimplementedGnbootServer struct {
}

func (UnimplementedGnbootServer) CreateGnboot(context.Context, *CreateGnbootRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGnboot not implemented")
}
func (UnimplementedGnbootServer) GetGnboot(context.Context, *GetGnbootRequest) (*GetGnbootReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGnboot not implemented")
}
func (UnimplementedGnbootServer) FindGnboot(context.Context, *FindGnbootRequest) (*FindGnbootReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindGnboot not implemented")
}
func (UnimplementedGnbootServer) UpdateGnboot(context.Context, *UpdateGnbootRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGnboot not implemented")
}
func (UnimplementedGnbootServer) DeleteGnboot(context.Context, *params.IdsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGnboot not implemented")
}
func (UnimplementedGnbootServer) mustEmbedUnimplementedGnbootServer() {}

// UnsafeGnbootServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GnbootServer will
// result in compilation errors.
type UnsafeGnbootServer interface {
	mustEmbedUnimplementedGnbootServer()
}

func RegisterGnbootServer(s grpc.ServiceRegistrar, srv GnbootServer) {
	s.RegisterService(&Gnboot_ServiceDesc, srv)
}

func _Gnboot_CreateGnboot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGnbootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GnbootServer).CreateGnboot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gnboot_CreateGnboot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GnbootServer).CreateGnboot(ctx, req.(*CreateGnbootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gnboot_GetGnboot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGnbootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GnbootServer).GetGnboot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gnboot_GetGnboot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GnbootServer).GetGnboot(ctx, req.(*GetGnbootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gnboot_FindGnboot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindGnbootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GnbootServer).FindGnboot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gnboot_FindGnboot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GnbootServer).FindGnboot(ctx, req.(*FindGnbootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gnboot_UpdateGnboot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGnbootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GnbootServer).UpdateGnboot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gnboot_UpdateGnboot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GnbootServer).UpdateGnboot(ctx, req.(*UpdateGnbootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gnboot_DeleteGnboot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(params.IdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GnbootServer).DeleteGnboot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gnboot_DeleteGnboot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GnbootServer).DeleteGnboot(ctx, req.(*params.IdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gnboot_ServiceDesc is the grpc.ServiceDesc for Gnboot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gnboot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnboot.v1.Gnboot",
	HandlerType: (*GnbootServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGnboot",
			Handler:    _Gnboot_CreateGnboot_Handler,
		},
		{
			MethodName: "GetGnboot",
			Handler:    _Gnboot_GetGnboot_Handler,
		},
		{
			MethodName: "FindGnboot",
			Handler:    _Gnboot_FindGnboot_Handler,
		},
		{
			MethodName: "UpdateGnboot",
			Handler:    _Gnboot_UpdateGnboot_Handler,
		},
		{
			MethodName: "DeleteGnboot",
			Handler:    _Gnboot_DeleteGnboot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gnboot-proto/gnboot.proto",
}
