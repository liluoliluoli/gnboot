// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	"gnboot/internal/repo/model"
)

func newMovie(db *gorm.DB, opts ...gen.DOOption) movie {
	_movie := movie{}

	_movie.movieDo.UseDB(db, opts...)
	_movie.movieDo.UseModel(&model.Movie{})

	tableName := _movie.movieDo.TableName()
	_movie.ALL = field.NewAsterisk(tableName)
	_movie.ID = field.NewUint64(tableName, "id")
	_movie.OriginalTitle = field.NewString(tableName, "original_title")
	_movie.Status = field.NewString(tableName, "status")
	_movie.VoteAverage = field.NewFloat32(tableName, "vote_average")
	_movie.VoteCount = field.NewInt64(tableName, "vote_count")
	_movie.Country = field.NewString(tableName, "country")
	_movie.Trailer = field.NewString(tableName, "trailer")
	_movie.URL = field.NewString(tableName, "url")
	_movie.Downloaded = field.NewBool(tableName, "downloaded")
	_movie.FileSize = field.NewInt64(tableName, "file_size")
	_movie.Filename = field.NewString(tableName, "filename")
	_movie.Ext = field.NewString(tableName, "ext")

	_movie.fillFieldMap()

	return _movie
}

// movie 电影
type movie struct {
	movieDo movieDo

	ALL           field.Asterisk
	ID            field.Uint64  // 主键
	OriginalTitle field.String  // 标题
	Status        field.String  // 状态，Returning Series, Ended, Released, Unknown
	VoteAverage   field.Float32 // 平均评分
	VoteCount     field.Int64   // 评分数
	Country       field.String  // 国家
	Trailer       field.String  // 预告片地址
	URL           field.String  // 影片地址
	Downloaded    field.Bool    // 是否可以下载
	FileSize      field.Int64   // 文件大小
	Filename      field.String  // 文件名
	Ext           field.String  // 扩展参数

	fieldMap map[string]field.Expr
}

func (m movie) Table(newTableName string) *movie {
	m.movieDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m movie) As(alias string) *movie {
	m.movieDo.DO = *(m.movieDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *movie) updateTableName(table string) *movie {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewUint64(table, "id")
	m.OriginalTitle = field.NewString(table, "original_title")
	m.Status = field.NewString(table, "status")
	m.VoteAverage = field.NewFloat32(table, "vote_average")
	m.VoteCount = field.NewInt64(table, "vote_count")
	m.Country = field.NewString(table, "country")
	m.Trailer = field.NewString(table, "trailer")
	m.URL = field.NewString(table, "url")
	m.Downloaded = field.NewBool(table, "downloaded")
	m.FileSize = field.NewInt64(table, "file_size")
	m.Filename = field.NewString(table, "filename")
	m.Ext = field.NewString(table, "ext")

	m.fillFieldMap()

	return m
}

func (m *movie) WithContext(ctx context.Context) *movieDo { return m.movieDo.WithContext(ctx) }

func (m movie) TableName() string { return m.movieDo.TableName() }

func (m movie) Alias() string { return m.movieDo.Alias() }

func (m movie) Columns(cols ...field.Expr) gen.Columns { return m.movieDo.Columns(cols...) }

func (m *movie) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *movie) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 12)
	m.fieldMap["id"] = m.ID
	m.fieldMap["original_title"] = m.OriginalTitle
	m.fieldMap["status"] = m.Status
	m.fieldMap["vote_average"] = m.VoteAverage
	m.fieldMap["vote_count"] = m.VoteCount
	m.fieldMap["country"] = m.Country
	m.fieldMap["trailer"] = m.Trailer
	m.fieldMap["url"] = m.URL
	m.fieldMap["downloaded"] = m.Downloaded
	m.fieldMap["file_size"] = m.FileSize
	m.fieldMap["filename"] = m.Filename
	m.fieldMap["ext"] = m.Ext
}

func (m movie) clone(db *gorm.DB) movie {
	m.movieDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m movie) replaceDB(db *gorm.DB) movie {
	m.movieDo.ReplaceDB(db)
	return m
}

type movieDo struct{ gen.DO }

// SELECT * FROM `@@table` WHERE `id` = @id LIMIT 1
func (m movieDo) GetByID(id uint64) (result model.Movie) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM `movie` WHERE `id` = ? LIMIT 1 ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	_ = executeSQL

	return
}

// SELECT * FROM `@@table`
// {{where}}
//
//	{{if val != ""}}
//	  {{if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%")}}
//	    @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val), '%')
//	  {{else if strings.HasPrefix(val, "%")}}
//	    @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val))
//	  {{else if strings.HasSuffix(val, "%")}}
//	    @@col LIKE CONCAT(TRIM(BOTH '%' FROM @val), '%')
//	  {{else}}
//	    @@col = @val
//	  {{end}}
//	{{end}}
//
// {{end}}
// LIMIT 1
func (m movieDo) GetByCol(col string, val string) (result model.Movie) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM `movie` ")
	var whereSQL0 strings.Builder
	if val != "" {
		if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(m.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?), '%') ")
		} else if strings.HasPrefix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(m.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?)) ")
		} else if strings.HasSuffix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(m.Quote(col) + " LIKE CONCAT(TRIM(BOTH '%' FROM ?), '%') ")
		} else {
			params = append(params, val)
			whereSQL0.WriteString(m.Quote(col) + " = ? ")
		}
	}
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString("LIMIT 1 ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	_ = executeSQL

	return
}

// SELECT * FROM `@@table`
// {{if len(cols) == len(vals)}}
// {{where}}
//
//	  {{for i, col := range cols}}
//	    {{for j, val := range vals}}
//	      {{if i == j}}
//	        {{if val != ""}}
//	          {{if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%")}}
//	            @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val), '%') AND
//	          {{else if strings.HasPrefix(val, "%")}}
//	            @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val)) AND
//	          {{else if strings.HasSuffix(val, "%")}}
//	            @@col LIKE CONCAT(TRIM(BOTH '%' FROM @val), '%') AND
//	          {{else}}
//	            @@col = @val AND
//	          {{end}}
//	        {{end}}
//	      {{end}}
//	    {{end}}
//	  {{end}}
//	{{end}}
//
// {{end}}
// LIMIT 1
func (m movieDo) GetByCols(cols []string, vals []string) (result model.Movie) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM `movie` ")
	if len(cols) == len(vals) {
		var whereSQL0 strings.Builder
		for i, col := range cols {
			for j, val := range vals {
				if i == j {
					if val != "" {
						if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(m.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?), '%') AND ")
						} else if strings.HasPrefix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(m.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?)) AND ")
						} else if strings.HasSuffix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(m.Quote(col) + " LIKE CONCAT(TRIM(BOTH '%' FROM ?), '%') AND ")
						} else {
							params = append(params, val)
							whereSQL0.WriteString(m.Quote(col) + " = ? AND ")
						}
					}
				}
			}
		}
		helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	}
	generateSQL.WriteString("LIMIT 1 ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	_ = executeSQL

	return
}

// SELECT * FROM `@@table`
// {{where}}
//
//	{{if val != ""}}
//	  {{if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%")}}
//	    @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val), '%')
//	  {{else if strings.HasPrefix(val, "%")}}
//	    @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val))
//	  {{else if strings.HasSuffix(val, "%")}}
//	    @@col LIKE CONCAT(TRIM(BOTH '%' FROM @val), '%')
//	  {{else}}
//	    @@col = @val
//	  {{end}}
//	{{end}}
//
// {{end}}
func (m movieDo) FindByCol(col string, val string) (result []model.Movie) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM `movie` ")
	var whereSQL0 strings.Builder
	if val != "" {
		if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(m.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?), '%') ")
		} else if strings.HasPrefix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(m.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?)) ")
		} else if strings.HasSuffix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(m.Quote(col) + " LIKE CONCAT(TRIM(BOTH '%' FROM ?), '%') ")
		} else {
			params = append(params, val)
			whereSQL0.WriteString(m.Quote(col) + " = ? ")
		}
	}
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	_ = executeSQL

	return
}

// SELECT * FROM `@@table`
// {{if len(cols) == len(vals)}}
// {{where}}
//
//	  {{for i, col := range cols}}
//	    {{for j, val := range vals}}
//	      {{if i == j}}
//	        {{if val != ""}}
//	          {{if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%")}}
//	            @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val), '%') AND
//	          {{else if strings.HasPrefix(val, "%")}}
//	            @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val)) AND
//	          {{else if strings.HasSuffix(val, "%")}}
//	            @@col LIKE CONCAT(TRIM(BOTH '%' FROM @val), '%') AND
//	          {{else}}
//	            @@col = @val AND
//	          {{end}}
//	        {{end}}
//	      {{end}}
//	    {{end}}
//	  {{end}}
//	{{end}}
//
// {{end}}
func (m movieDo) FindByCols(cols []string, vals []string) (result []model.Movie) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM `movie` ")
	if len(cols) == len(vals) {
		var whereSQL0 strings.Builder
		for i, col := range cols {
			for j, val := range vals {
				if i == j {
					if val != "" {
						if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(m.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?), '%') AND ")
						} else if strings.HasPrefix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(m.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?)) AND ")
						} else if strings.HasSuffix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(m.Quote(col) + " LIKE CONCAT(TRIM(BOTH '%' FROM ?), '%') AND ")
						} else {
							params = append(params, val)
							whereSQL0.WriteString(m.Quote(col) + " = ? AND ")
						}
					}
				}
			}
		}
		helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	}

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	_ = executeSQL

	return
}

func (m movieDo) Debug() *movieDo {
	return m.withDO(m.DO.Debug())
}

func (m movieDo) WithContext(ctx context.Context) *movieDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m movieDo) ReadDB() *movieDo {
	return m.Clauses(dbresolver.Read)
}

func (m movieDo) WriteDB() *movieDo {
	return m.Clauses(dbresolver.Write)
}

func (m movieDo) Session(config *gorm.Session) *movieDo {
	return m.withDO(m.DO.Session(config))
}

func (m movieDo) Clauses(conds ...clause.Expression) *movieDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m movieDo) Returning(value interface{}, columns ...string) *movieDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m movieDo) Not(conds ...gen.Condition) *movieDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m movieDo) Or(conds ...gen.Condition) *movieDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m movieDo) Select(conds ...field.Expr) *movieDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m movieDo) Where(conds ...gen.Condition) *movieDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m movieDo) Order(conds ...field.Expr) *movieDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m movieDo) Distinct(cols ...field.Expr) *movieDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m movieDo) Omit(cols ...field.Expr) *movieDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m movieDo) Join(table schema.Tabler, on ...field.Expr) *movieDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m movieDo) LeftJoin(table schema.Tabler, on ...field.Expr) *movieDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m movieDo) RightJoin(table schema.Tabler, on ...field.Expr) *movieDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m movieDo) Group(cols ...field.Expr) *movieDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m movieDo) Having(conds ...gen.Condition) *movieDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m movieDo) Limit(limit int) *movieDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m movieDo) Offset(offset int) *movieDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m movieDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *movieDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m movieDo) Unscoped() *movieDo {
	return m.withDO(m.DO.Unscoped())
}

func (m movieDo) Create(values ...*model.Movie) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m movieDo) CreateInBatches(values []*model.Movie, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m movieDo) Save(values ...*model.Movie) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m movieDo) First() (*model.Movie, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Movie), nil
	}
}

func (m movieDo) Take() (*model.Movie, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Movie), nil
	}
}

func (m movieDo) Last() (*model.Movie, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Movie), nil
	}
}

func (m movieDo) Find() ([]*model.Movie, error) {
	result, err := m.DO.Find()
	return result.([]*model.Movie), err
}

func (m movieDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Movie, err error) {
	buf := make([]*model.Movie, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m movieDo) FindInBatches(result *[]*model.Movie, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m movieDo) Attrs(attrs ...field.AssignExpr) *movieDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m movieDo) Assign(attrs ...field.AssignExpr) *movieDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m movieDo) Joins(fields ...field.RelationField) *movieDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m movieDo) Preload(fields ...field.RelationField) *movieDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m movieDo) FirstOrInit() (*model.Movie, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Movie), nil
	}
}

func (m movieDo) FirstOrCreate() (*model.Movie, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Movie), nil
	}
}

func (m movieDo) FindByPage(offset int, limit int) (result []*model.Movie, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m movieDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m movieDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m movieDo) Delete(models ...*model.Movie) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *movieDo) withDO(do gen.Dao) *movieDo {
	m.DO = *do.(*gen.DO)
	return m
}
