// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.1
// - protoc             v5.29.3
// source: proto/video.proto

package video

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	api "github.com/liluoliluoli/gnboot/api"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationVideoRemoteServiceCreateVideo = "/gnboot.VideoRemoteService/CreateVideo"
const OperationVideoRemoteServiceDeleteVideo = "/gnboot.VideoRemoteService/DeleteVideo"
const OperationVideoRemoteServiceGetVideo = "/gnboot.VideoRemoteService/GetVideo"
const OperationVideoRemoteServicePageFavorites = "/gnboot.VideoRemoteService/PageFavorites"
const OperationVideoRemoteServiceSearchVideo = "/gnboot.VideoRemoteService/SearchVideo"
const OperationVideoRemoteServiceUpdateVideo = "/gnboot.VideoRemoteService/UpdateVideo"

type VideoRemoteServiceHTTPServer interface {
	// CreateVideo create one Movie record
	CreateVideo(context.Context, *CreateVideoRequest) (*emptypb.Empty, error)
	DeleteVideo(context.Context, *api.IdsRequest) (*emptypb.Empty, error)
	GetVideo(context.Context, *GetVideoRequest) (*Video, error)
	PageFavorites(context.Context, *PageFavoritesRequest) (*SearchVideoResp, error)
	SearchVideo(context.Context, *SearchVideoRequest) (*SearchVideoResp, error)
	UpdateVideo(context.Context, *UpdateVideoRequest) (*emptypb.Empty, error)
}

func RegisterVideoRemoteServiceHTTPServer(s *http.Server, srv VideoRemoteServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/video/create", _VideoRemoteService_CreateVideo0_HTTP_Handler(srv))
	r.GET("/video/queryById", _VideoRemoteService_GetVideo0_HTTP_Handler(srv))
	r.POST("/video/search", _VideoRemoteService_SearchVideo0_HTTP_Handler(srv))
	r.PATCH("/video/update", _VideoRemoteService_UpdateVideo0_HTTP_Handler(srv))
	r.PUT("/video/update", _VideoRemoteService_UpdateVideo1_HTTP_Handler(srv))
	r.DELETE("/video/delete", _VideoRemoteService_DeleteVideo0_HTTP_Handler(srv))
	r.POST("/user/queryFavorites", _VideoRemoteService_PageFavorites0_HTTP_Handler(srv))
}

func _VideoRemoteService_CreateVideo0_HTTP_Handler(srv VideoRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateVideoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoRemoteServiceCreateVideo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateVideo(ctx, req.(*CreateVideoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _VideoRemoteService_GetVideo0_HTTP_Handler(srv VideoRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetVideoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoRemoteServiceGetVideo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetVideo(ctx, req.(*GetVideoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Video)
		return ctx.Result(200, reply)
	}
}

func _VideoRemoteService_SearchVideo0_HTTP_Handler(srv VideoRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchVideoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoRemoteServiceSearchVideo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchVideo(ctx, req.(*SearchVideoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchVideoResp)
		return ctx.Result(200, reply)
	}
}

func _VideoRemoteService_UpdateVideo0_HTTP_Handler(srv VideoRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateVideoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoRemoteServiceUpdateVideo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateVideo(ctx, req.(*UpdateVideoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _VideoRemoteService_UpdateVideo1_HTTP_Handler(srv VideoRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateVideoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoRemoteServiceUpdateVideo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateVideo(ctx, req.(*UpdateVideoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _VideoRemoteService_DeleteVideo0_HTTP_Handler(srv VideoRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in api.IdsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoRemoteServiceDeleteVideo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteVideo(ctx, req.(*api.IdsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _VideoRemoteService_PageFavorites0_HTTP_Handler(srv VideoRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageFavoritesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoRemoteServicePageFavorites)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PageFavorites(ctx, req.(*PageFavoritesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchVideoResp)
		return ctx.Result(200, reply)
	}
}

type VideoRemoteServiceHTTPClient interface {
	CreateVideo(ctx context.Context, req *CreateVideoRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteVideo(ctx context.Context, req *api.IdsRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetVideo(ctx context.Context, req *GetVideoRequest, opts ...http.CallOption) (rsp *Video, err error)
	PageFavorites(ctx context.Context, req *PageFavoritesRequest, opts ...http.CallOption) (rsp *SearchVideoResp, err error)
	SearchVideo(ctx context.Context, req *SearchVideoRequest, opts ...http.CallOption) (rsp *SearchVideoResp, err error)
	UpdateVideo(ctx context.Context, req *UpdateVideoRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type VideoRemoteServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewVideoRemoteServiceHTTPClient(client *http.Client) VideoRemoteServiceHTTPClient {
	return &VideoRemoteServiceHTTPClientImpl{client}
}

func (c *VideoRemoteServiceHTTPClientImpl) CreateVideo(ctx context.Context, in *CreateVideoRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/video/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoRemoteServiceCreateVideo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoRemoteServiceHTTPClientImpl) DeleteVideo(ctx context.Context, in *api.IdsRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/video/delete"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationVideoRemoteServiceDeleteVideo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoRemoteServiceHTTPClientImpl) GetVideo(ctx context.Context, in *GetVideoRequest, opts ...http.CallOption) (*Video, error) {
	var out Video
	pattern := "/video/queryById"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationVideoRemoteServiceGetVideo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoRemoteServiceHTTPClientImpl) PageFavorites(ctx context.Context, in *PageFavoritesRequest, opts ...http.CallOption) (*SearchVideoResp, error) {
	var out SearchVideoResp
	pattern := "/user/queryFavorites"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoRemoteServicePageFavorites))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoRemoteServiceHTTPClientImpl) SearchVideo(ctx context.Context, in *SearchVideoRequest, opts ...http.CallOption) (*SearchVideoResp, error) {
	var out SearchVideoResp
	pattern := "/video/search"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoRemoteServiceSearchVideo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoRemoteServiceHTTPClientImpl) UpdateVideo(ctx context.Context, in *UpdateVideoRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/video/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoRemoteServiceUpdateVideo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
