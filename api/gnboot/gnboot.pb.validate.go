// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gnboot-proto/gnboot.proto

package gnboot

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GnbootReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GnbootReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GnbootReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GnbootReplyMultiError, or nil
// if none found.
func (m *GnbootReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GnbootReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return GnbootReplyMultiError(errors)
	}

	return nil
}

// GnbootReplyMultiError is an error wrapping multiple validation errors returned
// by GnbootReply.ValidateAll() if the designated constraints aren't met.
type GnbootReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GnbootReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GnbootReplyMultiError) AllErrors() []error { return m }

// GnbootReplyValidationError is the validation error returned by
// GnbootReply.Validate if the designated constraints aren't met.
type GnbootReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GnbootReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GnbootReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GnbootReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GnbootReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GnbootReplyValidationError) ErrorName() string { return "GnbootReplyValidationError" }

// Error satisfies the builtin error interface
func (e GnbootReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGnbootReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GnbootReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GnbootReplyValidationError{}

// Validate checks the field values on CreateGnbootRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateGnbootRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGnbootRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGnbootRequestMultiError, or nil if none found.
func (m *CreateGnbootRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGnbootRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return CreateGnbootRequestMultiError(errors)
	}

	return nil
}

// CreateGnbootRequestMultiError is an error wrapping multiple validation errors
// returned by CreateGnbootRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateGnbootRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGnbootRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGnbootRequestMultiError) AllErrors() []error { return m }

// CreateGnbootRequestValidationError is the validation error returned by
// CreateGnbootRequest.Validate if the designated constraints aren't met.
type CreateGnbootRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGnbootRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGnbootRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGnbootRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGnbootRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGnbootRequestValidationError) ErrorName() string {
	return "CreateGnbootRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGnbootRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGnbootRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGnbootRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGnbootRequestValidationError{}

// Validate checks the field values on GetGnbootRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetGnbootRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGnbootRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetGnbootRequestMultiError,
// or nil if none found.
func (m *GetGnbootRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGnbootRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetGnbootRequestMultiError(errors)
	}

	return nil
}

// GetGnbootRequestMultiError is an error wrapping multiple validation errors
// returned by GetGnbootRequest.ValidateAll() if the designated constraints
// aren't met.
type GetGnbootRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGnbootRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGnbootRequestMultiError) AllErrors() []error { return m }

// GetGnbootRequestValidationError is the validation error returned by
// GetGnbootRequest.Validate if the designated constraints aren't met.
type GetGnbootRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGnbootRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGnbootRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGnbootRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGnbootRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGnbootRequestValidationError) ErrorName() string { return "GetGnbootRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetGnbootRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGnbootRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGnbootRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGnbootRequestValidationError{}

// Validate checks the field values on GetGnbootReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetGnbootReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGnbootReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetGnbootReplyMultiError, or
// nil if none found.
func (m *GetGnbootReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGnbootReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return GetGnbootReplyMultiError(errors)
	}

	return nil
}

// GetGnbootReplyMultiError is an error wrapping multiple validation errors
// returned by GetGnbootReply.ValidateAll() if the designated constraints aren't met.
type GetGnbootReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGnbootReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGnbootReplyMultiError) AllErrors() []error { return m }

// GetGnbootReplyValidationError is the validation error returned by
// GetGnbootReply.Validate if the designated constraints aren't met.
type GetGnbootReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGnbootReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGnbootReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGnbootReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGnbootReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGnbootReplyValidationError) ErrorName() string { return "GetGnbootReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetGnbootReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGnbootReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGnbootReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGnbootReplyValidationError{}

// Validate checks the field values on FindGnbootRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FindGnbootRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindGnbootRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindGnbootRequestMultiError, or nil if none found.
func (m *FindGnbootRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindGnbootRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindGnbootRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindGnbootRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindGnbootRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return FindGnbootRequestMultiError(errors)
	}

	return nil
}

// FindGnbootRequestMultiError is an error wrapping multiple validation errors
// returned by FindGnbootRequest.ValidateAll() if the designated constraints
// aren't met.
type FindGnbootRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindGnbootRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindGnbootRequestMultiError) AllErrors() []error { return m }

// FindGnbootRequestValidationError is the validation error returned by
// FindGnbootRequest.Validate if the designated constraints aren't met.
type FindGnbootRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindGnbootRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindGnbootRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindGnbootRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindGnbootRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindGnbootRequestValidationError) ErrorName() string {
	return "FindGnbootRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindGnbootRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindGnbootRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindGnbootRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindGnbootRequestValidationError{}

// Validate checks the field values on FindGnbootReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FindGnbootReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindGnbootReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FindGnbootReplyMultiError, or
// nil if none found.
func (m *FindGnbootReply) ValidateAll() error {
	return m.validate(true)
}

func (m *FindGnbootReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindGnbootReplyValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindGnbootReplyValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindGnbootReplyValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindGnbootReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindGnbootReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindGnbootReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FindGnbootReplyMultiError(errors)
	}

	return nil
}

// FindGnbootReplyMultiError is an error wrapping multiple validation errors
// returned by FindGnbootReply.ValidateAll() if the designated constraints
// aren't met.
type FindGnbootReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindGnbootReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindGnbootReplyMultiError) AllErrors() []error { return m }

// FindGnbootReplyValidationError is the validation error returned by
// FindGnbootReply.Validate if the designated constraints aren't met.
type FindGnbootReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindGnbootReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindGnbootReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindGnbootReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindGnbootReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindGnbootReplyValidationError) ErrorName() string { return "FindGnbootReplyValidationError" }

// Error satisfies the builtin error interface
func (e FindGnbootReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindGnbootReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindGnbootReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindGnbootReplyValidationError{}

// Validate checks the field values on UpdateGnbootRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateGnbootRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGnbootRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGnbootRequestMultiError, or nil if none found.
func (m *UpdateGnbootRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGnbootRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return UpdateGnbootRequestMultiError(errors)
	}

	return nil
}

// UpdateGnbootRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateGnbootRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateGnbootRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGnbootRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGnbootRequestMultiError) AllErrors() []error { return m }

// UpdateGnbootRequestValidationError is the validation error returned by
// UpdateGnbootRequest.Validate if the designated constraints aren't met.
type UpdateGnbootRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGnbootRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGnbootRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGnbootRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGnbootRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGnbootRequestValidationError) ErrorName() string {
	return "UpdateGnbootRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGnbootRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGnbootRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGnbootRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGnbootRequestValidationError{}
