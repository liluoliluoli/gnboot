// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liluoliluoli/gnboot/internal/repo/model"
)

func newEpisodeSubtitleMapping(db *gorm.DB, opts ...gen.DOOption) episodeSubtitleMapping {
	_episodeSubtitleMapping := episodeSubtitleMapping{}

	_episodeSubtitleMapping.episodeSubtitleMappingDo.UseDB(db, opts...)
	_episodeSubtitleMapping.episodeSubtitleMappingDo.UseModel(&model.EpisodeSubtitleMapping{})

	tableName := _episodeSubtitleMapping.episodeSubtitleMappingDo.TableName()
	_episodeSubtitleMapping.ALL = field.NewAsterisk(tableName)
	_episodeSubtitleMapping.ID = field.NewInt64(tableName, "id")
	_episodeSubtitleMapping.EpisodeID = field.NewInt64(tableName, "episode_id")
	_episodeSubtitleMapping.URL = field.NewString(tableName, "url")
	_episodeSubtitleMapping.Title = field.NewString(tableName, "title")
	_episodeSubtitleMapping.Language = field.NewString(tableName, "language")
	_episodeSubtitleMapping.MimeType = field.NewString(tableName, "mime_type")

	_episodeSubtitleMapping.fillFieldMap()

	return _episodeSubtitleMapping
}

type episodeSubtitleMapping struct {
	episodeSubtitleMappingDo episodeSubtitleMappingDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键
	EpisodeID field.Int64  // 集id
	URL       field.String // 字幕地址
	Title     field.String // 字幕标题
	Language  field.String // 字幕语言
	MimeType  field.String // 字幕格式

	fieldMap map[string]field.Expr
}

func (e episodeSubtitleMapping) Table(newTableName string) *episodeSubtitleMapping {
	e.episodeSubtitleMappingDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e episodeSubtitleMapping) As(alias string) *episodeSubtitleMapping {
	e.episodeSubtitleMappingDo.DO = *(e.episodeSubtitleMappingDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *episodeSubtitleMapping) updateTableName(table string) *episodeSubtitleMapping {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.EpisodeID = field.NewInt64(table, "episode_id")
	e.URL = field.NewString(table, "url")
	e.Title = field.NewString(table, "title")
	e.Language = field.NewString(table, "language")
	e.MimeType = field.NewString(table, "mime_type")

	e.fillFieldMap()

	return e
}

func (e *episodeSubtitleMapping) WithContext(ctx context.Context) IEpisodeSubtitleMappingDo {
	return e.episodeSubtitleMappingDo.WithContext(ctx)
}

func (e episodeSubtitleMapping) TableName() string { return e.episodeSubtitleMappingDo.TableName() }

func (e episodeSubtitleMapping) Alias() string { return e.episodeSubtitleMappingDo.Alias() }

func (e *episodeSubtitleMapping) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *episodeSubtitleMapping) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 6)
	e.fieldMap["id"] = e.ID
	e.fieldMap["episode_id"] = e.EpisodeID
	e.fieldMap["url"] = e.URL
	e.fieldMap["title"] = e.Title
	e.fieldMap["language"] = e.Language
	e.fieldMap["mime_type"] = e.MimeType
}

func (e episodeSubtitleMapping) clone(db *gorm.DB) episodeSubtitleMapping {
	e.episodeSubtitleMappingDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e episodeSubtitleMapping) replaceDB(db *gorm.DB) episodeSubtitleMapping {
	e.episodeSubtitleMappingDo.ReplaceDB(db)
	return e
}

type episodeSubtitleMappingDo struct{ gen.DO }

type IEpisodeSubtitleMappingDo interface {
	gen.SubQuery
	Debug() IEpisodeSubtitleMappingDo
	WithContext(ctx context.Context) IEpisodeSubtitleMappingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEpisodeSubtitleMappingDo
	WriteDB() IEpisodeSubtitleMappingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEpisodeSubtitleMappingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEpisodeSubtitleMappingDo
	Not(conds ...gen.Condition) IEpisodeSubtitleMappingDo
	Or(conds ...gen.Condition) IEpisodeSubtitleMappingDo
	Select(conds ...field.Expr) IEpisodeSubtitleMappingDo
	Where(conds ...gen.Condition) IEpisodeSubtitleMappingDo
	Order(conds ...field.Expr) IEpisodeSubtitleMappingDo
	Distinct(cols ...field.Expr) IEpisodeSubtitleMappingDo
	Omit(cols ...field.Expr) IEpisodeSubtitleMappingDo
	Join(table schema.Tabler, on ...field.Expr) IEpisodeSubtitleMappingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEpisodeSubtitleMappingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEpisodeSubtitleMappingDo
	Group(cols ...field.Expr) IEpisodeSubtitleMappingDo
	Having(conds ...gen.Condition) IEpisodeSubtitleMappingDo
	Limit(limit int) IEpisodeSubtitleMappingDo
	Offset(offset int) IEpisodeSubtitleMappingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEpisodeSubtitleMappingDo
	Unscoped() IEpisodeSubtitleMappingDo
	Create(values ...*model.EpisodeSubtitleMapping) error
	CreateInBatches(values []*model.EpisodeSubtitleMapping, batchSize int) error
	Save(values ...*model.EpisodeSubtitleMapping) error
	First() (*model.EpisodeSubtitleMapping, error)
	Take() (*model.EpisodeSubtitleMapping, error)
	Last() (*model.EpisodeSubtitleMapping, error)
	Find() ([]*model.EpisodeSubtitleMapping, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EpisodeSubtitleMapping, err error)
	FindInBatches(result *[]*model.EpisodeSubtitleMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EpisodeSubtitleMapping) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEpisodeSubtitleMappingDo
	Assign(attrs ...field.AssignExpr) IEpisodeSubtitleMappingDo
	Joins(fields ...field.RelationField) IEpisodeSubtitleMappingDo
	Preload(fields ...field.RelationField) IEpisodeSubtitleMappingDo
	FirstOrInit() (*model.EpisodeSubtitleMapping, error)
	FirstOrCreate() (*model.EpisodeSubtitleMapping, error)
	FindByPage(offset int, limit int) (result []*model.EpisodeSubtitleMapping, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEpisodeSubtitleMappingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	SelectByID(id int64) (result *model.EpisodeSubtitleMapping, err error)
}

// SELECT * FROM @@table WHERE id=@id
func (e episodeSubtitleMappingDo) SelectByID(id int64) (result *model.EpisodeSubtitleMapping, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM episode_subtitle_mapping WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (e episodeSubtitleMappingDo) Debug() IEpisodeSubtitleMappingDo {
	return e.withDO(e.DO.Debug())
}

func (e episodeSubtitleMappingDo) WithContext(ctx context.Context) IEpisodeSubtitleMappingDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e episodeSubtitleMappingDo) ReadDB() IEpisodeSubtitleMappingDo {
	return e.Clauses(dbresolver.Read)
}

func (e episodeSubtitleMappingDo) WriteDB() IEpisodeSubtitleMappingDo {
	return e.Clauses(dbresolver.Write)
}

func (e episodeSubtitleMappingDo) Session(config *gorm.Session) IEpisodeSubtitleMappingDo {
	return e.withDO(e.DO.Session(config))
}

func (e episodeSubtitleMappingDo) Clauses(conds ...clause.Expression) IEpisodeSubtitleMappingDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e episodeSubtitleMappingDo) Returning(value interface{}, columns ...string) IEpisodeSubtitleMappingDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e episodeSubtitleMappingDo) Not(conds ...gen.Condition) IEpisodeSubtitleMappingDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e episodeSubtitleMappingDo) Or(conds ...gen.Condition) IEpisodeSubtitleMappingDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e episodeSubtitleMappingDo) Select(conds ...field.Expr) IEpisodeSubtitleMappingDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e episodeSubtitleMappingDo) Where(conds ...gen.Condition) IEpisodeSubtitleMappingDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e episodeSubtitleMappingDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IEpisodeSubtitleMappingDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e episodeSubtitleMappingDo) Order(conds ...field.Expr) IEpisodeSubtitleMappingDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e episodeSubtitleMappingDo) Distinct(cols ...field.Expr) IEpisodeSubtitleMappingDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e episodeSubtitleMappingDo) Omit(cols ...field.Expr) IEpisodeSubtitleMappingDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e episodeSubtitleMappingDo) Join(table schema.Tabler, on ...field.Expr) IEpisodeSubtitleMappingDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e episodeSubtitleMappingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEpisodeSubtitleMappingDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e episodeSubtitleMappingDo) RightJoin(table schema.Tabler, on ...field.Expr) IEpisodeSubtitleMappingDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e episodeSubtitleMappingDo) Group(cols ...field.Expr) IEpisodeSubtitleMappingDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e episodeSubtitleMappingDo) Having(conds ...gen.Condition) IEpisodeSubtitleMappingDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e episodeSubtitleMappingDo) Limit(limit int) IEpisodeSubtitleMappingDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e episodeSubtitleMappingDo) Offset(offset int) IEpisodeSubtitleMappingDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e episodeSubtitleMappingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEpisodeSubtitleMappingDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e episodeSubtitleMappingDo) Unscoped() IEpisodeSubtitleMappingDo {
	return e.withDO(e.DO.Unscoped())
}

func (e episodeSubtitleMappingDo) Create(values ...*model.EpisodeSubtitleMapping) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e episodeSubtitleMappingDo) CreateInBatches(values []*model.EpisodeSubtitleMapping, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e episodeSubtitleMappingDo) Save(values ...*model.EpisodeSubtitleMapping) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e episodeSubtitleMappingDo) First() (*model.EpisodeSubtitleMapping, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EpisodeSubtitleMapping), nil
	}
}

func (e episodeSubtitleMappingDo) Take() (*model.EpisodeSubtitleMapping, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EpisodeSubtitleMapping), nil
	}
}

func (e episodeSubtitleMappingDo) Last() (*model.EpisodeSubtitleMapping, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EpisodeSubtitleMapping), nil
	}
}

func (e episodeSubtitleMappingDo) Find() ([]*model.EpisodeSubtitleMapping, error) {
	result, err := e.DO.Find()
	return result.([]*model.EpisodeSubtitleMapping), err
}

func (e episodeSubtitleMappingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EpisodeSubtitleMapping, err error) {
	buf := make([]*model.EpisodeSubtitleMapping, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e episodeSubtitleMappingDo) FindInBatches(result *[]*model.EpisodeSubtitleMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e episodeSubtitleMappingDo) Attrs(attrs ...field.AssignExpr) IEpisodeSubtitleMappingDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e episodeSubtitleMappingDo) Assign(attrs ...field.AssignExpr) IEpisodeSubtitleMappingDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e episodeSubtitleMappingDo) Joins(fields ...field.RelationField) IEpisodeSubtitleMappingDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e episodeSubtitleMappingDo) Preload(fields ...field.RelationField) IEpisodeSubtitleMappingDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e episodeSubtitleMappingDo) FirstOrInit() (*model.EpisodeSubtitleMapping, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EpisodeSubtitleMapping), nil
	}
}

func (e episodeSubtitleMappingDo) FirstOrCreate() (*model.EpisodeSubtitleMapping, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EpisodeSubtitleMapping), nil
	}
}

func (e episodeSubtitleMappingDo) FindByPage(offset int, limit int) (result []*model.EpisodeSubtitleMapping, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e episodeSubtitleMappingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e episodeSubtitleMappingDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e episodeSubtitleMappingDo) Delete(models ...*model.EpisodeSubtitleMapping) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *episodeSubtitleMappingDo) withDO(do gen.Dao) *episodeSubtitleMappingDo {
	e.DO = *do.(*gen.DO)
	return e
}
