// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/video.proto

package video

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Video with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Video) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Video with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VideoMultiError, or nil if none found.
func (m *Video) ValidateAll() error {
	return m.validate(true)
}

func (m *Video) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for VideoType

	// no validation rules for VoteRate

	// no validation rules for VoteCount

	// no validation rules for Region

	// no validation rules for TotalEpisode

	// no validation rules for Description

	// no validation rules for Ext

	// no validation rules for PublishDay

	// no validation rules for Thumbnail

	for idx, item := range m.GetActors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, VideoValidationError{
						field:  fmt.Sprintf("Actors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, VideoValidationError{
						field:  fmt.Sprintf("Actors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VideoValidationError{
					field:  fmt.Sprintf("Actors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDirectors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, VideoValidationError{
						field:  fmt.Sprintf("Directors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, VideoValidationError{
						field:  fmt.Sprintf("Directors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VideoValidationError{
					field:  fmt.Sprintf("Directors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetEpisodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, VideoValidationError{
						field:  fmt.Sprintf("Episodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, VideoValidationError{
						field:  fmt.Sprintf("Episodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VideoValidationError{
					field:  fmt.Sprintf("Episodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Ratio

	// no validation rules for IsFavorite

	if m.LastPlayedTime != nil {
		// no validation rules for LastPlayedTime
	}

	if m.LastPlayedEpisodeId != nil {
		// no validation rules for LastPlayedEpisodeId
	}

	if m.LastPlayedPosition != nil {
		// no validation rules for LastPlayedPosition
	}

	if len(errors) > 0 {
		return VideoMultiError(errors)
	}

	return nil
}

// VideoMultiError is an error wrapping multiple validation errors returned by
// Video.ValidateAll() if the designated constraints aren't met.
type VideoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoMultiError) AllErrors() []error { return m }

// VideoValidationError is the validation error returned by Video.Validate if
// the designated constraints aren't met.
type VideoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoValidationError) ErrorName() string { return "VideoValidationError" }

// Error satisfies the builtin error interface
func (e VideoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoValidationError{}

// Validate checks the field values on CreateVideoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateVideoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateVideoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateVideoRequestMultiError, or nil if none found.
func (m *CreateVideoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateVideoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return CreateVideoRequestMultiError(errors)
	}

	return nil
}

// CreateVideoRequestMultiError is an error wrapping multiple validation errors
// returned by CreateVideoRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateVideoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateVideoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateVideoRequestMultiError) AllErrors() []error { return m }

// CreateVideoRequestValidationError is the validation error returned by
// CreateVideoRequest.Validate if the designated constraints aren't met.
type CreateVideoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVideoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVideoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVideoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVideoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVideoRequestValidationError) ErrorName() string {
	return "CreateVideoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVideoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVideoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVideoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVideoRequestValidationError{}

// Validate checks the field values on SearchVideoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchVideoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchVideoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchVideoRequestMultiError, or nil if none found.
func (m *SearchVideoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchVideoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchVideoRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchVideoRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchVideoRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsHistory

	if m.Search != nil {
		// no validation rules for Search
	}

	if m.Sort != nil {
		// no validation rules for Sort
	}

	if m.Genre != nil {
		// no validation rules for Genre
	}

	if m.Region != nil {
		// no validation rules for Region
	}

	if m.Year != nil {
		// no validation rules for Year
	}

	if m.VideoType != nil {
		// no validation rules for VideoType
	}

	if len(errors) > 0 {
		return SearchVideoRequestMultiError(errors)
	}

	return nil
}

// SearchVideoRequestMultiError is an error wrapping multiple validation errors
// returned by SearchVideoRequest.ValidateAll() if the designated constraints
// aren't met.
type SearchVideoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchVideoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchVideoRequestMultiError) AllErrors() []error { return m }

// SearchVideoRequestValidationError is the validation error returned by
// SearchVideoRequest.Validate if the designated constraints aren't met.
type SearchVideoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchVideoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchVideoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchVideoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchVideoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchVideoRequestValidationError) ErrorName() string {
	return "SearchVideoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchVideoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchVideoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchVideoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchVideoRequestValidationError{}

// Validate checks the field values on SearchVideoResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SearchVideoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchVideoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchVideoRespMultiError, or nil if none found.
func (m *SearchVideoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchVideoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchVideoRespValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchVideoRespValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchVideoRespValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchVideoRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchVideoRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchVideoRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchVideoRespMultiError(errors)
	}

	return nil
}

// SearchVideoRespMultiError is an error wrapping multiple validation errors
// returned by SearchVideoResp.ValidateAll() if the designated constraints
// aren't met.
type SearchVideoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchVideoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchVideoRespMultiError) AllErrors() []error { return m }

// SearchVideoRespValidationError is the validation error returned by
// SearchVideoResp.Validate if the designated constraints aren't met.
type SearchVideoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchVideoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchVideoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchVideoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchVideoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchVideoRespValidationError) ErrorName() string { return "SearchVideoRespValidationError" }

// Error satisfies the builtin error interface
func (e SearchVideoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchVideoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchVideoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchVideoRespValidationError{}

// Validate checks the field values on GetVideoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetVideoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVideoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVideoRequestMultiError, or nil if none found.
func (m *GetVideoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVideoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetVideoRequestMultiError(errors)
	}

	return nil
}

// GetVideoRequestMultiError is an error wrapping multiple validation errors
// returned by GetVideoRequest.ValidateAll() if the designated constraints
// aren't met.
type GetVideoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVideoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVideoRequestMultiError) AllErrors() []error { return m }

// GetVideoRequestValidationError is the validation error returned by
// GetVideoRequest.Validate if the designated constraints aren't met.
type GetVideoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVideoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVideoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVideoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVideoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVideoRequestValidationError) ErrorName() string { return "GetVideoRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetVideoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVideoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVideoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVideoRequestValidationError{}

// Validate checks the field values on UpdateVideoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateVideoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVideoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateVideoRequestMultiError, or nil if none found.
func (m *UpdateVideoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVideoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return UpdateVideoRequestMultiError(errors)
	}

	return nil
}

// UpdateVideoRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateVideoRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateVideoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVideoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVideoRequestMultiError) AllErrors() []error { return m }

// UpdateVideoRequestValidationError is the validation error returned by
// UpdateVideoRequest.Validate if the designated constraints aren't met.
type UpdateVideoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVideoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVideoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVideoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVideoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVideoRequestValidationError) ErrorName() string {
	return "UpdateVideoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVideoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVideoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVideoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVideoRequestValidationError{}

// Validate checks the field values on PageFavoritesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PageFavoritesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageFavoritesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageFavoritesRequestMultiError, or nil if none found.
func (m *PageFavoritesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PageFavoritesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PageFavoritesRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PageFavoritesRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PageFavoritesRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PageFavoritesRequestMultiError(errors)
	}

	return nil
}

// PageFavoritesRequestMultiError is an error wrapping multiple validation
// errors returned by PageFavoritesRequest.ValidateAll() if the designated
// constraints aren't met.
type PageFavoritesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageFavoritesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageFavoritesRequestMultiError) AllErrors() []error { return m }

// PageFavoritesRequestValidationError is the validation error returned by
// PageFavoritesRequest.Validate if the designated constraints aren't met.
type PageFavoritesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageFavoritesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageFavoritesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageFavoritesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageFavoritesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageFavoritesRequestValidationError) ErrorName() string {
	return "PageFavoritesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PageFavoritesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageFavoritesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageFavoritesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageFavoritesRequestValidationError{}
