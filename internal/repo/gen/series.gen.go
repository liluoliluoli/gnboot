// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liluoliluoli/gnboot/internal/repo/model"
)

func newSeries(db *gorm.DB, opts ...gen.DOOption) series {
	_series := series{}

	_series.seriesDo.UseDB(db, opts...)
	_series.seriesDo.UseModel(&model.Series{})

	tableName := _series.seriesDo.TableName()
	_series.ALL = field.NewAsterisk(tableName)
	_series.ID = field.NewInt64(tableName, "id")
	_series.OriginalTitle = field.NewString(tableName, "original_title")
	_series.Status = field.NewString(tableName, "status")
	_series.VoteAverage = field.NewFloat32(tableName, "vote_average")
	_series.VoteCount = field.NewInt64(tableName, "vote_count")
	_series.Country = field.NewString(tableName, "country")
	_series.Trailer = field.NewString(tableName, "trailer")
	_series.SkipIntro = field.NewInt64(tableName, "skip_intro")
	_series.SkipEnding = field.NewInt64(tableName, "skip_ending")
	_series.FileSize = field.NewInt64(tableName, "file_size")
	_series.Filename = field.NewString(tableName, "filename")
	_series.CreateTime = field.NewString(tableName, "create_time")
	_series.UpdateTime = field.NewString(tableName, "update_time")

	_series.fillFieldMap()

	return _series
}

type series struct {
	seriesDo seriesDo

	ALL           field.Asterisk
	ID            field.Int64   // 主键
	OriginalTitle field.String  // 标题
	Status        field.String  // 状态，Returning Series, Ended, Released, Unknown
	VoteAverage   field.Float32 // 平均评分
	VoteCount     field.Int64   // 评分数
	Country       field.String  // 国家
	Trailer       field.String  // 预告片地址
	SkipIntro     field.Int64   // 片头跳过秒数
	SkipEnding    field.Int64   // 片尾跳过秒数
	FileSize      field.Int64   // 文件大小
	Filename      field.String  // 文件名
	CreateTime    field.String  // 创建时间
	UpdateTime    field.String  // 更新时间

	fieldMap map[string]field.Expr
}

func (s series) Table(newTableName string) *series {
	s.seriesDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s series) As(alias string) *series {
	s.seriesDo.DO = *(s.seriesDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *series) updateTableName(table string) *series {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.OriginalTitle = field.NewString(table, "original_title")
	s.Status = field.NewString(table, "status")
	s.VoteAverage = field.NewFloat32(table, "vote_average")
	s.VoteCount = field.NewInt64(table, "vote_count")
	s.Country = field.NewString(table, "country")
	s.Trailer = field.NewString(table, "trailer")
	s.SkipIntro = field.NewInt64(table, "skip_intro")
	s.SkipEnding = field.NewInt64(table, "skip_ending")
	s.FileSize = field.NewInt64(table, "file_size")
	s.Filename = field.NewString(table, "filename")
	s.CreateTime = field.NewString(table, "create_time")
	s.UpdateTime = field.NewString(table, "update_time")

	s.fillFieldMap()

	return s
}

func (s *series) WithContext(ctx context.Context) ISeriesDo { return s.seriesDo.WithContext(ctx) }

func (s series) TableName() string { return s.seriesDo.TableName() }

func (s series) Alias() string { return s.seriesDo.Alias() }

func (s *series) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *series) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 13)
	s.fieldMap["id"] = s.ID
	s.fieldMap["original_title"] = s.OriginalTitle
	s.fieldMap["status"] = s.Status
	s.fieldMap["vote_average"] = s.VoteAverage
	s.fieldMap["vote_count"] = s.VoteCount
	s.fieldMap["country"] = s.Country
	s.fieldMap["trailer"] = s.Trailer
	s.fieldMap["skip_intro"] = s.SkipIntro
	s.fieldMap["skip_ending"] = s.SkipEnding
	s.fieldMap["file_size"] = s.FileSize
	s.fieldMap["filename"] = s.Filename
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_time"] = s.UpdateTime
}

func (s series) clone(db *gorm.DB) series {
	s.seriesDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s series) replaceDB(db *gorm.DB) series {
	s.seriesDo.ReplaceDB(db)
	return s
}

type seriesDo struct{ gen.DO }

type ISeriesDo interface {
	gen.SubQuery
	Debug() ISeriesDo
	WithContext(ctx context.Context) ISeriesDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeriesDo
	WriteDB() ISeriesDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeriesDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeriesDo
	Not(conds ...gen.Condition) ISeriesDo
	Or(conds ...gen.Condition) ISeriesDo
	Select(conds ...field.Expr) ISeriesDo
	Where(conds ...gen.Condition) ISeriesDo
	Order(conds ...field.Expr) ISeriesDo
	Distinct(cols ...field.Expr) ISeriesDo
	Omit(cols ...field.Expr) ISeriesDo
	Join(table schema.Tabler, on ...field.Expr) ISeriesDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeriesDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeriesDo
	Group(cols ...field.Expr) ISeriesDo
	Having(conds ...gen.Condition) ISeriesDo
	Limit(limit int) ISeriesDo
	Offset(offset int) ISeriesDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeriesDo
	Unscoped() ISeriesDo
	Create(values ...*model.Series) error
	CreateInBatches(values []*model.Series, batchSize int) error
	Save(values ...*model.Series) error
	First() (*model.Series, error)
	Take() (*model.Series, error)
	Last() (*model.Series, error)
	Find() ([]*model.Series, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Series, err error)
	FindInBatches(result *[]*model.Series, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Series) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeriesDo
	Assign(attrs ...field.AssignExpr) ISeriesDo
	Joins(fields ...field.RelationField) ISeriesDo
	Preload(fields ...field.RelationField) ISeriesDo
	FirstOrInit() (*model.Series, error)
	FirstOrCreate() (*model.Series, error)
	FindByPage(offset int, limit int) (result []*model.Series, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeriesDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	SelectByID(id int64) (result *model.Series, err error)
}

// SELECT * FROM @@table WHERE id=@id
func (s seriesDo) SelectByID(id int64) (result *model.Series, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM series WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (s seriesDo) Debug() ISeriesDo {
	return s.withDO(s.DO.Debug())
}

func (s seriesDo) WithContext(ctx context.Context) ISeriesDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seriesDo) ReadDB() ISeriesDo {
	return s.Clauses(dbresolver.Read)
}

func (s seriesDo) WriteDB() ISeriesDo {
	return s.Clauses(dbresolver.Write)
}

func (s seriesDo) Session(config *gorm.Session) ISeriesDo {
	return s.withDO(s.DO.Session(config))
}

func (s seriesDo) Clauses(conds ...clause.Expression) ISeriesDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seriesDo) Returning(value interface{}, columns ...string) ISeriesDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seriesDo) Not(conds ...gen.Condition) ISeriesDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seriesDo) Or(conds ...gen.Condition) ISeriesDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seriesDo) Select(conds ...field.Expr) ISeriesDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seriesDo) Where(conds ...gen.Condition) ISeriesDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seriesDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISeriesDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s seriesDo) Order(conds ...field.Expr) ISeriesDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seriesDo) Distinct(cols ...field.Expr) ISeriesDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seriesDo) Omit(cols ...field.Expr) ISeriesDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seriesDo) Join(table schema.Tabler, on ...field.Expr) ISeriesDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seriesDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeriesDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seriesDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeriesDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seriesDo) Group(cols ...field.Expr) ISeriesDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seriesDo) Having(conds ...gen.Condition) ISeriesDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seriesDo) Limit(limit int) ISeriesDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seriesDo) Offset(offset int) ISeriesDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seriesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeriesDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seriesDo) Unscoped() ISeriesDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seriesDo) Create(values ...*model.Series) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seriesDo) CreateInBatches(values []*model.Series, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seriesDo) Save(values ...*model.Series) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seriesDo) First() (*model.Series, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Series), nil
	}
}

func (s seriesDo) Take() (*model.Series, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Series), nil
	}
}

func (s seriesDo) Last() (*model.Series, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Series), nil
	}
}

func (s seriesDo) Find() ([]*model.Series, error) {
	result, err := s.DO.Find()
	return result.([]*model.Series), err
}

func (s seriesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Series, err error) {
	buf := make([]*model.Series, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seriesDo) FindInBatches(result *[]*model.Series, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seriesDo) Attrs(attrs ...field.AssignExpr) ISeriesDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seriesDo) Assign(attrs ...field.AssignExpr) ISeriesDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seriesDo) Joins(fields ...field.RelationField) ISeriesDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seriesDo) Preload(fields ...field.RelationField) ISeriesDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seriesDo) FirstOrInit() (*model.Series, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Series), nil
	}
}

func (s seriesDo) FirstOrCreate() (*model.Series, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Series), nil
	}
}

func (s seriesDo) FindByPage(offset int, limit int) (result []*model.Series, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seriesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seriesDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seriesDo) Delete(models ...*model.Series) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seriesDo) withDO(do gen.Dao) *seriesDo {
	s.DO = *do.(*gen.DO)
	return s
}
