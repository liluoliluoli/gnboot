// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v4.25.0
// source: gnboot-proto/gnboot.proto

package gnboot

import (
	context "context"
	params "github.com/go-cinch/common/proto/params"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGnbootCreateGnboot = "/gnboot.v1.Gnboot/CreateGnboot"
const OperationGnbootDeleteGnboot = "/gnboot.v1.Gnboot/DeleteGnboot"
const OperationGnbootFindGnboot = "/gnboot.v1.Gnboot/FindGnboot"
const OperationGnbootGetGnboot = "/gnboot.v1.Gnboot/GetGnboot"
const OperationGnbootUpdateGnboot = "/gnboot.v1.Gnboot/UpdateGnboot"

type GnbootHTTPServer interface {
	// CreateGnboot create one Gnboot record
	CreateGnboot(context.Context, *CreateGnbootRequest) (*emptypb.Empty, error)
	// DeleteGnboot delete one or more Gnboot record by id
	DeleteGnboot(context.Context, *params.IdsRequest) (*emptypb.Empty, error)
	// FindGnboot query Gnboot list by page
	FindGnboot(context.Context, *FindGnbootRequest) (*FindGnbootReply, error)
	// GetGnboot query one Gnboot record
	GetGnboot(context.Context, *GetGnbootRequest) (*GetGnbootReply, error)
	// UpdateGnboot update one Gnboot record by id
	UpdateGnboot(context.Context, *UpdateGnbootRequest) (*emptypb.Empty, error)
}

func RegisterGnbootHTTPServer(s *http.Server, srv GnbootHTTPServer) {
	r := s.Route("/")
	r.POST("/gnboot/create", _Gnboot_CreateGnboot0_HTTP_Handler(srv))
	r.GET("/gnboot/get", _Gnboot_GetGnboot0_HTTP_Handler(srv))
	r.GET("/gnboot/list", _Gnboot_FindGnboot0_HTTP_Handler(srv))
	r.PATCH("/gnboot/update", _Gnboot_UpdateGnboot0_HTTP_Handler(srv))
	r.PUT("/gnboot/update", _Gnboot_UpdateGnboot1_HTTP_Handler(srv))
	r.DELETE("/gnboot/delete", _Gnboot_DeleteGnboot0_HTTP_Handler(srv))
}

func _Gnboot_CreateGnboot0_HTTP_Handler(srv GnbootHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateGnbootRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGnbootCreateGnboot)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateGnboot(ctx, req.(*CreateGnbootRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Gnboot_GetGnboot0_HTTP_Handler(srv GnbootHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetGnbootRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGnbootGetGnboot)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGnboot(ctx, req.(*GetGnbootRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetGnbootReply)
		return ctx.Result(200, reply)
	}
}

func _Gnboot_FindGnboot0_HTTP_Handler(srv GnbootHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FindGnbootRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGnbootFindGnboot)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FindGnboot(ctx, req.(*FindGnbootRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FindGnbootReply)
		return ctx.Result(200, reply)
	}
}

func _Gnboot_UpdateGnboot0_HTTP_Handler(srv GnbootHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateGnbootRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGnbootUpdateGnboot)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateGnboot(ctx, req.(*UpdateGnbootRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Gnboot_UpdateGnboot1_HTTP_Handler(srv GnbootHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateGnbootRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGnbootUpdateGnboot)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateGnboot(ctx, req.(*UpdateGnbootRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Gnboot_DeleteGnboot0_HTTP_Handler(srv GnbootHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in params.IdsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGnbootDeleteGnboot)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteGnboot(ctx, req.(*params.IdsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type GnbootHTTPClient interface {
	CreateGnboot(ctx context.Context, req *CreateGnbootRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteGnboot(ctx context.Context, req *params.IdsRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	FindGnboot(ctx context.Context, req *FindGnbootRequest, opts ...http.CallOption) (rsp *FindGnbootReply, err error)
	GetGnboot(ctx context.Context, req *GetGnbootRequest, opts ...http.CallOption) (rsp *GetGnbootReply, err error)
	UpdateGnboot(ctx context.Context, req *UpdateGnbootRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type GnbootHTTPClientImpl struct {
	cc *http.Client
}

func NewGnbootHTTPClient(client *http.Client) GnbootHTTPClient {
	return &GnbootHTTPClientImpl{client}
}

func (c *GnbootHTTPClientImpl) CreateGnboot(ctx context.Context, in *CreateGnbootRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/gnboot/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGnbootCreateGnboot))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GnbootHTTPClientImpl) DeleteGnboot(ctx context.Context, in *params.IdsRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/gnboot/delete"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGnbootDeleteGnboot))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GnbootHTTPClientImpl) FindGnboot(ctx context.Context, in *FindGnbootRequest, opts ...http.CallOption) (*FindGnbootReply, error) {
	var out FindGnbootReply
	pattern := "/gnboot/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGnbootFindGnboot))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GnbootHTTPClientImpl) GetGnboot(ctx context.Context, in *GetGnbootRequest, opts ...http.CallOption) (*GetGnbootReply, error) {
	var out GetGnbootReply
	pattern := "/gnboot/get"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGnbootGetGnboot))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GnbootHTTPClientImpl) UpdateGnboot(ctx context.Context, in *UpdateGnbootRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/gnboot/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGnbootUpdateGnboot))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
