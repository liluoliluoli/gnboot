// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/user.proto

package user

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UpdateFavoriteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFavoriteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFavoriteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFavoriteRequestMultiError, or nil if none found.
func (m *UpdateFavoriteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFavoriteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VideoId

	// no validation rules for Favorite

	if len(errors) > 0 {
		return UpdateFavoriteRequestMultiError(errors)
	}

	return nil
}

// UpdateFavoriteRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateFavoriteRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateFavoriteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFavoriteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFavoriteRequestMultiError) AllErrors() []error { return m }

// UpdateFavoriteRequestValidationError is the validation error returned by
// UpdateFavoriteRequest.Validate if the designated constraints aren't met.
type UpdateFavoriteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFavoriteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFavoriteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFavoriteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFavoriteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFavoriteRequestValidationError) ErrorName() string {
	return "UpdateFavoriteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFavoriteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFavoriteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFavoriteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFavoriteRequestValidationError{}

// Validate checks the field values on UpdatePlayedStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePlayedStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePlayedStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePlayedStatusRequestMultiError, or nil if none found.
func (m *UpdatePlayedStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePlayedStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUpdatePlayedStatusList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdatePlayedStatusRequestValidationError{
						field:  fmt.Sprintf("UpdatePlayedStatusList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdatePlayedStatusRequestValidationError{
						field:  fmt.Sprintf("UpdatePlayedStatusList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdatePlayedStatusRequestValidationError{
					field:  fmt.Sprintf("UpdatePlayedStatusList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdatePlayedStatusRequestMultiError(errors)
	}

	return nil
}

// UpdatePlayedStatusRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePlayedStatusRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdatePlayedStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePlayedStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePlayedStatusRequestMultiError) AllErrors() []error { return m }

// UpdatePlayedStatusRequestValidationError is the validation error returned by
// UpdatePlayedStatusRequest.Validate if the designated constraints aren't met.
type UpdatePlayedStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePlayedStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePlayedStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePlayedStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePlayedStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePlayedStatusRequestValidationError) ErrorName() string {
	return "UpdatePlayedStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePlayedStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePlayedStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePlayedStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePlayedStatusRequestValidationError{}

// Validate checks the field values on UpdatePlayedStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePlayedStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePlayedStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePlayedStatusMultiError, or nil if none found.
func (m *UpdatePlayedStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePlayedStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VideoId

	// no validation rules for EpisodeId

	// no validation rules for Position

	// no validation rules for PlayTimestamp

	if len(errors) > 0 {
		return UpdatePlayedStatusMultiError(errors)
	}

	return nil
}

// UpdatePlayedStatusMultiError is an error wrapping multiple validation errors
// returned by UpdatePlayedStatus.ValidateAll() if the designated constraints
// aren't met.
type UpdatePlayedStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePlayedStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePlayedStatusMultiError) AllErrors() []error { return m }

// UpdatePlayedStatusValidationError is the validation error returned by
// UpdatePlayedStatus.Validate if the designated constraints aren't met.
type UpdatePlayedStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePlayedStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePlayedStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePlayedStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePlayedStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePlayedStatusValidationError) ErrorName() string {
	return "UpdatePlayedStatusValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePlayedStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePlayedStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePlayedStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePlayedStatusValidationError{}

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserRequestMultiError, or nil if none found.
func (m *CreateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserName

	// no validation rules for Password

	// no validation rules for ConfirmPassword

	if len(errors) > 0 {
		return CreateUserRequestMultiError(errors)
	}

	return nil
}

// CreateUserRequestMultiError is an error wrapping multiple validation errors
// returned by CreateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRequestMultiError) AllErrors() []error { return m }

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

// Validate checks the field values on LoginUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginUserRequestMultiError, or nil if none found.
func (m *LoginUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserName

	// no validation rules for Password

	if len(errors) > 0 {
		return LoginUserRequestMultiError(errors)
	}

	return nil
}

// LoginUserRequestMultiError is an error wrapping multiple validation errors
// returned by LoginUserRequest.ValidateAll() if the designated constraints
// aren't met.
type LoginUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginUserRequestMultiError) AllErrors() []error { return m }

// LoginUserRequestValidationError is the validation error returned by
// LoginUserRequest.Validate if the designated constraints aren't met.
type LoginUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginUserRequestValidationError) ErrorName() string { return "LoginUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginUserRequestValidationError{}

// Validate checks the field values on LoginUserResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginUserResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginUserResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginUserRespMultiError, or
// nil if none found.
func (m *LoginUserResp) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginUserResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Authorization

	if len(errors) > 0 {
		return LoginUserRespMultiError(errors)
	}

	return nil
}

// LoginUserRespMultiError is an error wrapping multiple validation errors
// returned by LoginUserResp.ValidateAll() if the designated constraints
// aren't met.
type LoginUserRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginUserRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginUserRespMultiError) AllErrors() []error { return m }

// LoginUserRespValidationError is the validation error returned by
// LoginUserResp.Validate if the designated constraints aren't met.
type LoginUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginUserRespValidationError) ErrorName() string { return "LoginUserRespValidationError" }

// Error satisfies the builtin error interface
func (e LoginUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginUserRespValidationError{}

// Validate checks the field values on LogoutUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LogoutUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LogoutUserRequestMultiError, or nil if none found.
func (m *LogoutUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LogoutUserRequestMultiError(errors)
	}

	return nil
}

// LogoutUserRequestMultiError is an error wrapping multiple validation errors
// returned by LogoutUserRequest.ValidateAll() if the designated constraints
// aren't met.
type LogoutUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutUserRequestMultiError) AllErrors() []error { return m }

// LogoutUserRequestValidationError is the validation error returned by
// LogoutUserRequest.Validate if the designated constraints aren't met.
type LogoutUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutUserRequestValidationError) ErrorName() string {
	return "LogoutUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LogoutUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutUserRequestValidationError{}

// Validate checks the field values on LogoutUserResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutUserResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutUserResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutUserRespMultiError,
// or nil if none found.
func (m *LogoutUserResp) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutUserResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LogoutUserRespMultiError(errors)
	}

	return nil
}

// LogoutUserRespMultiError is an error wrapping multiple validation errors
// returned by LogoutUserResp.ValidateAll() if the designated constraints
// aren't met.
type LogoutUserRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutUserRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutUserRespMultiError) AllErrors() []error { return m }

// LogoutUserRespValidationError is the validation error returned by
// LogoutUserResp.Validate if the designated constraints aren't met.
type LogoutUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutUserRespValidationError) ErrorName() string { return "LogoutUserRespValidationError" }

// Error satisfies the builtin error interface
func (e LogoutUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutUserRespValidationError{}

// Validate checks the field values on GetCurrentWatchCountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurrentWatchCountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentWatchCountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCurrentWatchCountRequestMultiError, or nil if none found.
func (m *GetCurrentWatchCountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentWatchCountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCurrentWatchCountRequestMultiError(errors)
	}

	return nil
}

// GetCurrentWatchCountRequestMultiError is an error wrapping multiple
// validation errors returned by GetCurrentWatchCountRequest.ValidateAll() if
// the designated constraints aren't met.
type GetCurrentWatchCountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentWatchCountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentWatchCountRequestMultiError) AllErrors() []error { return m }

// GetCurrentWatchCountRequestValidationError is the validation error returned
// by GetCurrentWatchCountRequest.Validate if the designated constraints
// aren't met.
type GetCurrentWatchCountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentWatchCountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentWatchCountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentWatchCountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentWatchCountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentWatchCountRequestValidationError) ErrorName() string {
	return "GetCurrentWatchCountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentWatchCountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentWatchCountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentWatchCountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentWatchCountRequestValidationError{}

// Validate checks the field values on GetCurrentWatchCountResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurrentWatchCountResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentWatchCountResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCurrentWatchCountRespMultiError, or nil if none found.
func (m *GetCurrentWatchCountResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentWatchCountResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WatchCount

	if len(errors) > 0 {
		return GetCurrentWatchCountRespMultiError(errors)
	}

	return nil
}

// GetCurrentWatchCountRespMultiError is an error wrapping multiple validation
// errors returned by GetCurrentWatchCountResp.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentWatchCountRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentWatchCountRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentWatchCountRespMultiError) AllErrors() []error { return m }

// GetCurrentWatchCountRespValidationError is the validation error returned by
// GetCurrentWatchCountResp.Validate if the designated constraints aren't met.
type GetCurrentWatchCountRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentWatchCountRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentWatchCountRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentWatchCountRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentWatchCountRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentWatchCountRespValidationError) ErrorName() string {
	return "GetCurrentWatchCountRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentWatchCountRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentWatchCountResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentWatchCountRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentWatchCountRespValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WatchCount

	// no validation rules for UserName

	// no validation rules for FavoriteCount

	// no validation rules for PackageType

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}
