// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.1
// - protoc             v5.28.3
// source: gnboot-proto/gnboot.proto

package gnboot

import (
	context "context"
	params "github.com/go-cinch/common/proto/params"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGnbootCreateMovie = "/gnboot.v1.Gnboot/CreateMovie"
const OperationGnbootDeleteMovie = "/gnboot.v1.Gnboot/DeleteMovie"
const OperationGnbootFindMovie = "/gnboot.v1.Gnboot/FindMovie"
const OperationGnbootGetMovie = "/gnboot.v1.Gnboot/GetMovie"
const OperationGnbootUpdateMovie = "/gnboot.v1.Gnboot/UpdateMovie"

type GnbootHTTPServer interface {
	// CreateMovie create one Movie record
	CreateMovie(context.Context, *CreateMovieRequest) (*emptypb.Empty, error)
	// DeleteMovie delete one or more Movie record by id
	DeleteMovie(context.Context, *params.IdsRequest) (*emptypb.Empty, error)
	// FindMovie query Movie list by page
	FindMovie(context.Context, *FindMovieRequest) (*FindMovieReply, error)
	// GetMovie query one Movie record
	GetMovie(context.Context, *GetMovieRequest) (*GetMovieReply, error)
	// UpdateMovie update one Movie record by id
	UpdateMovie(context.Context, *UpdateMovieRequest) (*emptypb.Empty, error)
}

func RegisterGnbootHTTPServer(s *http.Server, srv GnbootHTTPServer) {
	r := s.Route("/")
	r.POST("/movie/create", _Gnboot_CreateMovie0_HTTP_Handler(srv))
	r.GET("/movie/get", _Gnboot_GetMovie0_HTTP_Handler(srv))
	r.GET("/movie/list", _Gnboot_FindMovie0_HTTP_Handler(srv))
	r.PATCH("/movie/update", _Gnboot_UpdateMovie0_HTTP_Handler(srv))
	r.PUT("/movie/update", _Gnboot_UpdateMovie1_HTTP_Handler(srv))
	r.DELETE("/movie/delete", _Gnboot_DeleteMovie0_HTTP_Handler(srv))
}

func _Gnboot_CreateMovie0_HTTP_Handler(srv GnbootHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateMovieRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGnbootCreateMovie)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateMovie(ctx, req.(*CreateMovieRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Gnboot_GetMovie0_HTTP_Handler(srv GnbootHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMovieRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGnbootGetMovie)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMovie(ctx, req.(*GetMovieRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMovieReply)
		return ctx.Result(200, reply)
	}
}

func _Gnboot_FindMovie0_HTTP_Handler(srv GnbootHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FindMovieRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGnbootFindMovie)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FindMovie(ctx, req.(*FindMovieRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FindMovieReply)
		return ctx.Result(200, reply)
	}
}

func _Gnboot_UpdateMovie0_HTTP_Handler(srv GnbootHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateMovieRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGnbootUpdateMovie)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateMovie(ctx, req.(*UpdateMovieRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Gnboot_UpdateMovie1_HTTP_Handler(srv GnbootHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateMovieRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGnbootUpdateMovie)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateMovie(ctx, req.(*UpdateMovieRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Gnboot_DeleteMovie0_HTTP_Handler(srv GnbootHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in params.IdsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGnbootDeleteMovie)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteMovie(ctx, req.(*params.IdsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type GnbootHTTPClient interface {
	CreateMovie(ctx context.Context, req *CreateMovieRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteMovie(ctx context.Context, req *params.IdsRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	FindMovie(ctx context.Context, req *FindMovieRequest, opts ...http.CallOption) (rsp *FindMovieReply, err error)
	GetMovie(ctx context.Context, req *GetMovieRequest, opts ...http.CallOption) (rsp *GetMovieReply, err error)
	UpdateMovie(ctx context.Context, req *UpdateMovieRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type GnbootHTTPClientImpl struct {
	cc *http.Client
}

func NewGnbootHTTPClient(client *http.Client) GnbootHTTPClient {
	return &GnbootHTTPClientImpl{client}
}

func (c *GnbootHTTPClientImpl) CreateMovie(ctx context.Context, in *CreateMovieRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/movie/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGnbootCreateMovie))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GnbootHTTPClientImpl) DeleteMovie(ctx context.Context, in *params.IdsRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/movie/delete"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGnbootDeleteMovie))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GnbootHTTPClientImpl) FindMovie(ctx context.Context, in *FindMovieRequest, opts ...http.CallOption) (*FindMovieReply, error) {
	var out FindMovieReply
	pattern := "/movie/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGnbootFindMovie))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GnbootHTTPClientImpl) GetMovie(ctx context.Context, in *GetMovieRequest, opts ...http.CallOption) (*GetMovieReply, error) {
	var out GetMovieReply
	pattern := "/movie/get"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGnbootGetMovie))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GnbootHTTPClientImpl) UpdateMovie(ctx context.Context, in *UpdateMovieRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/movie/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGnbootUpdateMovie))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
