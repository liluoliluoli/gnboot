// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	"gnboot/internal/repo/model"
)

func newSeason(db *gorm.DB, opts ...gen.DOOption) season {
	_season := season{}

	_season.seasonDo.UseDB(db, opts...)
	_season.seasonDo.UseModel(&model.Season{})

	tableName := _season.seasonDo.TableName()
	_season.ALL = field.NewAsterisk(tableName)
	_season.ID = field.NewUint64(tableName, "id")
	_season.SeriesID = field.NewInt64(tableName, "series_id")
	_season.Season = field.NewInt32(tableName, "season")
	_season.SeriesTitle = field.NewString(tableName, "series_title")
	_season.SkipIntro = field.NewInt64(tableName, "skip_intro")
	_season.SkipEnding = field.NewInt64(tableName, "skip_ending")
	_season.EpisodeCount = field.NewInt32(tableName, "episode_count")

	_season.fillFieldMap()

	return _season
}

// season 季
type season struct {
	seasonDo seasonDo

	ALL          field.Asterisk
	ID           field.Uint64 // 主键
	SeriesID     field.Int64  // 连续剧id
	Season       field.Int32  // 第几季
	SeriesTitle  field.String // 季名称
	SkipIntro    field.Int64  // 片头跳过秒数
	SkipEnding   field.Int64  // 片尾跳过秒数
	EpisodeCount field.Int32  // 总集数

	fieldMap map[string]field.Expr
}

func (s season) Table(newTableName string) *season {
	s.seasonDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s season) As(alias string) *season {
	s.seasonDo.DO = *(s.seasonDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *season) updateTableName(table string) *season {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint64(table, "id")
	s.SeriesID = field.NewInt64(table, "series_id")
	s.Season = field.NewInt32(table, "season")
	s.SeriesTitle = field.NewString(table, "series_title")
	s.SkipIntro = field.NewInt64(table, "skip_intro")
	s.SkipEnding = field.NewInt64(table, "skip_ending")
	s.EpisodeCount = field.NewInt32(table, "episode_count")

	s.fillFieldMap()

	return s
}

func (s *season) WithContext(ctx context.Context) *seasonDo { return s.seasonDo.WithContext(ctx) }

func (s season) TableName() string { return s.seasonDo.TableName() }

func (s season) Alias() string { return s.seasonDo.Alias() }

func (s season) Columns(cols ...field.Expr) gen.Columns { return s.seasonDo.Columns(cols...) }

func (s *season) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *season) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id"] = s.ID
	s.fieldMap["series_id"] = s.SeriesID
	s.fieldMap["season"] = s.Season
	s.fieldMap["series_title"] = s.SeriesTitle
	s.fieldMap["skip_intro"] = s.SkipIntro
	s.fieldMap["skip_ending"] = s.SkipEnding
	s.fieldMap["episode_count"] = s.EpisodeCount
}

func (s season) clone(db *gorm.DB) season {
	s.seasonDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s season) replaceDB(db *gorm.DB) season {
	s.seasonDo.ReplaceDB(db)
	return s
}

type seasonDo struct{ gen.DO }

// SELECT * FROM `@@table` WHERE `id` = @id LIMIT 1
func (s seasonDo) GetByID(id uint64) (result model.Season) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM `season` WHERE `id` = ? LIMIT 1 ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	_ = executeSQL

	return
}

// SELECT * FROM `@@table`
// {{where}}
//
//	{{if val != ""}}
//	  {{if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%")}}
//	    @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val), '%')
//	  {{else if strings.HasPrefix(val, "%")}}
//	    @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val))
//	  {{else if strings.HasSuffix(val, "%")}}
//	    @@col LIKE CONCAT(TRIM(BOTH '%' FROM @val), '%')
//	  {{else}}
//	    @@col = @val
//	  {{end}}
//	{{end}}
//
// {{end}}
// LIMIT 1
func (s seasonDo) GetByCol(col string, val string) (result model.Season) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM `season` ")
	var whereSQL0 strings.Builder
	if val != "" {
		if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(s.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?), '%') ")
		} else if strings.HasPrefix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(s.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?)) ")
		} else if strings.HasSuffix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(s.Quote(col) + " LIKE CONCAT(TRIM(BOTH '%' FROM ?), '%') ")
		} else {
			params = append(params, val)
			whereSQL0.WriteString(s.Quote(col) + " = ? ")
		}
	}
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString("LIMIT 1 ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	_ = executeSQL

	return
}

// SELECT * FROM `@@table`
// {{if len(cols) == len(vals)}}
// {{where}}
//
//	  {{for i, col := range cols}}
//	    {{for j, val := range vals}}
//	      {{if i == j}}
//	        {{if val != ""}}
//	          {{if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%")}}
//	            @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val), '%') AND
//	          {{else if strings.HasPrefix(val, "%")}}
//	            @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val)) AND
//	          {{else if strings.HasSuffix(val, "%")}}
//	            @@col LIKE CONCAT(TRIM(BOTH '%' FROM @val), '%') AND
//	          {{else}}
//	            @@col = @val AND
//	          {{end}}
//	        {{end}}
//	      {{end}}
//	    {{end}}
//	  {{end}}
//	{{end}}
//
// {{end}}
// LIMIT 1
func (s seasonDo) GetByCols(cols []string, vals []string) (result model.Season) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM `season` ")
	if len(cols) == len(vals) {
		var whereSQL0 strings.Builder
		for i, col := range cols {
			for j, val := range vals {
				if i == j {
					if val != "" {
						if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(s.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?), '%') AND ")
						} else if strings.HasPrefix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(s.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?)) AND ")
						} else if strings.HasSuffix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(s.Quote(col) + " LIKE CONCAT(TRIM(BOTH '%' FROM ?), '%') AND ")
						} else {
							params = append(params, val)
							whereSQL0.WriteString(s.Quote(col) + " = ? AND ")
						}
					}
				}
			}
		}
		helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	}
	generateSQL.WriteString("LIMIT 1 ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	_ = executeSQL

	return
}

// SELECT * FROM `@@table`
// {{where}}
//
//	{{if val != ""}}
//	  {{if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%")}}
//	    @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val), '%')
//	  {{else if strings.HasPrefix(val, "%")}}
//	    @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val))
//	  {{else if strings.HasSuffix(val, "%")}}
//	    @@col LIKE CONCAT(TRIM(BOTH '%' FROM @val), '%')
//	  {{else}}
//	    @@col = @val
//	  {{end}}
//	{{end}}
//
// {{end}}
func (s seasonDo) FindByCol(col string, val string) (result []model.Season) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM `season` ")
	var whereSQL0 strings.Builder
	if val != "" {
		if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(s.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?), '%') ")
		} else if strings.HasPrefix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(s.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?)) ")
		} else if strings.HasSuffix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(s.Quote(col) + " LIKE CONCAT(TRIM(BOTH '%' FROM ?), '%') ")
		} else {
			params = append(params, val)
			whereSQL0.WriteString(s.Quote(col) + " = ? ")
		}
	}
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	_ = executeSQL

	return
}

// SELECT * FROM `@@table`
// {{if len(cols) == len(vals)}}
// {{where}}
//
//	  {{for i, col := range cols}}
//	    {{for j, val := range vals}}
//	      {{if i == j}}
//	        {{if val != ""}}
//	          {{if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%")}}
//	            @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val), '%') AND
//	          {{else if strings.HasPrefix(val, "%")}}
//	            @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val)) AND
//	          {{else if strings.HasSuffix(val, "%")}}
//	            @@col LIKE CONCAT(TRIM(BOTH '%' FROM @val), '%') AND
//	          {{else}}
//	            @@col = @val AND
//	          {{end}}
//	        {{end}}
//	      {{end}}
//	    {{end}}
//	  {{end}}
//	{{end}}
//
// {{end}}
func (s seasonDo) FindByCols(cols []string, vals []string) (result []model.Season) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM `season` ")
	if len(cols) == len(vals) {
		var whereSQL0 strings.Builder
		for i, col := range cols {
			for j, val := range vals {
				if i == j {
					if val != "" {
						if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(s.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?), '%') AND ")
						} else if strings.HasPrefix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(s.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?)) AND ")
						} else if strings.HasSuffix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(s.Quote(col) + " LIKE CONCAT(TRIM(BOTH '%' FROM ?), '%') AND ")
						} else {
							params = append(params, val)
							whereSQL0.WriteString(s.Quote(col) + " = ? AND ")
						}
					}
				}
			}
		}
		helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	}

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	_ = executeSQL

	return
}

func (s seasonDo) Debug() *seasonDo {
	return s.withDO(s.DO.Debug())
}

func (s seasonDo) WithContext(ctx context.Context) *seasonDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seasonDo) ReadDB() *seasonDo {
	return s.Clauses(dbresolver.Read)
}

func (s seasonDo) WriteDB() *seasonDo {
	return s.Clauses(dbresolver.Write)
}

func (s seasonDo) Session(config *gorm.Session) *seasonDo {
	return s.withDO(s.DO.Session(config))
}

func (s seasonDo) Clauses(conds ...clause.Expression) *seasonDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seasonDo) Returning(value interface{}, columns ...string) *seasonDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seasonDo) Not(conds ...gen.Condition) *seasonDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seasonDo) Or(conds ...gen.Condition) *seasonDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seasonDo) Select(conds ...field.Expr) *seasonDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seasonDo) Where(conds ...gen.Condition) *seasonDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seasonDo) Order(conds ...field.Expr) *seasonDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seasonDo) Distinct(cols ...field.Expr) *seasonDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seasonDo) Omit(cols ...field.Expr) *seasonDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seasonDo) Join(table schema.Tabler, on ...field.Expr) *seasonDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seasonDo) LeftJoin(table schema.Tabler, on ...field.Expr) *seasonDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seasonDo) RightJoin(table schema.Tabler, on ...field.Expr) *seasonDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seasonDo) Group(cols ...field.Expr) *seasonDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seasonDo) Having(conds ...gen.Condition) *seasonDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seasonDo) Limit(limit int) *seasonDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seasonDo) Offset(offset int) *seasonDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seasonDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *seasonDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seasonDo) Unscoped() *seasonDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seasonDo) Create(values ...*model.Season) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seasonDo) CreateInBatches(values []*model.Season, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seasonDo) Save(values ...*model.Season) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seasonDo) First() (*model.Season, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Season), nil
	}
}

func (s seasonDo) Take() (*model.Season, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Season), nil
	}
}

func (s seasonDo) Last() (*model.Season, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Season), nil
	}
}

func (s seasonDo) Find() ([]*model.Season, error) {
	result, err := s.DO.Find()
	return result.([]*model.Season), err
}

func (s seasonDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Season, err error) {
	buf := make([]*model.Season, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seasonDo) FindInBatches(result *[]*model.Season, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seasonDo) Attrs(attrs ...field.AssignExpr) *seasonDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seasonDo) Assign(attrs ...field.AssignExpr) *seasonDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seasonDo) Joins(fields ...field.RelationField) *seasonDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seasonDo) Preload(fields ...field.RelationField) *seasonDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seasonDo) FirstOrInit() (*model.Season, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Season), nil
	}
}

func (s seasonDo) FirstOrCreate() (*model.Season, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Season), nil
	}
}

func (s seasonDo) FindByPage(offset int, limit int) (result []*model.Season, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seasonDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seasonDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seasonDo) Delete(models ...*model.Season) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seasonDo) withDO(do gen.Dao) *seasonDo {
	s.DO = *do.(*gen.DO)
	return s
}
