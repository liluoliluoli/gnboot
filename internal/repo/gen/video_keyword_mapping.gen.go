// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gnboot/internal/repo/model"
)

func newVideoKeywordMapping(db *gorm.DB, opts ...gen.DOOption) videoKeywordMapping {
	_videoKeywordMapping := videoKeywordMapping{}

	_videoKeywordMapping.videoKeywordMappingDo.UseDB(db, opts...)
	_videoKeywordMapping.videoKeywordMappingDo.UseModel(&model.VideoKeywordMapping{})

	tableName := _videoKeywordMapping.videoKeywordMappingDo.TableName()
	_videoKeywordMapping.ALL = field.NewAsterisk(tableName)
	_videoKeywordMapping.ID = field.NewInt64(tableName, "id")
	_videoKeywordMapping.VideoType = field.NewString(tableName, "video_type")
	_videoKeywordMapping.VideoID = field.NewInt64(tableName, "video_id")
	_videoKeywordMapping.KeywordID = field.NewInt64(tableName, "keyword_id")

	_videoKeywordMapping.fillFieldMap()

	return _videoKeywordMapping
}

type videoKeywordMapping struct {
	videoKeywordMappingDo videoKeywordMappingDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键
	VideoType field.String // 影片类型，movie,series,season,episode
	VideoID   field.Int64  // 影片id，根据video_type类型分别来自movie,series,season,episode表
	KeywordID field.Int64  // 关键词id

	fieldMap map[string]field.Expr
}

func (v videoKeywordMapping) Table(newTableName string) *videoKeywordMapping {
	v.videoKeywordMappingDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v videoKeywordMapping) As(alias string) *videoKeywordMapping {
	v.videoKeywordMappingDo.DO = *(v.videoKeywordMappingDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *videoKeywordMapping) updateTableName(table string) *videoKeywordMapping {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewInt64(table, "id")
	v.VideoType = field.NewString(table, "video_type")
	v.VideoID = field.NewInt64(table, "video_id")
	v.KeywordID = field.NewInt64(table, "keyword_id")

	v.fillFieldMap()

	return v
}

func (v *videoKeywordMapping) WithContext(ctx context.Context) IVideoKeywordMappingDo {
	return v.videoKeywordMappingDo.WithContext(ctx)
}

func (v videoKeywordMapping) TableName() string { return v.videoKeywordMappingDo.TableName() }

func (v videoKeywordMapping) Alias() string { return v.videoKeywordMappingDo.Alias() }

func (v *videoKeywordMapping) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *videoKeywordMapping) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 4)
	v.fieldMap["id"] = v.ID
	v.fieldMap["video_type"] = v.VideoType
	v.fieldMap["video_id"] = v.VideoID
	v.fieldMap["keyword_id"] = v.KeywordID
}

func (v videoKeywordMapping) clone(db *gorm.DB) videoKeywordMapping {
	v.videoKeywordMappingDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v videoKeywordMapping) replaceDB(db *gorm.DB) videoKeywordMapping {
	v.videoKeywordMappingDo.ReplaceDB(db)
	return v
}

type videoKeywordMappingDo struct{ gen.DO }

type IVideoKeywordMappingDo interface {
	gen.SubQuery
	Debug() IVideoKeywordMappingDo
	WithContext(ctx context.Context) IVideoKeywordMappingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVideoKeywordMappingDo
	WriteDB() IVideoKeywordMappingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVideoKeywordMappingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVideoKeywordMappingDo
	Not(conds ...gen.Condition) IVideoKeywordMappingDo
	Or(conds ...gen.Condition) IVideoKeywordMappingDo
	Select(conds ...field.Expr) IVideoKeywordMappingDo
	Where(conds ...gen.Condition) IVideoKeywordMappingDo
	Order(conds ...field.Expr) IVideoKeywordMappingDo
	Distinct(cols ...field.Expr) IVideoKeywordMappingDo
	Omit(cols ...field.Expr) IVideoKeywordMappingDo
	Join(table schema.Tabler, on ...field.Expr) IVideoKeywordMappingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVideoKeywordMappingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVideoKeywordMappingDo
	Group(cols ...field.Expr) IVideoKeywordMappingDo
	Having(conds ...gen.Condition) IVideoKeywordMappingDo
	Limit(limit int) IVideoKeywordMappingDo
	Offset(offset int) IVideoKeywordMappingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVideoKeywordMappingDo
	Unscoped() IVideoKeywordMappingDo
	Create(values ...*model.VideoKeywordMapping) error
	CreateInBatches(values []*model.VideoKeywordMapping, batchSize int) error
	Save(values ...*model.VideoKeywordMapping) error
	First() (*model.VideoKeywordMapping, error)
	Take() (*model.VideoKeywordMapping, error)
	Last() (*model.VideoKeywordMapping, error)
	Find() ([]*model.VideoKeywordMapping, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VideoKeywordMapping, err error)
	FindInBatches(result *[]*model.VideoKeywordMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.VideoKeywordMapping) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVideoKeywordMappingDo
	Assign(attrs ...field.AssignExpr) IVideoKeywordMappingDo
	Joins(fields ...field.RelationField) IVideoKeywordMappingDo
	Preload(fields ...field.RelationField) IVideoKeywordMappingDo
	FirstOrInit() (*model.VideoKeywordMapping, error)
	FirstOrCreate() (*model.VideoKeywordMapping, error)
	FindByPage(offset int, limit int) (result []*model.VideoKeywordMapping, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVideoKeywordMappingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	SelectByID(id int64) (result *model.VideoKeywordMapping, err error)
}

// SELECT * FROM @@table WHERE id=@id
func (v videoKeywordMappingDo) SelectByID(id int64) (result *model.VideoKeywordMapping, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM video_keyword_mapping WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = v.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (v videoKeywordMappingDo) Debug() IVideoKeywordMappingDo {
	return v.withDO(v.DO.Debug())
}

func (v videoKeywordMappingDo) WithContext(ctx context.Context) IVideoKeywordMappingDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v videoKeywordMappingDo) ReadDB() IVideoKeywordMappingDo {
	return v.Clauses(dbresolver.Read)
}

func (v videoKeywordMappingDo) WriteDB() IVideoKeywordMappingDo {
	return v.Clauses(dbresolver.Write)
}

func (v videoKeywordMappingDo) Session(config *gorm.Session) IVideoKeywordMappingDo {
	return v.withDO(v.DO.Session(config))
}

func (v videoKeywordMappingDo) Clauses(conds ...clause.Expression) IVideoKeywordMappingDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v videoKeywordMappingDo) Returning(value interface{}, columns ...string) IVideoKeywordMappingDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v videoKeywordMappingDo) Not(conds ...gen.Condition) IVideoKeywordMappingDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v videoKeywordMappingDo) Or(conds ...gen.Condition) IVideoKeywordMappingDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v videoKeywordMappingDo) Select(conds ...field.Expr) IVideoKeywordMappingDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v videoKeywordMappingDo) Where(conds ...gen.Condition) IVideoKeywordMappingDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v videoKeywordMappingDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IVideoKeywordMappingDo {
	return v.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (v videoKeywordMappingDo) Order(conds ...field.Expr) IVideoKeywordMappingDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v videoKeywordMappingDo) Distinct(cols ...field.Expr) IVideoKeywordMappingDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v videoKeywordMappingDo) Omit(cols ...field.Expr) IVideoKeywordMappingDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v videoKeywordMappingDo) Join(table schema.Tabler, on ...field.Expr) IVideoKeywordMappingDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v videoKeywordMappingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVideoKeywordMappingDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v videoKeywordMappingDo) RightJoin(table schema.Tabler, on ...field.Expr) IVideoKeywordMappingDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v videoKeywordMappingDo) Group(cols ...field.Expr) IVideoKeywordMappingDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v videoKeywordMappingDo) Having(conds ...gen.Condition) IVideoKeywordMappingDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v videoKeywordMappingDo) Limit(limit int) IVideoKeywordMappingDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v videoKeywordMappingDo) Offset(offset int) IVideoKeywordMappingDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v videoKeywordMappingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVideoKeywordMappingDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v videoKeywordMappingDo) Unscoped() IVideoKeywordMappingDo {
	return v.withDO(v.DO.Unscoped())
}

func (v videoKeywordMappingDo) Create(values ...*model.VideoKeywordMapping) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v videoKeywordMappingDo) CreateInBatches(values []*model.VideoKeywordMapping, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v videoKeywordMappingDo) Save(values ...*model.VideoKeywordMapping) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v videoKeywordMappingDo) First() (*model.VideoKeywordMapping, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoKeywordMapping), nil
	}
}

func (v videoKeywordMappingDo) Take() (*model.VideoKeywordMapping, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoKeywordMapping), nil
	}
}

func (v videoKeywordMappingDo) Last() (*model.VideoKeywordMapping, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoKeywordMapping), nil
	}
}

func (v videoKeywordMappingDo) Find() ([]*model.VideoKeywordMapping, error) {
	result, err := v.DO.Find()
	return result.([]*model.VideoKeywordMapping), err
}

func (v videoKeywordMappingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VideoKeywordMapping, err error) {
	buf := make([]*model.VideoKeywordMapping, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v videoKeywordMappingDo) FindInBatches(result *[]*model.VideoKeywordMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v videoKeywordMappingDo) Attrs(attrs ...field.AssignExpr) IVideoKeywordMappingDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v videoKeywordMappingDo) Assign(attrs ...field.AssignExpr) IVideoKeywordMappingDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v videoKeywordMappingDo) Joins(fields ...field.RelationField) IVideoKeywordMappingDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v videoKeywordMappingDo) Preload(fields ...field.RelationField) IVideoKeywordMappingDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v videoKeywordMappingDo) FirstOrInit() (*model.VideoKeywordMapping, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoKeywordMapping), nil
	}
}

func (v videoKeywordMappingDo) FirstOrCreate() (*model.VideoKeywordMapping, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoKeywordMapping), nil
	}
}

func (v videoKeywordMappingDo) FindByPage(offset int, limit int) (result []*model.VideoKeywordMapping, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v videoKeywordMappingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v videoKeywordMappingDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v videoKeywordMappingDo) Delete(models ...*model.VideoKeywordMapping) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *videoKeywordMappingDo) withDO(do gen.Dao) *videoKeywordMappingDo {
	v.DO = *do.(*gen.DO)
	return v
}
