// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gnboot/internal/repo/model"
)

func newVideoStudioMapping(db *gorm.DB, opts ...gen.DOOption) videoStudioMapping {
	_videoStudioMapping := videoStudioMapping{}

	_videoStudioMapping.videoStudioMappingDo.UseDB(db, opts...)
	_videoStudioMapping.videoStudioMappingDo.UseModel(&model.VideoStudioMapping{})

	tableName := _videoStudioMapping.videoStudioMappingDo.TableName()
	_videoStudioMapping.ALL = field.NewAsterisk(tableName)
	_videoStudioMapping.ID = field.NewInt64(tableName, "id")
	_videoStudioMapping.VideoType = field.NewString(tableName, "video_type")
	_videoStudioMapping.VideoID = field.NewInt64(tableName, "video_id")
	_videoStudioMapping.StudioID = field.NewInt64(tableName, "studio_id")

	_videoStudioMapping.fillFieldMap()

	return _videoStudioMapping
}

type videoStudioMapping struct {
	videoStudioMappingDo videoStudioMappingDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键
	VideoType field.String // 影片类型，movie,series,season,episode
	VideoID   field.Int64  // 影片id，根据video_type类型分别来自movie,series,season,episode表
	StudioID  field.Int64  // 出品方id

	fieldMap map[string]field.Expr
}

func (v videoStudioMapping) Table(newTableName string) *videoStudioMapping {
	v.videoStudioMappingDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v videoStudioMapping) As(alias string) *videoStudioMapping {
	v.videoStudioMappingDo.DO = *(v.videoStudioMappingDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *videoStudioMapping) updateTableName(table string) *videoStudioMapping {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewInt64(table, "id")
	v.VideoType = field.NewString(table, "video_type")
	v.VideoID = field.NewInt64(table, "video_id")
	v.StudioID = field.NewInt64(table, "studio_id")

	v.fillFieldMap()

	return v
}

func (v *videoStudioMapping) WithContext(ctx context.Context) IVideoStudioMappingDo {
	return v.videoStudioMappingDo.WithContext(ctx)
}

func (v videoStudioMapping) TableName() string { return v.videoStudioMappingDo.TableName() }

func (v videoStudioMapping) Alias() string { return v.videoStudioMappingDo.Alias() }

func (v *videoStudioMapping) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *videoStudioMapping) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 4)
	v.fieldMap["id"] = v.ID
	v.fieldMap["video_type"] = v.VideoType
	v.fieldMap["video_id"] = v.VideoID
	v.fieldMap["studio_id"] = v.StudioID
}

func (v videoStudioMapping) clone(db *gorm.DB) videoStudioMapping {
	v.videoStudioMappingDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v videoStudioMapping) replaceDB(db *gorm.DB) videoStudioMapping {
	v.videoStudioMappingDo.ReplaceDB(db)
	return v
}

type videoStudioMappingDo struct{ gen.DO }

type IVideoStudioMappingDo interface {
	gen.SubQuery
	Debug() IVideoStudioMappingDo
	WithContext(ctx context.Context) IVideoStudioMappingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVideoStudioMappingDo
	WriteDB() IVideoStudioMappingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVideoStudioMappingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVideoStudioMappingDo
	Not(conds ...gen.Condition) IVideoStudioMappingDo
	Or(conds ...gen.Condition) IVideoStudioMappingDo
	Select(conds ...field.Expr) IVideoStudioMappingDo
	Where(conds ...gen.Condition) IVideoStudioMappingDo
	Order(conds ...field.Expr) IVideoStudioMappingDo
	Distinct(cols ...field.Expr) IVideoStudioMappingDo
	Omit(cols ...field.Expr) IVideoStudioMappingDo
	Join(table schema.Tabler, on ...field.Expr) IVideoStudioMappingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVideoStudioMappingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVideoStudioMappingDo
	Group(cols ...field.Expr) IVideoStudioMappingDo
	Having(conds ...gen.Condition) IVideoStudioMappingDo
	Limit(limit int) IVideoStudioMappingDo
	Offset(offset int) IVideoStudioMappingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVideoStudioMappingDo
	Unscoped() IVideoStudioMappingDo
	Create(values ...*model.VideoStudioMapping) error
	CreateInBatches(values []*model.VideoStudioMapping, batchSize int) error
	Save(values ...*model.VideoStudioMapping) error
	First() (*model.VideoStudioMapping, error)
	Take() (*model.VideoStudioMapping, error)
	Last() (*model.VideoStudioMapping, error)
	Find() ([]*model.VideoStudioMapping, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VideoStudioMapping, err error)
	FindInBatches(result *[]*model.VideoStudioMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.VideoStudioMapping) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVideoStudioMappingDo
	Assign(attrs ...field.AssignExpr) IVideoStudioMappingDo
	Joins(fields ...field.RelationField) IVideoStudioMappingDo
	Preload(fields ...field.RelationField) IVideoStudioMappingDo
	FirstOrInit() (*model.VideoStudioMapping, error)
	FirstOrCreate() (*model.VideoStudioMapping, error)
	FindByPage(offset int, limit int) (result []*model.VideoStudioMapping, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVideoStudioMappingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	SelectByID(id int64) (result *model.VideoStudioMapping, err error)
}

// SELECT * FROM @@table WHERE id=@id
func (v videoStudioMappingDo) SelectByID(id int64) (result *model.VideoStudioMapping, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM video_studio_mapping WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = v.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (v videoStudioMappingDo) Debug() IVideoStudioMappingDo {
	return v.withDO(v.DO.Debug())
}

func (v videoStudioMappingDo) WithContext(ctx context.Context) IVideoStudioMappingDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v videoStudioMappingDo) ReadDB() IVideoStudioMappingDo {
	return v.Clauses(dbresolver.Read)
}

func (v videoStudioMappingDo) WriteDB() IVideoStudioMappingDo {
	return v.Clauses(dbresolver.Write)
}

func (v videoStudioMappingDo) Session(config *gorm.Session) IVideoStudioMappingDo {
	return v.withDO(v.DO.Session(config))
}

func (v videoStudioMappingDo) Clauses(conds ...clause.Expression) IVideoStudioMappingDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v videoStudioMappingDo) Returning(value interface{}, columns ...string) IVideoStudioMappingDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v videoStudioMappingDo) Not(conds ...gen.Condition) IVideoStudioMappingDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v videoStudioMappingDo) Or(conds ...gen.Condition) IVideoStudioMappingDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v videoStudioMappingDo) Select(conds ...field.Expr) IVideoStudioMappingDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v videoStudioMappingDo) Where(conds ...gen.Condition) IVideoStudioMappingDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v videoStudioMappingDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IVideoStudioMappingDo {
	return v.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (v videoStudioMappingDo) Order(conds ...field.Expr) IVideoStudioMappingDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v videoStudioMappingDo) Distinct(cols ...field.Expr) IVideoStudioMappingDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v videoStudioMappingDo) Omit(cols ...field.Expr) IVideoStudioMappingDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v videoStudioMappingDo) Join(table schema.Tabler, on ...field.Expr) IVideoStudioMappingDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v videoStudioMappingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVideoStudioMappingDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v videoStudioMappingDo) RightJoin(table schema.Tabler, on ...field.Expr) IVideoStudioMappingDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v videoStudioMappingDo) Group(cols ...field.Expr) IVideoStudioMappingDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v videoStudioMappingDo) Having(conds ...gen.Condition) IVideoStudioMappingDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v videoStudioMappingDo) Limit(limit int) IVideoStudioMappingDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v videoStudioMappingDo) Offset(offset int) IVideoStudioMappingDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v videoStudioMappingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVideoStudioMappingDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v videoStudioMappingDo) Unscoped() IVideoStudioMappingDo {
	return v.withDO(v.DO.Unscoped())
}

func (v videoStudioMappingDo) Create(values ...*model.VideoStudioMapping) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v videoStudioMappingDo) CreateInBatches(values []*model.VideoStudioMapping, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v videoStudioMappingDo) Save(values ...*model.VideoStudioMapping) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v videoStudioMappingDo) First() (*model.VideoStudioMapping, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoStudioMapping), nil
	}
}

func (v videoStudioMappingDo) Take() (*model.VideoStudioMapping, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoStudioMapping), nil
	}
}

func (v videoStudioMappingDo) Last() (*model.VideoStudioMapping, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoStudioMapping), nil
	}
}

func (v videoStudioMappingDo) Find() ([]*model.VideoStudioMapping, error) {
	result, err := v.DO.Find()
	return result.([]*model.VideoStudioMapping), err
}

func (v videoStudioMappingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VideoStudioMapping, err error) {
	buf := make([]*model.VideoStudioMapping, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v videoStudioMappingDo) FindInBatches(result *[]*model.VideoStudioMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v videoStudioMappingDo) Attrs(attrs ...field.AssignExpr) IVideoStudioMappingDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v videoStudioMappingDo) Assign(attrs ...field.AssignExpr) IVideoStudioMappingDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v videoStudioMappingDo) Joins(fields ...field.RelationField) IVideoStudioMappingDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v videoStudioMappingDo) Preload(fields ...field.RelationField) IVideoStudioMappingDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v videoStudioMappingDo) FirstOrInit() (*model.VideoStudioMapping, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoStudioMapping), nil
	}
}

func (v videoStudioMappingDo) FirstOrCreate() (*model.VideoStudioMapping, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoStudioMapping), nil
	}
}

func (v videoStudioMappingDo) FindByPage(offset int, limit int) (result []*model.VideoStudioMapping, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v videoStudioMappingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v videoStudioMappingDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v videoStudioMappingDo) Delete(models ...*model.VideoStudioMapping) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *videoStudioMappingDo) withDO(do gen.Dao) *videoStudioMappingDo {
	v.DO = *do.(*gen.DO)
	return v
}
