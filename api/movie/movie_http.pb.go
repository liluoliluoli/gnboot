// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.1
// - protoc             v5.28.3
// source: proto/movie.proto

package movie

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	api "github.com/liluoliluoli/gnboot/api"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationMovieRemoteServiceCreateMovie = "/gnboot.MovieRemoteService/CreateMovie"
const OperationMovieRemoteServiceDeleteMovie = "/gnboot.MovieRemoteService/DeleteMovie"
const OperationMovieRemoteServiceFilterMovie = "/gnboot.MovieRemoteService/FilterMovie"
const OperationMovieRemoteServiceFindMovie = "/gnboot.MovieRemoteService/FindMovie"
const OperationMovieRemoteServiceGetMovie = "/gnboot.MovieRemoteService/GetMovie"
const OperationMovieRemoteServiceNextToPlayMovies = "/gnboot.MovieRemoteService/NextToPlayMovies"
const OperationMovieRemoteServiceUpdateMovie = "/gnboot.MovieRemoteService/UpdateMovie"

type MovieRemoteServiceHTTPServer interface {
	// CreateMovie create one Movie record
	CreateMovie(context.Context, *CreateMovieRequest) (*emptypb.Empty, error)
	DeleteMovie(context.Context, *api.IdsRequest) (*emptypb.Empty, error)
	FilterMovie(context.Context, *FilterMovieRequest) (*SearchMovieResp, error)
	FindMovie(context.Context, *FindMovieRequest) (*SearchMovieResp, error)
	GetMovie(context.Context, *GetMovieRequest) (*MovieResp, error)
	NextToPlayMovies(context.Context, *NextToPlayMoviesRequest) (*SearchMovieResp, error)
	UpdateMovie(context.Context, *UpdateMovieRequest) (*emptypb.Empty, error)
}

func RegisterMovieRemoteServiceHTTPServer(s *http.Server, srv MovieRemoteServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/movie/create", _MovieRemoteService_CreateMovie0_HTTP_Handler(srv))
	r.GET("/movie/query/id", _MovieRemoteService_GetMovie0_HTTP_Handler(srv))
	r.POST("/movie/query/all", _MovieRemoteService_FindMovie0_HTTP_Handler(srv))
	r.POST("/movie/query/filter", _MovieRemoteService_FilterMovie0_HTTP_Handler(srv))
	r.POST("/movie/nextToPlay/query/all", _MovieRemoteService_NextToPlayMovies0_HTTP_Handler(srv))
	r.PATCH("/movie/update", _MovieRemoteService_UpdateMovie0_HTTP_Handler(srv))
	r.PUT("/movie/update", _MovieRemoteService_UpdateMovie1_HTTP_Handler(srv))
	r.DELETE("/movie/delete", _MovieRemoteService_DeleteMovie0_HTTP_Handler(srv))
}

func _MovieRemoteService_CreateMovie0_HTTP_Handler(srv MovieRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateMovieRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMovieRemoteServiceCreateMovie)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateMovie(ctx, req.(*CreateMovieRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _MovieRemoteService_GetMovie0_HTTP_Handler(srv MovieRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMovieRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMovieRemoteServiceGetMovie)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMovie(ctx, req.(*GetMovieRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MovieResp)
		return ctx.Result(200, reply)
	}
}

func _MovieRemoteService_FindMovie0_HTTP_Handler(srv MovieRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FindMovieRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMovieRemoteServiceFindMovie)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FindMovie(ctx, req.(*FindMovieRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchMovieResp)
		return ctx.Result(200, reply)
	}
}

func _MovieRemoteService_FilterMovie0_HTTP_Handler(srv MovieRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FilterMovieRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMovieRemoteServiceFilterMovie)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FilterMovie(ctx, req.(*FilterMovieRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchMovieResp)
		return ctx.Result(200, reply)
	}
}

func _MovieRemoteService_NextToPlayMovies0_HTTP_Handler(srv MovieRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NextToPlayMoviesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMovieRemoteServiceNextToPlayMovies)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.NextToPlayMovies(ctx, req.(*NextToPlayMoviesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchMovieResp)
		return ctx.Result(200, reply)
	}
}

func _MovieRemoteService_UpdateMovie0_HTTP_Handler(srv MovieRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateMovieRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMovieRemoteServiceUpdateMovie)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateMovie(ctx, req.(*UpdateMovieRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _MovieRemoteService_UpdateMovie1_HTTP_Handler(srv MovieRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateMovieRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMovieRemoteServiceUpdateMovie)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateMovie(ctx, req.(*UpdateMovieRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _MovieRemoteService_DeleteMovie0_HTTP_Handler(srv MovieRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in api.IdsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMovieRemoteServiceDeleteMovie)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteMovie(ctx, req.(*api.IdsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type MovieRemoteServiceHTTPClient interface {
	CreateMovie(ctx context.Context, req *CreateMovieRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteMovie(ctx context.Context, req *api.IdsRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	FilterMovie(ctx context.Context, req *FilterMovieRequest, opts ...http.CallOption) (rsp *SearchMovieResp, err error)
	FindMovie(ctx context.Context, req *FindMovieRequest, opts ...http.CallOption) (rsp *SearchMovieResp, err error)
	GetMovie(ctx context.Context, req *GetMovieRequest, opts ...http.CallOption) (rsp *MovieResp, err error)
	NextToPlayMovies(ctx context.Context, req *NextToPlayMoviesRequest, opts ...http.CallOption) (rsp *SearchMovieResp, err error)
	UpdateMovie(ctx context.Context, req *UpdateMovieRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type MovieRemoteServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewMovieRemoteServiceHTTPClient(client *http.Client) MovieRemoteServiceHTTPClient {
	return &MovieRemoteServiceHTTPClientImpl{client}
}

func (c *MovieRemoteServiceHTTPClientImpl) CreateMovie(ctx context.Context, in *CreateMovieRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/movie/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMovieRemoteServiceCreateMovie))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MovieRemoteServiceHTTPClientImpl) DeleteMovie(ctx context.Context, in *api.IdsRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/movie/delete"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMovieRemoteServiceDeleteMovie))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MovieRemoteServiceHTTPClientImpl) FilterMovie(ctx context.Context, in *FilterMovieRequest, opts ...http.CallOption) (*SearchMovieResp, error) {
	var out SearchMovieResp
	pattern := "/movie/query/filter"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMovieRemoteServiceFilterMovie))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MovieRemoteServiceHTTPClientImpl) FindMovie(ctx context.Context, in *FindMovieRequest, opts ...http.CallOption) (*SearchMovieResp, error) {
	var out SearchMovieResp
	pattern := "/movie/query/all"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMovieRemoteServiceFindMovie))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MovieRemoteServiceHTTPClientImpl) GetMovie(ctx context.Context, in *GetMovieRequest, opts ...http.CallOption) (*MovieResp, error) {
	var out MovieResp
	pattern := "/movie/query/id"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMovieRemoteServiceGetMovie))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MovieRemoteServiceHTTPClientImpl) NextToPlayMovies(ctx context.Context, in *NextToPlayMoviesRequest, opts ...http.CallOption) (*SearchMovieResp, error) {
	var out SearchMovieResp
	pattern := "/movie/nextToPlay/query/all"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMovieRemoteServiceNextToPlayMovies))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MovieRemoteServiceHTTPClientImpl) UpdateMovie(ctx context.Context, in *UpdateMovieRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/movie/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMovieRemoteServiceUpdateMovie))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
