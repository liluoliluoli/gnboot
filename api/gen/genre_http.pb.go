// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.1
// - protoc             (unknown)
// source: genre.proto

package gen

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGenreRemoteServiceFindGenre = "/gnboot.GenreRemoteService/FindGenre"

type GenreRemoteServiceHTTPServer interface {
	FindGenre(context.Context, *FindGenreRequest) (*FindGenreResp, error)
}

func RegisterGenreRemoteServiceHTTPServer(s *http.Server, srv GenreRemoteServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/genre/query/all", _GenreRemoteService_FindGenre1_HTTP_Handler(srv))
}

func _GenreRemoteService_FindGenre1_HTTP_Handler(srv GenreRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FindGenreRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGenreRemoteServiceFindGenre)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FindGenre(ctx, req.(*FindGenreRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FindGenreResp)
		return ctx.Result(200, reply)
	}
}

type GenreRemoteServiceHTTPClient interface {
	FindGenre(ctx context.Context, req *FindGenreRequest, opts ...http.CallOption) (rsp *FindGenreResp, err error)
}

type GenreRemoteServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewGenreRemoteServiceHTTPClient(client *http.Client) GenreRemoteServiceHTTPClient {
	return &GenreRemoteServiceHTTPClientImpl{client}
}

func (c *GenreRemoteServiceHTTPClientImpl) FindGenre(ctx context.Context, in *FindGenreRequest, opts ...http.CallOption) (*FindGenreResp, error) {
	var out FindGenreResp
	pattern := "/genre/query/all"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGenreRemoteServiceFindGenre))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
