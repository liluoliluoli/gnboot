// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: proto/keyword.proto

package keyword

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KeywordRemoteService_FindGenre_FullMethodName = "/gnboot.KeywordRemoteService/FindGenre"
)

// KeywordRemoteServiceClient is the client API for KeywordRemoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeywordRemoteServiceClient interface {
	FindGenre(ctx context.Context, in *FindKeywordRequest, opts ...grpc.CallOption) (*FindKeywordResp, error)
}

type keywordRemoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeywordRemoteServiceClient(cc grpc.ClientConnInterface) KeywordRemoteServiceClient {
	return &keywordRemoteServiceClient{cc}
}

func (c *keywordRemoteServiceClient) FindGenre(ctx context.Context, in *FindKeywordRequest, opts ...grpc.CallOption) (*FindKeywordResp, error) {
	out := new(FindKeywordResp)
	err := c.cc.Invoke(ctx, KeywordRemoteService_FindGenre_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeywordRemoteServiceServer is the server API for KeywordRemoteService service.
// All implementations must embed UnimplementedKeywordRemoteServiceServer
// for forward compatibility
type KeywordRemoteServiceServer interface {
	FindGenre(context.Context, *FindKeywordRequest) (*FindKeywordResp, error)
	mustEmbedUnimplementedKeywordRemoteServiceServer()
}

// UnimplementedKeywordRemoteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKeywordRemoteServiceServer struct {
}

func (UnimplementedKeywordRemoteServiceServer) FindGenre(context.Context, *FindKeywordRequest) (*FindKeywordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindGenre not implemented")
}
func (UnimplementedKeywordRemoteServiceServer) mustEmbedUnimplementedKeywordRemoteServiceServer() {}

// UnsafeKeywordRemoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeywordRemoteServiceServer will
// result in compilation errors.
type UnsafeKeywordRemoteServiceServer interface {
	mustEmbedUnimplementedKeywordRemoteServiceServer()
}

func RegisterKeywordRemoteServiceServer(s grpc.ServiceRegistrar, srv KeywordRemoteServiceServer) {
	s.RegisterService(&KeywordRemoteService_ServiceDesc, srv)
}

func _KeywordRemoteService_FindGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindKeywordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeywordRemoteServiceServer).FindGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeywordRemoteService_FindGenre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeywordRemoteServiceServer).FindGenre(ctx, req.(*FindKeywordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeywordRemoteService_ServiceDesc is the grpc.ServiceDesc for KeywordRemoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeywordRemoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnboot.KeywordRemoteService",
	HandlerType: (*KeywordRemoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindGenre",
			Handler:    _KeywordRemoteService_FindGenre_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/keyword.proto",
}
