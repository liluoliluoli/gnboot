// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	"gnboot/internal/repo/model"
)

func newEpisode(db *gorm.DB, opts ...gen.DOOption) episode {
	_episode := episode{}

	_episode.episodeDo.UseDB(db, opts...)
	_episode.episodeDo.UseModel(&model.Episode{})

	tableName := _episode.episodeDo.TableName()
	_episode.ALL = field.NewAsterisk(tableName)
	_episode.ID = field.NewUint64(tableName, "id")
	_episode.SeasonID = field.NewInt64(tableName, "season_id")
	_episode.Episode = field.NewInt32(tableName, "episode")
	_episode.SkipIntro = field.NewInt64(tableName, "skip_intro")
	_episode.SkipEnding = field.NewInt64(tableName, "skip_ending")
	_episode.URL = field.NewString(tableName, "url")
	_episode.Downloaded = field.NewInt32(tableName, "downloaded")
	_episode.Ext = field.NewString(tableName, "ext")
	_episode.FileSize = field.NewInt64(tableName, "file_size")

	_episode.fillFieldMap()

	return _episode
}

// episode 集
type episode struct {
	episodeDo episodeDo

	ALL        field.Asterisk
	ID         field.Uint64 // 主键
	SeasonID   field.Int64  // 季id
	Episode    field.Int32  // 第几集
	SkipIntro  field.Int64  // 片头跳过秒数
	SkipEnding field.Int64  // 片尾跳过秒数
	URL        field.String // 影片地址
	Downloaded field.Int32  // 是否能下载
	Ext        field.String // 扩展参数
	FileSize   field.Int64  // 文件大小

	fieldMap map[string]field.Expr
}

func (e episode) Table(newTableName string) *episode {
	e.episodeDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e episode) As(alias string) *episode {
	e.episodeDo.DO = *(e.episodeDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *episode) updateTableName(table string) *episode {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewUint64(table, "id")
	e.SeasonID = field.NewInt64(table, "season_id")
	e.Episode = field.NewInt32(table, "episode")
	e.SkipIntro = field.NewInt64(table, "skip_intro")
	e.SkipEnding = field.NewInt64(table, "skip_ending")
	e.URL = field.NewString(table, "url")
	e.Downloaded = field.NewInt32(table, "downloaded")
	e.Ext = field.NewString(table, "ext")
	e.FileSize = field.NewInt64(table, "file_size")

	e.fillFieldMap()

	return e
}

func (e *episode) WithContext(ctx context.Context) *episodeDo { return e.episodeDo.WithContext(ctx) }

func (e episode) TableName() string { return e.episodeDo.TableName() }

func (e episode) Alias() string { return e.episodeDo.Alias() }

func (e episode) Columns(cols ...field.Expr) gen.Columns { return e.episodeDo.Columns(cols...) }

func (e *episode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *episode) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 9)
	e.fieldMap["id"] = e.ID
	e.fieldMap["season_id"] = e.SeasonID
	e.fieldMap["episode"] = e.Episode
	e.fieldMap["skip_intro"] = e.SkipIntro
	e.fieldMap["skip_ending"] = e.SkipEnding
	e.fieldMap["url"] = e.URL
	e.fieldMap["downloaded"] = e.Downloaded
	e.fieldMap["ext"] = e.Ext
	e.fieldMap["file_size"] = e.FileSize
}

func (e episode) clone(db *gorm.DB) episode {
	e.episodeDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e episode) replaceDB(db *gorm.DB) episode {
	e.episodeDo.ReplaceDB(db)
	return e
}

type episodeDo struct{ gen.DO }

// SELECT * FROM `@@table` WHERE `id` = @id LIMIT 1
func (e episodeDo) GetByID(id uint64) (result model.Episode) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM `episode` WHERE `id` = ? LIMIT 1 ")

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	_ = executeSQL

	return
}

// SELECT * FROM `@@table`
// {{where}}
//
//	{{if val != ""}}
//	  {{if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%")}}
//	    @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val), '%')
//	  {{else if strings.HasPrefix(val, "%")}}
//	    @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val))
//	  {{else if strings.HasSuffix(val, "%")}}
//	    @@col LIKE CONCAT(TRIM(BOTH '%' FROM @val), '%')
//	  {{else}}
//	    @@col = @val
//	  {{end}}
//	{{end}}
//
// {{end}}
// LIMIT 1
func (e episodeDo) GetByCol(col string, val string) (result model.Episode) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM `episode` ")
	var whereSQL0 strings.Builder
	if val != "" {
		if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(e.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?), '%') ")
		} else if strings.HasPrefix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(e.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?)) ")
		} else if strings.HasSuffix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(e.Quote(col) + " LIKE CONCAT(TRIM(BOTH '%' FROM ?), '%') ")
		} else {
			params = append(params, val)
			whereSQL0.WriteString(e.Quote(col) + " = ? ")
		}
	}
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString("LIMIT 1 ")

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	_ = executeSQL

	return
}

// SELECT * FROM `@@table`
// {{if len(cols) == len(vals)}}
// {{where}}
//
//	  {{for i, col := range cols}}
//	    {{for j, val := range vals}}
//	      {{if i == j}}
//	        {{if val != ""}}
//	          {{if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%")}}
//	            @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val), '%') AND
//	          {{else if strings.HasPrefix(val, "%")}}
//	            @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val)) AND
//	          {{else if strings.HasSuffix(val, "%")}}
//	            @@col LIKE CONCAT(TRIM(BOTH '%' FROM @val), '%') AND
//	          {{else}}
//	            @@col = @val AND
//	          {{end}}
//	        {{end}}
//	      {{end}}
//	    {{end}}
//	  {{end}}
//	{{end}}
//
// {{end}}
// LIMIT 1
func (e episodeDo) GetByCols(cols []string, vals []string) (result model.Episode) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM `episode` ")
	if len(cols) == len(vals) {
		var whereSQL0 strings.Builder
		for i, col := range cols {
			for j, val := range vals {
				if i == j {
					if val != "" {
						if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(e.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?), '%') AND ")
						} else if strings.HasPrefix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(e.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?)) AND ")
						} else if strings.HasSuffix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(e.Quote(col) + " LIKE CONCAT(TRIM(BOTH '%' FROM ?), '%') AND ")
						} else {
							params = append(params, val)
							whereSQL0.WriteString(e.Quote(col) + " = ? AND ")
						}
					}
				}
			}
		}
		helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	}
	generateSQL.WriteString("LIMIT 1 ")

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	_ = executeSQL

	return
}

// SELECT * FROM `@@table`
// {{where}}
//
//	{{if val != ""}}
//	  {{if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%")}}
//	    @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val), '%')
//	  {{else if strings.HasPrefix(val, "%")}}
//	    @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val))
//	  {{else if strings.HasSuffix(val, "%")}}
//	    @@col LIKE CONCAT(TRIM(BOTH '%' FROM @val), '%')
//	  {{else}}
//	    @@col = @val
//	  {{end}}
//	{{end}}
//
// {{end}}
func (e episodeDo) FindByCol(col string, val string) (result []model.Episode) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM `episode` ")
	var whereSQL0 strings.Builder
	if val != "" {
		if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(e.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?), '%') ")
		} else if strings.HasPrefix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(e.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?)) ")
		} else if strings.HasSuffix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(e.Quote(col) + " LIKE CONCAT(TRIM(BOTH '%' FROM ?), '%') ")
		} else {
			params = append(params, val)
			whereSQL0.WriteString(e.Quote(col) + " = ? ")
		}
	}
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	_ = executeSQL

	return
}

// SELECT * FROM `@@table`
// {{if len(cols) == len(vals)}}
// {{where}}
//
//	  {{for i, col := range cols}}
//	    {{for j, val := range vals}}
//	      {{if i == j}}
//	        {{if val != ""}}
//	          {{if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%")}}
//	            @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val), '%') AND
//	          {{else if strings.HasPrefix(val, "%")}}
//	            @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val)) AND
//	          {{else if strings.HasSuffix(val, "%")}}
//	            @@col LIKE CONCAT(TRIM(BOTH '%' FROM @val), '%') AND
//	          {{else}}
//	            @@col = @val AND
//	          {{end}}
//	        {{end}}
//	      {{end}}
//	    {{end}}
//	  {{end}}
//	{{end}}
//
// {{end}}
func (e episodeDo) FindByCols(cols []string, vals []string) (result []model.Episode) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM `episode` ")
	if len(cols) == len(vals) {
		var whereSQL0 strings.Builder
		for i, col := range cols {
			for j, val := range vals {
				if i == j {
					if val != "" {
						if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(e.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?), '%') AND ")
						} else if strings.HasPrefix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(e.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?)) AND ")
						} else if strings.HasSuffix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(e.Quote(col) + " LIKE CONCAT(TRIM(BOTH '%' FROM ?), '%') AND ")
						} else {
							params = append(params, val)
							whereSQL0.WriteString(e.Quote(col) + " = ? AND ")
						}
					}
				}
			}
		}
		helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	}

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	_ = executeSQL

	return
}

func (e episodeDo) Debug() *episodeDo {
	return e.withDO(e.DO.Debug())
}

func (e episodeDo) WithContext(ctx context.Context) *episodeDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e episodeDo) ReadDB() *episodeDo {
	return e.Clauses(dbresolver.Read)
}

func (e episodeDo) WriteDB() *episodeDo {
	return e.Clauses(dbresolver.Write)
}

func (e episodeDo) Session(config *gorm.Session) *episodeDo {
	return e.withDO(e.DO.Session(config))
}

func (e episodeDo) Clauses(conds ...clause.Expression) *episodeDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e episodeDo) Returning(value interface{}, columns ...string) *episodeDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e episodeDo) Not(conds ...gen.Condition) *episodeDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e episodeDo) Or(conds ...gen.Condition) *episodeDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e episodeDo) Select(conds ...field.Expr) *episodeDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e episodeDo) Where(conds ...gen.Condition) *episodeDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e episodeDo) Order(conds ...field.Expr) *episodeDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e episodeDo) Distinct(cols ...field.Expr) *episodeDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e episodeDo) Omit(cols ...field.Expr) *episodeDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e episodeDo) Join(table schema.Tabler, on ...field.Expr) *episodeDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e episodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *episodeDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e episodeDo) RightJoin(table schema.Tabler, on ...field.Expr) *episodeDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e episodeDo) Group(cols ...field.Expr) *episodeDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e episodeDo) Having(conds ...gen.Condition) *episodeDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e episodeDo) Limit(limit int) *episodeDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e episodeDo) Offset(offset int) *episodeDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e episodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *episodeDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e episodeDo) Unscoped() *episodeDo {
	return e.withDO(e.DO.Unscoped())
}

func (e episodeDo) Create(values ...*model.Episode) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e episodeDo) CreateInBatches(values []*model.Episode, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e episodeDo) Save(values ...*model.Episode) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e episodeDo) First() (*model.Episode, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Episode), nil
	}
}

func (e episodeDo) Take() (*model.Episode, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Episode), nil
	}
}

func (e episodeDo) Last() (*model.Episode, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Episode), nil
	}
}

func (e episodeDo) Find() ([]*model.Episode, error) {
	result, err := e.DO.Find()
	return result.([]*model.Episode), err
}

func (e episodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Episode, err error) {
	buf := make([]*model.Episode, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e episodeDo) FindInBatches(result *[]*model.Episode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e episodeDo) Attrs(attrs ...field.AssignExpr) *episodeDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e episodeDo) Assign(attrs ...field.AssignExpr) *episodeDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e episodeDo) Joins(fields ...field.RelationField) *episodeDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e episodeDo) Preload(fields ...field.RelationField) *episodeDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e episodeDo) FirstOrInit() (*model.Episode, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Episode), nil
	}
}

func (e episodeDo) FirstOrCreate() (*model.Episode, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Episode), nil
	}
}

func (e episodeDo) FindByPage(offset int, limit int) (result []*model.Episode, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e episodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e episodeDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e episodeDo) Delete(models ...*model.Episode) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *episodeDo) withDO(do gen.Dao) *episodeDo {
	e.DO = *do.(*gen.DO)
	return e
}
