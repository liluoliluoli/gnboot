// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: subtitle.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SubtitleRemoteService_FindGenre_FullMethodName = "/gnboot.SubtitleRemoteService/FindGenre"
)

// SubtitleRemoteServiceClient is the client API for SubtitleRemoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubtitleRemoteServiceClient interface {
	FindGenre(ctx context.Context, in *FindSubtitleRequest, opts ...grpc.CallOption) (*FindSubtitleResp, error)
}

type subtitleRemoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubtitleRemoteServiceClient(cc grpc.ClientConnInterface) SubtitleRemoteServiceClient {
	return &subtitleRemoteServiceClient{cc}
}

func (c *subtitleRemoteServiceClient) FindGenre(ctx context.Context, in *FindSubtitleRequest, opts ...grpc.CallOption) (*FindSubtitleResp, error) {
	out := new(FindSubtitleResp)
	err := c.cc.Invoke(ctx, SubtitleRemoteService_FindGenre_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubtitleRemoteServiceServer is the server API for SubtitleRemoteService service.
// All implementations should embed UnimplementedSubtitleRemoteServiceServer
// for forward compatibility
type SubtitleRemoteServiceServer interface {
	FindGenre(context.Context, *FindSubtitleRequest) (*FindSubtitleResp, error)
}

// UnimplementedSubtitleRemoteServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSubtitleRemoteServiceServer struct {
}

func (UnimplementedSubtitleRemoteServiceServer) FindGenre(context.Context, *FindSubtitleRequest) (*FindSubtitleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindGenre not implemented")
}

// UnsafeSubtitleRemoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubtitleRemoteServiceServer will
// result in compilation errors.
type UnsafeSubtitleRemoteServiceServer interface {
	mustEmbedUnimplementedSubtitleRemoteServiceServer()
}

func RegisterSubtitleRemoteServiceServer(s grpc.ServiceRegistrar, srv SubtitleRemoteServiceServer) {
	s.RegisterService(&SubtitleRemoteService_ServiceDesc, srv)
}

func _SubtitleRemoteService_FindGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSubtitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtitleRemoteServiceServer).FindGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubtitleRemoteService_FindGenre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtitleRemoteServiceServer).FindGenre(ctx, req.(*FindSubtitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubtitleRemoteService_ServiceDesc is the grpc.ServiceDesc for SubtitleRemoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubtitleRemoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnboot.SubtitleRemoteService",
	HandlerType: (*SubtitleRemoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindGenre",
			Handler:    _SubtitleRemoteService_FindGenre_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "subtitle.proto",
}
