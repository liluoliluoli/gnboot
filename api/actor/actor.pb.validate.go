// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/actor.proto

package actor

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ActorResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// gerror encountered is returned, or nil if there are no violations.
func (m *ActorResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActorResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ActorRespMultiError, or nil
// if none found.
func (m *ActorResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ActorResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for OriginalName

	// no validation rules for Adult

	// no validation rules for Gender

	// no validation rules for Character

	// no validation rules for Profile

	if len(errors) > 0 {
		return ActorRespMultiError(errors)
	}

	return nil
}

// ActorRespMultiError is an gerror wrapping multiple validation errors returned
// by ActorResp.ValidateAll() if the designated constraints aren't met.
type ActorRespMultiError []error

// Error returns a concatenation of all the gerror messages it wraps.
func (m ActorRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActorRespMultiError) AllErrors() []error { return m }

// ActorRespValidationError is the validation gerror returned by
// ActorResp.Validate if the designated constraints aren't met.
type ActorRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActorRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActorRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActorRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActorRespValidationError) Key() bool { return e.key }

// ErrorName returns gerror name.
func (e ActorRespValidationError) ErrorName() string { return "ActorRespValidationError" }

// Error satisfies the builtin gerror interface
func (e ActorRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActorResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActorRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActorRespValidationError{}

// Validate checks the field values on FindActorRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first gerror encountered is returned, or nil if there are no violations.
func (m *FindActorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindActorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindActorRequestMultiError, or nil if none found.
func (m *FindActorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindActorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindActorRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindActorRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindActorRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindActorRequestMultiError(errors)
	}

	return nil
}

// FindActorRequestMultiError is an gerror wrapping multiple validation errors
// returned by FindActorRequest.ValidateAll() if the designated constraints
// aren't met.
type FindActorRequestMultiError []error

// Error returns a concatenation of all the gerror messages it wraps.
func (m FindActorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindActorRequestMultiError) AllErrors() []error { return m }

// FindActorRequestValidationError is the validation gerror returned by
// FindActorRequest.Validate if the designated constraints aren't met.
type FindActorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindActorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindActorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindActorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindActorRequestValidationError) Key() bool { return e.key }

// ErrorName returns gerror name.
func (e FindActorRequestValidationError) ErrorName() string { return "FindActorRequestValidationError" }

// Error satisfies the builtin gerror interface
func (e FindActorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindActorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindActorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindActorRequestValidationError{}

// Validate checks the field values on FindActorResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// gerror encountered is returned, or nil if there are no violations.
func (m *FindActorResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindActorResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FindActorRespMultiError, or
// nil if none found.
func (m *FindActorResp) ValidateAll() error {
	return m.validate(true)
}

func (m *FindActorResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindActorRespValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindActorRespValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindActorRespValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindActorRespMultiError(errors)
	}

	return nil
}

// FindActorRespMultiError is an gerror wrapping multiple validation errors
// returned by FindActorResp.ValidateAll() if the designated constraints
// aren't met.
type FindActorRespMultiError []error

// Error returns a concatenation of all the gerror messages it wraps.
func (m FindActorRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindActorRespMultiError) AllErrors() []error { return m }

// FindActorRespValidationError is the validation gerror returned by
// FindActorResp.Validate if the designated constraints aren't met.
type FindActorRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindActorRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindActorRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindActorRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindActorRespValidationError) Key() bool { return e.key }

// ErrorName returns gerror name.
func (e FindActorRespValidationError) ErrorName() string { return "FindActorRespValidationError" }

// Error satisfies the builtin gerror interface
func (e FindActorRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindActorResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindActorRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindActorRespValidationError{}
