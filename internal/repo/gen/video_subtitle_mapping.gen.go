// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liluoliluoli/gnboot/internal/repo/model"
)

func newVideoSubtitleMapping(db *gorm.DB, opts ...gen.DOOption) videoSubtitleMapping {
	_videoSubtitleMapping := videoSubtitleMapping{}

	_videoSubtitleMapping.videoSubtitleMappingDo.UseDB(db, opts...)
	_videoSubtitleMapping.videoSubtitleMappingDo.UseModel(&model.VideoSubtitleMapping{})

	tableName := _videoSubtitleMapping.videoSubtitleMappingDo.TableName()
	_videoSubtitleMapping.ALL = field.NewAsterisk(tableName)
	_videoSubtitleMapping.ID = field.NewInt64(tableName, "id")
	_videoSubtitleMapping.VideoType = field.NewString(tableName, "video_type")
	_videoSubtitleMapping.VideoID = field.NewInt64(tableName, "video_id")
	_videoSubtitleMapping.URL = field.NewString(tableName, "url")
	_videoSubtitleMapping.Title = field.NewString(tableName, "title")
	_videoSubtitleMapping.Language = field.NewString(tableName, "language")
	_videoSubtitleMapping.MimeType = field.NewString(tableName, "mime_type")
	_videoSubtitleMapping.CreateTime = field.NewTime(tableName, "create_time")
	_videoSubtitleMapping.UpdateTime = field.NewTime(tableName, "update_time")

	_videoSubtitleMapping.fillFieldMap()

	return _videoSubtitleMapping
}

type videoSubtitleMapping struct {
	videoSubtitleMappingDo videoSubtitleMappingDo

	ALL        field.Asterisk
	ID         field.Int64  // 主键
	VideoType  field.String // 影片类型，movie,series,season,episode
	VideoID    field.Int64  // 影片id，根据video_type类型分别来自movie,series,season,episode表
	URL        field.String // 字幕地址
	Title      field.String // 字幕标题
	Language   field.String // 字幕语言
	MimeType   field.String // 字幕格式
	CreateTime field.Time
	UpdateTime field.Time

	fieldMap map[string]field.Expr
}

func (v videoSubtitleMapping) Table(newTableName string) *videoSubtitleMapping {
	v.videoSubtitleMappingDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v videoSubtitleMapping) As(alias string) *videoSubtitleMapping {
	v.videoSubtitleMappingDo.DO = *(v.videoSubtitleMappingDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *videoSubtitleMapping) updateTableName(table string) *videoSubtitleMapping {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewInt64(table, "id")
	v.VideoType = field.NewString(table, "video_type")
	v.VideoID = field.NewInt64(table, "video_id")
	v.URL = field.NewString(table, "url")
	v.Title = field.NewString(table, "title")
	v.Language = field.NewString(table, "language")
	v.MimeType = field.NewString(table, "mime_type")
	v.CreateTime = field.NewTime(table, "create_time")
	v.UpdateTime = field.NewTime(table, "update_time")

	v.fillFieldMap()

	return v
}

func (v *videoSubtitleMapping) WithContext(ctx context.Context) IVideoSubtitleMappingDo {
	return v.videoSubtitleMappingDo.WithContext(ctx)
}

func (v videoSubtitleMapping) TableName() string { return v.videoSubtitleMappingDo.TableName() }

func (v videoSubtitleMapping) Alias() string { return v.videoSubtitleMappingDo.Alias() }

func (v *videoSubtitleMapping) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *videoSubtitleMapping) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 9)
	v.fieldMap["id"] = v.ID
	v.fieldMap["video_type"] = v.VideoType
	v.fieldMap["video_id"] = v.VideoID
	v.fieldMap["url"] = v.URL
	v.fieldMap["title"] = v.Title
	v.fieldMap["language"] = v.Language
	v.fieldMap["mime_type"] = v.MimeType
	v.fieldMap["create_time"] = v.CreateTime
	v.fieldMap["update_time"] = v.UpdateTime
}

func (v videoSubtitleMapping) clone(db *gorm.DB) videoSubtitleMapping {
	v.videoSubtitleMappingDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v videoSubtitleMapping) replaceDB(db *gorm.DB) videoSubtitleMapping {
	v.videoSubtitleMappingDo.ReplaceDB(db)
	return v
}

type videoSubtitleMappingDo struct{ gen.DO }

type IVideoSubtitleMappingDo interface {
	gen.SubQuery
	Debug() IVideoSubtitleMappingDo
	WithContext(ctx context.Context) IVideoSubtitleMappingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVideoSubtitleMappingDo
	WriteDB() IVideoSubtitleMappingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVideoSubtitleMappingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVideoSubtitleMappingDo
	Not(conds ...gen.Condition) IVideoSubtitleMappingDo
	Or(conds ...gen.Condition) IVideoSubtitleMappingDo
	Select(conds ...field.Expr) IVideoSubtitleMappingDo
	Where(conds ...gen.Condition) IVideoSubtitleMappingDo
	Order(conds ...field.Expr) IVideoSubtitleMappingDo
	Distinct(cols ...field.Expr) IVideoSubtitleMappingDo
	Omit(cols ...field.Expr) IVideoSubtitleMappingDo
	Join(table schema.Tabler, on ...field.Expr) IVideoSubtitleMappingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVideoSubtitleMappingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVideoSubtitleMappingDo
	Group(cols ...field.Expr) IVideoSubtitleMappingDo
	Having(conds ...gen.Condition) IVideoSubtitleMappingDo
	Limit(limit int) IVideoSubtitleMappingDo
	Offset(offset int) IVideoSubtitleMappingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVideoSubtitleMappingDo
	Unscoped() IVideoSubtitleMappingDo
	Create(values ...*model.VideoSubtitleMapping) error
	CreateInBatches(values []*model.VideoSubtitleMapping, batchSize int) error
	Save(values ...*model.VideoSubtitleMapping) error
	First() (*model.VideoSubtitleMapping, error)
	Take() (*model.VideoSubtitleMapping, error)
	Last() (*model.VideoSubtitleMapping, error)
	Find() ([]*model.VideoSubtitleMapping, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VideoSubtitleMapping, err error)
	FindInBatches(result *[]*model.VideoSubtitleMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.VideoSubtitleMapping) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVideoSubtitleMappingDo
	Assign(attrs ...field.AssignExpr) IVideoSubtitleMappingDo
	Joins(fields ...field.RelationField) IVideoSubtitleMappingDo
	Preload(fields ...field.RelationField) IVideoSubtitleMappingDo
	FirstOrInit() (*model.VideoSubtitleMapping, error)
	FirstOrCreate() (*model.VideoSubtitleMapping, error)
	FindByPage(offset int, limit int) (result []*model.VideoSubtitleMapping, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVideoSubtitleMappingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	SelectByID(id int64) (result *model.VideoSubtitleMapping, err error)
}

// SELECT * FROM @@table WHERE id=@id
func (v videoSubtitleMappingDo) SelectByID(id int64) (result *model.VideoSubtitleMapping, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM video_subtitle_mapping WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = v.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (v videoSubtitleMappingDo) Debug() IVideoSubtitleMappingDo {
	return v.withDO(v.DO.Debug())
}

func (v videoSubtitleMappingDo) WithContext(ctx context.Context) IVideoSubtitleMappingDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v videoSubtitleMappingDo) ReadDB() IVideoSubtitleMappingDo {
	return v.Clauses(dbresolver.Read)
}

func (v videoSubtitleMappingDo) WriteDB() IVideoSubtitleMappingDo {
	return v.Clauses(dbresolver.Write)
}

func (v videoSubtitleMappingDo) Session(config *gorm.Session) IVideoSubtitleMappingDo {
	return v.withDO(v.DO.Session(config))
}

func (v videoSubtitleMappingDo) Clauses(conds ...clause.Expression) IVideoSubtitleMappingDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v videoSubtitleMappingDo) Returning(value interface{}, columns ...string) IVideoSubtitleMappingDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v videoSubtitleMappingDo) Not(conds ...gen.Condition) IVideoSubtitleMappingDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v videoSubtitleMappingDo) Or(conds ...gen.Condition) IVideoSubtitleMappingDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v videoSubtitleMappingDo) Select(conds ...field.Expr) IVideoSubtitleMappingDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v videoSubtitleMappingDo) Where(conds ...gen.Condition) IVideoSubtitleMappingDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v videoSubtitleMappingDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IVideoSubtitleMappingDo {
	return v.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (v videoSubtitleMappingDo) Order(conds ...field.Expr) IVideoSubtitleMappingDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v videoSubtitleMappingDo) Distinct(cols ...field.Expr) IVideoSubtitleMappingDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v videoSubtitleMappingDo) Omit(cols ...field.Expr) IVideoSubtitleMappingDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v videoSubtitleMappingDo) Join(table schema.Tabler, on ...field.Expr) IVideoSubtitleMappingDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v videoSubtitleMappingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVideoSubtitleMappingDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v videoSubtitleMappingDo) RightJoin(table schema.Tabler, on ...field.Expr) IVideoSubtitleMappingDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v videoSubtitleMappingDo) Group(cols ...field.Expr) IVideoSubtitleMappingDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v videoSubtitleMappingDo) Having(conds ...gen.Condition) IVideoSubtitleMappingDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v videoSubtitleMappingDo) Limit(limit int) IVideoSubtitleMappingDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v videoSubtitleMappingDo) Offset(offset int) IVideoSubtitleMappingDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v videoSubtitleMappingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVideoSubtitleMappingDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v videoSubtitleMappingDo) Unscoped() IVideoSubtitleMappingDo {
	return v.withDO(v.DO.Unscoped())
}

func (v videoSubtitleMappingDo) Create(values ...*model.VideoSubtitleMapping) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v videoSubtitleMappingDo) CreateInBatches(values []*model.VideoSubtitleMapping, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v videoSubtitleMappingDo) Save(values ...*model.VideoSubtitleMapping) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v videoSubtitleMappingDo) First() (*model.VideoSubtitleMapping, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoSubtitleMapping), nil
	}
}

func (v videoSubtitleMappingDo) Take() (*model.VideoSubtitleMapping, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoSubtitleMapping), nil
	}
}

func (v videoSubtitleMappingDo) Last() (*model.VideoSubtitleMapping, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoSubtitleMapping), nil
	}
}

func (v videoSubtitleMappingDo) Find() ([]*model.VideoSubtitleMapping, error) {
	result, err := v.DO.Find()
	return result.([]*model.VideoSubtitleMapping), err
}

func (v videoSubtitleMappingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VideoSubtitleMapping, err error) {
	buf := make([]*model.VideoSubtitleMapping, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v videoSubtitleMappingDo) FindInBatches(result *[]*model.VideoSubtitleMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v videoSubtitleMappingDo) Attrs(attrs ...field.AssignExpr) IVideoSubtitleMappingDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v videoSubtitleMappingDo) Assign(attrs ...field.AssignExpr) IVideoSubtitleMappingDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v videoSubtitleMappingDo) Joins(fields ...field.RelationField) IVideoSubtitleMappingDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v videoSubtitleMappingDo) Preload(fields ...field.RelationField) IVideoSubtitleMappingDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v videoSubtitleMappingDo) FirstOrInit() (*model.VideoSubtitleMapping, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoSubtitleMapping), nil
	}
}

func (v videoSubtitleMappingDo) FirstOrCreate() (*model.VideoSubtitleMapping, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoSubtitleMapping), nil
	}
}

func (v videoSubtitleMappingDo) FindByPage(offset int, limit int) (result []*model.VideoSubtitleMapping, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v videoSubtitleMappingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v videoSubtitleMappingDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v videoSubtitleMappingDo) Delete(models ...*model.VideoSubtitleMapping) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *videoSubtitleMappingDo) withDO(do gen.Dao) *videoSubtitleMappingDo {
	v.DO = *do.(*gen.DO)
	return v
}
