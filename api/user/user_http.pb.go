// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.1
// - protoc             v5.29.3
// source: proto/user.proto

package user

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserRemoteServiceCreate = "/gnboot.UserRemoteService/Create"
const OperationUserRemoteServiceGetCurrentWatchCount = "/gnboot.UserRemoteService/GetCurrentWatchCount"
const OperationUserRemoteServiceGetUser = "/gnboot.UserRemoteService/GetUser"
const OperationUserRemoteServiceLogin = "/gnboot.UserRemoteService/Login"
const OperationUserRemoteServiceLogout = "/gnboot.UserRemoteService/Logout"
const OperationUserRemoteServiceUpdateFavorite = "/gnboot.UserRemoteService/UpdateFavorite"
const OperationUserRemoteServiceUpdateNotice = "/gnboot.UserRemoteService/UpdateNotice"
const OperationUserRemoteServiceUpdatePackageType = "/gnboot.UserRemoteService/UpdatePackageType"
const OperationUserRemoteServiceUpdatePlayedStatus = "/gnboot.UserRemoteService/UpdatePlayedStatus"

type UserRemoteServiceHTTPServer interface {
	Create(context.Context, *CreateUserRequest) (*emptypb.Empty, error)
	GetCurrentWatchCount(context.Context, *GetCurrentWatchCountRequest) (*GetCurrentWatchCountResp, error)
	GetUser(context.Context, *GetUserRequest) (*User, error)
	Login(context.Context, *LoginUserRequest) (*LoginUserResp, error)
	Logout(context.Context, *LogoutUserRequest) (*LogoutUserResp, error)
	UpdateFavorite(context.Context, *UpdateFavoriteRequest) (*emptypb.Empty, error)
	UpdateNotice(context.Context, *UpdateNoticeRequest) (*emptypb.Empty, error)
	UpdatePackageType(context.Context, *UpdatePackageTypeRequest) (*emptypb.Empty, error)
	UpdatePlayedStatus(context.Context, *UpdatePlayedStatusRequest) (*emptypb.Empty, error)
}

func RegisterUserRemoteServiceHTTPServer(s *http.Server, srv UserRemoteServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/user/updateFavorite", _UserRemoteService_UpdateFavorite0_HTTP_Handler(srv))
	r.POST("/api/user/updatePlayedStatus", _UserRemoteService_UpdatePlayedStatus0_HTTP_Handler(srv))
	r.POST("/api/user/create", _UserRemoteService_Create0_HTTP_Handler(srv))
	r.POST("/api/user/login", _UserRemoteService_Login0_HTTP_Handler(srv))
	r.POST("/api/user/logout", _UserRemoteService_Logout0_HTTP_Handler(srv))
	r.POST("/api/user/getCurrentWatchCount", _UserRemoteService_GetCurrentWatchCount0_HTTP_Handler(srv))
	r.POST("/api/user/get", _UserRemoteService_GetUser0_HTTP_Handler(srv))
	r.POST("/api/test/notice/update", _UserRemoteService_UpdateNotice0_HTTP_Handler(srv))
	r.POST("/api/test/packageType/update", _UserRemoteService_UpdatePackageType0_HTTP_Handler(srv))
}

func _UserRemoteService_UpdateFavorite0_HTTP_Handler(srv UserRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateFavoriteRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserRemoteServiceUpdateFavorite)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateFavorite(ctx, req.(*UpdateFavoriteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _UserRemoteService_UpdatePlayedStatus0_HTTP_Handler(srv UserRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePlayedStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserRemoteServiceUpdatePlayedStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePlayedStatus(ctx, req.(*UpdatePlayedStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _UserRemoteService_Create0_HTTP_Handler(srv UserRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserRemoteServiceCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Create(ctx, req.(*CreateUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _UserRemoteService_Login0_HTTP_Handler(srv UserRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserRemoteServiceLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginUserResp)
		return ctx.Result(200, reply)
	}
}

func _UserRemoteService_Logout0_HTTP_Handler(srv UserRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LogoutUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserRemoteServiceLogout)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*LogoutUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogoutUserResp)
		return ctx.Result(200, reply)
	}
}

func _UserRemoteService_GetCurrentWatchCount0_HTTP_Handler(srv UserRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCurrentWatchCountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserRemoteServiceGetCurrentWatchCount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCurrentWatchCount(ctx, req.(*GetCurrentWatchCountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCurrentWatchCountResp)
		return ctx.Result(200, reply)
	}
}

func _UserRemoteService_GetUser0_HTTP_Handler(srv UserRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserRemoteServiceGetUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUser(ctx, req.(*GetUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*User)
		return ctx.Result(200, reply)
	}
}

func _UserRemoteService_UpdateNotice0_HTTP_Handler(srv UserRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateNoticeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserRemoteServiceUpdateNotice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateNotice(ctx, req.(*UpdateNoticeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _UserRemoteService_UpdatePackageType0_HTTP_Handler(srv UserRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePackageTypeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserRemoteServiceUpdatePackageType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePackageType(ctx, req.(*UpdatePackageTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type UserRemoteServiceHTTPClient interface {
	Create(ctx context.Context, req *CreateUserRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetCurrentWatchCount(ctx context.Context, req *GetCurrentWatchCountRequest, opts ...http.CallOption) (rsp *GetCurrentWatchCountResp, err error)
	GetUser(ctx context.Context, req *GetUserRequest, opts ...http.CallOption) (rsp *User, err error)
	Login(ctx context.Context, req *LoginUserRequest, opts ...http.CallOption) (rsp *LoginUserResp, err error)
	Logout(ctx context.Context, req *LogoutUserRequest, opts ...http.CallOption) (rsp *LogoutUserResp, err error)
	UpdateFavorite(ctx context.Context, req *UpdateFavoriteRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateNotice(ctx context.Context, req *UpdateNoticeRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdatePackageType(ctx context.Context, req *UpdatePackageTypeRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdatePlayedStatus(ctx context.Context, req *UpdatePlayedStatusRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type UserRemoteServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewUserRemoteServiceHTTPClient(client *http.Client) UserRemoteServiceHTTPClient {
	return &UserRemoteServiceHTTPClientImpl{client}
}

func (c *UserRemoteServiceHTTPClientImpl) Create(ctx context.Context, in *CreateUserRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/user/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserRemoteServiceCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserRemoteServiceHTTPClientImpl) GetCurrentWatchCount(ctx context.Context, in *GetCurrentWatchCountRequest, opts ...http.CallOption) (*GetCurrentWatchCountResp, error) {
	var out GetCurrentWatchCountResp
	pattern := "/api/user/getCurrentWatchCount"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserRemoteServiceGetCurrentWatchCount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserRemoteServiceHTTPClientImpl) GetUser(ctx context.Context, in *GetUserRequest, opts ...http.CallOption) (*User, error) {
	var out User
	pattern := "/api/user/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserRemoteServiceGetUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserRemoteServiceHTTPClientImpl) Login(ctx context.Context, in *LoginUserRequest, opts ...http.CallOption) (*LoginUserResp, error) {
	var out LoginUserResp
	pattern := "/api/user/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserRemoteServiceLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserRemoteServiceHTTPClientImpl) Logout(ctx context.Context, in *LogoutUserRequest, opts ...http.CallOption) (*LogoutUserResp, error) {
	var out LogoutUserResp
	pattern := "/api/user/logout"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserRemoteServiceLogout))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserRemoteServiceHTTPClientImpl) UpdateFavorite(ctx context.Context, in *UpdateFavoriteRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/user/updateFavorite"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserRemoteServiceUpdateFavorite))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserRemoteServiceHTTPClientImpl) UpdateNotice(ctx context.Context, in *UpdateNoticeRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/test/notice/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserRemoteServiceUpdateNotice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserRemoteServiceHTTPClientImpl) UpdatePackageType(ctx context.Context, in *UpdatePackageTypeRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/test/packageType/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserRemoteServiceUpdatePackageType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserRemoteServiceHTTPClientImpl) UpdatePlayedStatus(ctx context.Context, in *UpdatePlayedStatusRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/user/updatePlayedStatus"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserRemoteServiceUpdatePlayedStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
