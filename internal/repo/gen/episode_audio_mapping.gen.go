// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liluoliluoli/gnboot/internal/repo/model"
)

func newEpisodeAudioMapping(db *gorm.DB, opts ...gen.DOOption) episodeAudioMapping {
	_episodeAudioMapping := episodeAudioMapping{}

	_episodeAudioMapping.episodeAudioMappingDo.UseDB(db, opts...)
	_episodeAudioMapping.episodeAudioMappingDo.UseModel(&model.EpisodeAudioMapping{})

	tableName := _episodeAudioMapping.episodeAudioMappingDo.TableName()
	_episodeAudioMapping.ALL = field.NewAsterisk(tableName)
	_episodeAudioMapping.ID = field.NewInt64(tableName, "id")
	_episodeAudioMapping.EpisodeID = field.NewInt64(tableName, "episode_id")
	_episodeAudioMapping.URL = field.NewString(tableName, "url")
	_episodeAudioMapping.Title = field.NewString(tableName, "title")
	_episodeAudioMapping.Language = field.NewString(tableName, "language")
	_episodeAudioMapping.MimeType = field.NewString(tableName, "mime_type")

	_episodeAudioMapping.fillFieldMap()

	return _episodeAudioMapping
}

type episodeAudioMapping struct {
	episodeAudioMappingDo episodeAudioMappingDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键
	EpisodeID field.Int64  // 集id
	URL       field.String // 音频地址
	Title     field.String // 音频标题
	Language  field.String // 音频语言
	MimeType  field.String // 音频格式

	fieldMap map[string]field.Expr
}

func (e episodeAudioMapping) Table(newTableName string) *episodeAudioMapping {
	e.episodeAudioMappingDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e episodeAudioMapping) As(alias string) *episodeAudioMapping {
	e.episodeAudioMappingDo.DO = *(e.episodeAudioMappingDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *episodeAudioMapping) updateTableName(table string) *episodeAudioMapping {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.EpisodeID = field.NewInt64(table, "episode_id")
	e.URL = field.NewString(table, "url")
	e.Title = field.NewString(table, "title")
	e.Language = field.NewString(table, "language")
	e.MimeType = field.NewString(table, "mime_type")

	e.fillFieldMap()

	return e
}

func (e *episodeAudioMapping) WithContext(ctx context.Context) IEpisodeAudioMappingDo {
	return e.episodeAudioMappingDo.WithContext(ctx)
}

func (e episodeAudioMapping) TableName() string { return e.episodeAudioMappingDo.TableName() }

func (e episodeAudioMapping) Alias() string { return e.episodeAudioMappingDo.Alias() }

func (e *episodeAudioMapping) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *episodeAudioMapping) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 6)
	e.fieldMap["id"] = e.ID
	e.fieldMap["episode_id"] = e.EpisodeID
	e.fieldMap["url"] = e.URL
	e.fieldMap["title"] = e.Title
	e.fieldMap["language"] = e.Language
	e.fieldMap["mime_type"] = e.MimeType
}

func (e episodeAudioMapping) clone(db *gorm.DB) episodeAudioMapping {
	e.episodeAudioMappingDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e episodeAudioMapping) replaceDB(db *gorm.DB) episodeAudioMapping {
	e.episodeAudioMappingDo.ReplaceDB(db)
	return e
}

type episodeAudioMappingDo struct{ gen.DO }

type IEpisodeAudioMappingDo interface {
	gen.SubQuery
	Debug() IEpisodeAudioMappingDo
	WithContext(ctx context.Context) IEpisodeAudioMappingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEpisodeAudioMappingDo
	WriteDB() IEpisodeAudioMappingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEpisodeAudioMappingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEpisodeAudioMappingDo
	Not(conds ...gen.Condition) IEpisodeAudioMappingDo
	Or(conds ...gen.Condition) IEpisodeAudioMappingDo
	Select(conds ...field.Expr) IEpisodeAudioMappingDo
	Where(conds ...gen.Condition) IEpisodeAudioMappingDo
	Order(conds ...field.Expr) IEpisodeAudioMappingDo
	Distinct(cols ...field.Expr) IEpisodeAudioMappingDo
	Omit(cols ...field.Expr) IEpisodeAudioMappingDo
	Join(table schema.Tabler, on ...field.Expr) IEpisodeAudioMappingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEpisodeAudioMappingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEpisodeAudioMappingDo
	Group(cols ...field.Expr) IEpisodeAudioMappingDo
	Having(conds ...gen.Condition) IEpisodeAudioMappingDo
	Limit(limit int) IEpisodeAudioMappingDo
	Offset(offset int) IEpisodeAudioMappingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEpisodeAudioMappingDo
	Unscoped() IEpisodeAudioMappingDo
	Create(values ...*model.EpisodeAudioMapping) error
	CreateInBatches(values []*model.EpisodeAudioMapping, batchSize int) error
	Save(values ...*model.EpisodeAudioMapping) error
	First() (*model.EpisodeAudioMapping, error)
	Take() (*model.EpisodeAudioMapping, error)
	Last() (*model.EpisodeAudioMapping, error)
	Find() ([]*model.EpisodeAudioMapping, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EpisodeAudioMapping, err error)
	FindInBatches(result *[]*model.EpisodeAudioMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EpisodeAudioMapping) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEpisodeAudioMappingDo
	Assign(attrs ...field.AssignExpr) IEpisodeAudioMappingDo
	Joins(fields ...field.RelationField) IEpisodeAudioMappingDo
	Preload(fields ...field.RelationField) IEpisodeAudioMappingDo
	FirstOrInit() (*model.EpisodeAudioMapping, error)
	FirstOrCreate() (*model.EpisodeAudioMapping, error)
	FindByPage(offset int, limit int) (result []*model.EpisodeAudioMapping, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEpisodeAudioMappingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	SelectByID(id int64) (result *model.EpisodeAudioMapping, err error)
}

// SELECT * FROM @@table WHERE id=@id
func (e episodeAudioMappingDo) SelectByID(id int64) (result *model.EpisodeAudioMapping, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM episode_audio_mapping WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (e episodeAudioMappingDo) Debug() IEpisodeAudioMappingDo {
	return e.withDO(e.DO.Debug())
}

func (e episodeAudioMappingDo) WithContext(ctx context.Context) IEpisodeAudioMappingDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e episodeAudioMappingDo) ReadDB() IEpisodeAudioMappingDo {
	return e.Clauses(dbresolver.Read)
}

func (e episodeAudioMappingDo) WriteDB() IEpisodeAudioMappingDo {
	return e.Clauses(dbresolver.Write)
}

func (e episodeAudioMappingDo) Session(config *gorm.Session) IEpisodeAudioMappingDo {
	return e.withDO(e.DO.Session(config))
}

func (e episodeAudioMappingDo) Clauses(conds ...clause.Expression) IEpisodeAudioMappingDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e episodeAudioMappingDo) Returning(value interface{}, columns ...string) IEpisodeAudioMappingDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e episodeAudioMappingDo) Not(conds ...gen.Condition) IEpisodeAudioMappingDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e episodeAudioMappingDo) Or(conds ...gen.Condition) IEpisodeAudioMappingDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e episodeAudioMappingDo) Select(conds ...field.Expr) IEpisodeAudioMappingDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e episodeAudioMappingDo) Where(conds ...gen.Condition) IEpisodeAudioMappingDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e episodeAudioMappingDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IEpisodeAudioMappingDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e episodeAudioMappingDo) Order(conds ...field.Expr) IEpisodeAudioMappingDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e episodeAudioMappingDo) Distinct(cols ...field.Expr) IEpisodeAudioMappingDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e episodeAudioMappingDo) Omit(cols ...field.Expr) IEpisodeAudioMappingDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e episodeAudioMappingDo) Join(table schema.Tabler, on ...field.Expr) IEpisodeAudioMappingDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e episodeAudioMappingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEpisodeAudioMappingDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e episodeAudioMappingDo) RightJoin(table schema.Tabler, on ...field.Expr) IEpisodeAudioMappingDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e episodeAudioMappingDo) Group(cols ...field.Expr) IEpisodeAudioMappingDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e episodeAudioMappingDo) Having(conds ...gen.Condition) IEpisodeAudioMappingDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e episodeAudioMappingDo) Limit(limit int) IEpisodeAudioMappingDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e episodeAudioMappingDo) Offset(offset int) IEpisodeAudioMappingDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e episodeAudioMappingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEpisodeAudioMappingDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e episodeAudioMappingDo) Unscoped() IEpisodeAudioMappingDo {
	return e.withDO(e.DO.Unscoped())
}

func (e episodeAudioMappingDo) Create(values ...*model.EpisodeAudioMapping) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e episodeAudioMappingDo) CreateInBatches(values []*model.EpisodeAudioMapping, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e episodeAudioMappingDo) Save(values ...*model.EpisodeAudioMapping) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e episodeAudioMappingDo) First() (*model.EpisodeAudioMapping, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EpisodeAudioMapping), nil
	}
}

func (e episodeAudioMappingDo) Take() (*model.EpisodeAudioMapping, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EpisodeAudioMapping), nil
	}
}

func (e episodeAudioMappingDo) Last() (*model.EpisodeAudioMapping, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EpisodeAudioMapping), nil
	}
}

func (e episodeAudioMappingDo) Find() ([]*model.EpisodeAudioMapping, error) {
	result, err := e.DO.Find()
	return result.([]*model.EpisodeAudioMapping), err
}

func (e episodeAudioMappingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EpisodeAudioMapping, err error) {
	buf := make([]*model.EpisodeAudioMapping, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e episodeAudioMappingDo) FindInBatches(result *[]*model.EpisodeAudioMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e episodeAudioMappingDo) Attrs(attrs ...field.AssignExpr) IEpisodeAudioMappingDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e episodeAudioMappingDo) Assign(attrs ...field.AssignExpr) IEpisodeAudioMappingDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e episodeAudioMappingDo) Joins(fields ...field.RelationField) IEpisodeAudioMappingDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e episodeAudioMappingDo) Preload(fields ...field.RelationField) IEpisodeAudioMappingDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e episodeAudioMappingDo) FirstOrInit() (*model.EpisodeAudioMapping, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EpisodeAudioMapping), nil
	}
}

func (e episodeAudioMappingDo) FirstOrCreate() (*model.EpisodeAudioMapping, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EpisodeAudioMapping), nil
	}
}

func (e episodeAudioMappingDo) FindByPage(offset int, limit int) (result []*model.EpisodeAudioMapping, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e episodeAudioMappingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e episodeAudioMappingDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e episodeAudioMappingDo) Delete(models ...*model.EpisodeAudioMapping) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *episodeAudioMappingDo) withDO(do gen.Dao) *episodeAudioMappingDo {
	e.DO = *do.(*gen.DO)
	return e
}
