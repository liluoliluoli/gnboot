// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	"gnboot/internal/data/model"
)

func newVideoUserMapping(db *gorm.DB, opts ...gen.DOOption) videoUserMapping {
	_videoUserMapping := videoUserMapping{}

	_videoUserMapping.videoUserMappingDo.UseDB(db, opts...)
	_videoUserMapping.videoUserMappingDo.UseModel(&model.VideoUserMapping{})

	tableName := _videoUserMapping.videoUserMappingDo.TableName()
	_videoUserMapping.ALL = field.NewAsterisk(tableName)
	_videoUserMapping.ID = field.NewUint64(tableName, "id")
	_videoUserMapping.VideoType = field.NewString(tableName, "video_type")
	_videoUserMapping.VideoID = field.NewInt64(tableName, "video_id")
	_videoUserMapping.LastPlayedPosition = field.NewInt64(tableName, "last_played_position")
	_videoUserMapping.LastPlayedTime = field.NewInt64(tableName, "last_played_time")
	_videoUserMapping.Favorited = field.NewBool(tableName, "favorited")

	_videoUserMapping.fillFieldMap()

	return _videoUserMapping
}

// videoUserMapping 影片用户关联表
type videoUserMapping struct {
	videoUserMappingDo videoUserMappingDo

	ALL                field.Asterisk
	ID                 field.Uint64 // 主键
	VideoType          field.String // 影片类型，movie,series,season,episode
	VideoID            field.Int64  // 影片id，根据video_type类型分别来自movie,series,season,episode表
	LastPlayedPosition field.Int64  // 影片上次播放位置，第n秒
	LastPlayedTime     field.Int64  // 上次播放时候
	Favorited          field.Bool   // 是否收藏喜欢

	fieldMap map[string]field.Expr
}

func (v videoUserMapping) Table(newTableName string) *videoUserMapping {
	v.videoUserMappingDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v videoUserMapping) As(alias string) *videoUserMapping {
	v.videoUserMappingDo.DO = *(v.videoUserMappingDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *videoUserMapping) updateTableName(table string) *videoUserMapping {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewUint64(table, "id")
	v.VideoType = field.NewString(table, "video_type")
	v.VideoID = field.NewInt64(table, "video_id")
	v.LastPlayedPosition = field.NewInt64(table, "last_played_position")
	v.LastPlayedTime = field.NewInt64(table, "last_played_time")
	v.Favorited = field.NewBool(table, "favorited")

	v.fillFieldMap()

	return v
}

func (v *videoUserMapping) WithContext(ctx context.Context) *videoUserMappingDo {
	return v.videoUserMappingDo.WithContext(ctx)
}

func (v videoUserMapping) TableName() string { return v.videoUserMappingDo.TableName() }

func (v videoUserMapping) Alias() string { return v.videoUserMappingDo.Alias() }

func (v videoUserMapping) Columns(cols ...field.Expr) gen.Columns {
	return v.videoUserMappingDo.Columns(cols...)
}

func (v *videoUserMapping) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *videoUserMapping) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 6)
	v.fieldMap["id"] = v.ID
	v.fieldMap["video_type"] = v.VideoType
	v.fieldMap["video_id"] = v.VideoID
	v.fieldMap["last_played_position"] = v.LastPlayedPosition
	v.fieldMap["last_played_time"] = v.LastPlayedTime
	v.fieldMap["favorited"] = v.Favorited
}

func (v videoUserMapping) clone(db *gorm.DB) videoUserMapping {
	v.videoUserMappingDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v videoUserMapping) replaceDB(db *gorm.DB) videoUserMapping {
	v.videoUserMappingDo.ReplaceDB(db)
	return v
}

type videoUserMappingDo struct{ gen.DO }

// SELECT * FROM `@@table` WHERE `id` = @id LIMIT 1
func (v videoUserMappingDo) GetByID(id uint64) (result model.VideoUserMapping) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM `video_user_mapping` WHERE `id` = ? LIMIT 1 ")

	var executeSQL *gorm.DB
	executeSQL = v.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	_ = executeSQL

	return
}

// SELECT * FROM `@@table`
// {{where}}
//
//	{{if val != ""}}
//	  {{if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%")}}
//	    @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val), '%')
//	  {{else if strings.HasPrefix(val, "%")}}
//	    @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val))
//	  {{else if strings.HasSuffix(val, "%")}}
//	    @@col LIKE CONCAT(TRIM(BOTH '%' FROM @val), '%')
//	  {{else}}
//	    @@col = @val
//	  {{end}}
//	{{end}}
//
// {{end}}
// LIMIT 1
func (v videoUserMappingDo) GetByCol(col string, val string) (result model.VideoUserMapping) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM `video_user_mapping` ")
	var whereSQL0 strings.Builder
	if val != "" {
		if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(v.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?), '%') ")
		} else if strings.HasPrefix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(v.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?)) ")
		} else if strings.HasSuffix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(v.Quote(col) + " LIKE CONCAT(TRIM(BOTH '%' FROM ?), '%') ")
		} else {
			params = append(params, val)
			whereSQL0.WriteString(v.Quote(col) + " = ? ")
		}
	}
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString("LIMIT 1 ")

	var executeSQL *gorm.DB
	executeSQL = v.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	_ = executeSQL

	return
}

// SELECT * FROM `@@table`
// {{if len(cols) == len(vals)}}
// {{where}}
//
//	  {{for i, col := range cols}}
//	    {{for j, val := range vals}}
//	      {{if i == j}}
//	        {{if val != ""}}
//	          {{if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%")}}
//	            @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val), '%') AND
//	          {{else if strings.HasPrefix(val, "%")}}
//	            @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val)) AND
//	          {{else if strings.HasSuffix(val, "%")}}
//	            @@col LIKE CONCAT(TRIM(BOTH '%' FROM @val), '%') AND
//	          {{else}}
//	            @@col = @val AND
//	          {{end}}
//	        {{end}}
//	      {{end}}
//	    {{end}}
//	  {{end}}
//	{{end}}
//
// {{end}}
// LIMIT 1
func (v videoUserMappingDo) GetByCols(cols []string, vals []string) (result model.VideoUserMapping) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM `video_user_mapping` ")
	if len(cols) == len(vals) {
		var whereSQL0 strings.Builder
		for i, col := range cols {
			for j, val := range vals {
				if i == j {
					if val != "" {
						if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(v.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?), '%') AND ")
						} else if strings.HasPrefix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(v.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?)) AND ")
						} else if strings.HasSuffix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(v.Quote(col) + " LIKE CONCAT(TRIM(BOTH '%' FROM ?), '%') AND ")
						} else {
							params = append(params, val)
							whereSQL0.WriteString(v.Quote(col) + " = ? AND ")
						}
					}
				}
			}
		}
		helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	}
	generateSQL.WriteString("LIMIT 1 ")

	var executeSQL *gorm.DB
	executeSQL = v.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	_ = executeSQL

	return
}

// SELECT * FROM `@@table`
// {{where}}
//
//	{{if val != ""}}
//	  {{if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%")}}
//	    @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val), '%')
//	  {{else if strings.HasPrefix(val, "%")}}
//	    @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val))
//	  {{else if strings.HasSuffix(val, "%")}}
//	    @@col LIKE CONCAT(TRIM(BOTH '%' FROM @val), '%')
//	  {{else}}
//	    @@col = @val
//	  {{end}}
//	{{end}}
//
// {{end}}
func (v videoUserMappingDo) FindByCol(col string, val string) (result []model.VideoUserMapping) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM `video_user_mapping` ")
	var whereSQL0 strings.Builder
	if val != "" {
		if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(v.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?), '%') ")
		} else if strings.HasPrefix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(v.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?)) ")
		} else if strings.HasSuffix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(v.Quote(col) + " LIKE CONCAT(TRIM(BOTH '%' FROM ?), '%') ")
		} else {
			params = append(params, val)
			whereSQL0.WriteString(v.Quote(col) + " = ? ")
		}
	}
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = v.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	_ = executeSQL

	return
}

// SELECT * FROM `@@table`
// {{if len(cols) == len(vals)}}
// {{where}}
//
//	  {{for i, col := range cols}}
//	    {{for j, val := range vals}}
//	      {{if i == j}}
//	        {{if val != ""}}
//	          {{if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%")}}
//	            @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val), '%') AND
//	          {{else if strings.HasPrefix(val, "%")}}
//	            @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val)) AND
//	          {{else if strings.HasSuffix(val, "%")}}
//	            @@col LIKE CONCAT(TRIM(BOTH '%' FROM @val), '%') AND
//	          {{else}}
//	            @@col = @val AND
//	          {{end}}
//	        {{end}}
//	      {{end}}
//	    {{end}}
//	  {{end}}
//	{{end}}
//
// {{end}}
func (v videoUserMappingDo) FindByCols(cols []string, vals []string) (result []model.VideoUserMapping) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM `video_user_mapping` ")
	if len(cols) == len(vals) {
		var whereSQL0 strings.Builder
		for i, col := range cols {
			for j, val := range vals {
				if i == j {
					if val != "" {
						if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(v.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?), '%') AND ")
						} else if strings.HasPrefix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(v.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?)) AND ")
						} else if strings.HasSuffix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(v.Quote(col) + " LIKE CONCAT(TRIM(BOTH '%' FROM ?), '%') AND ")
						} else {
							params = append(params, val)
							whereSQL0.WriteString(v.Quote(col) + " = ? AND ")
						}
					}
				}
			}
		}
		helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	}

	var executeSQL *gorm.DB
	executeSQL = v.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	_ = executeSQL

	return
}

func (v videoUserMappingDo) Debug() *videoUserMappingDo {
	return v.withDO(v.DO.Debug())
}

func (v videoUserMappingDo) WithContext(ctx context.Context) *videoUserMappingDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v videoUserMappingDo) ReadDB() *videoUserMappingDo {
	return v.Clauses(dbresolver.Read)
}

func (v videoUserMappingDo) WriteDB() *videoUserMappingDo {
	return v.Clauses(dbresolver.Write)
}

func (v videoUserMappingDo) Session(config *gorm.Session) *videoUserMappingDo {
	return v.withDO(v.DO.Session(config))
}

func (v videoUserMappingDo) Clauses(conds ...clause.Expression) *videoUserMappingDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v videoUserMappingDo) Returning(value interface{}, columns ...string) *videoUserMappingDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v videoUserMappingDo) Not(conds ...gen.Condition) *videoUserMappingDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v videoUserMappingDo) Or(conds ...gen.Condition) *videoUserMappingDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v videoUserMappingDo) Select(conds ...field.Expr) *videoUserMappingDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v videoUserMappingDo) Where(conds ...gen.Condition) *videoUserMappingDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v videoUserMappingDo) Order(conds ...field.Expr) *videoUserMappingDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v videoUserMappingDo) Distinct(cols ...field.Expr) *videoUserMappingDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v videoUserMappingDo) Omit(cols ...field.Expr) *videoUserMappingDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v videoUserMappingDo) Join(table schema.Tabler, on ...field.Expr) *videoUserMappingDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v videoUserMappingDo) LeftJoin(table schema.Tabler, on ...field.Expr) *videoUserMappingDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v videoUserMappingDo) RightJoin(table schema.Tabler, on ...field.Expr) *videoUserMappingDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v videoUserMappingDo) Group(cols ...field.Expr) *videoUserMappingDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v videoUserMappingDo) Having(conds ...gen.Condition) *videoUserMappingDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v videoUserMappingDo) Limit(limit int) *videoUserMappingDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v videoUserMappingDo) Offset(offset int) *videoUserMappingDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v videoUserMappingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *videoUserMappingDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v videoUserMappingDo) Unscoped() *videoUserMappingDo {
	return v.withDO(v.DO.Unscoped())
}

func (v videoUserMappingDo) Create(values ...*model.VideoUserMapping) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v videoUserMappingDo) CreateInBatches(values []*model.VideoUserMapping, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v videoUserMappingDo) Save(values ...*model.VideoUserMapping) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v videoUserMappingDo) First() (*model.VideoUserMapping, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoUserMapping), nil
	}
}

func (v videoUserMappingDo) Take() (*model.VideoUserMapping, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoUserMapping), nil
	}
}

func (v videoUserMappingDo) Last() (*model.VideoUserMapping, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoUserMapping), nil
	}
}

func (v videoUserMappingDo) Find() ([]*model.VideoUserMapping, error) {
	result, err := v.DO.Find()
	return result.([]*model.VideoUserMapping), err
}

func (v videoUserMappingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VideoUserMapping, err error) {
	buf := make([]*model.VideoUserMapping, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v videoUserMappingDo) FindInBatches(result *[]*model.VideoUserMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v videoUserMappingDo) Attrs(attrs ...field.AssignExpr) *videoUserMappingDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v videoUserMappingDo) Assign(attrs ...field.AssignExpr) *videoUserMappingDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v videoUserMappingDo) Joins(fields ...field.RelationField) *videoUserMappingDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v videoUserMappingDo) Preload(fields ...field.RelationField) *videoUserMappingDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v videoUserMappingDo) FirstOrInit() (*model.VideoUserMapping, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoUserMapping), nil
	}
}

func (v videoUserMappingDo) FirstOrCreate() (*model.VideoUserMapping, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoUserMapping), nil
	}
}

func (v videoUserMappingDo) FindByPage(offset int, limit int) (result []*model.VideoUserMapping, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v videoUserMappingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v videoUserMappingDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v videoUserMappingDo) Delete(models ...*model.VideoUserMapping) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *videoUserMappingDo) withDO(do gen.Dao) *videoUserMappingDo {
	v.DO = *do.(*gen.DO)
	return v
}
