// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.1
// - protoc             v5.29.3
// source: proto/episode.proto

package episode

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationEpisodeRemoteServiceGetEpisode = "/gnboot.EpisodeRemoteService/GetEpisode"
const OperationEpisodeRemoteServiceUpdateConfigs = "/gnboot.EpisodeRemoteService/UpdateConfigs"

type EpisodeRemoteServiceHTTPServer interface {
	GetEpisode(context.Context, *GetEpisodeRequest) (*Episode, error)
	UpdateConfigs(context.Context, *UpdateConfigRequest) (*emptypb.Empty, error)
}

func RegisterEpisodeRemoteServiceHTTPServer(s *http.Server, srv EpisodeRemoteServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/episode/get", _EpisodeRemoteService_GetEpisode0_HTTP_Handler(srv))
	r.POST("/api/test/config/update", _EpisodeRemoteService_UpdateConfigs0_HTTP_Handler(srv))
}

func _EpisodeRemoteService_GetEpisode0_HTTP_Handler(srv EpisodeRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetEpisodeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEpisodeRemoteServiceGetEpisode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetEpisode(ctx, req.(*GetEpisodeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Episode)
		return ctx.Result(200, reply)
	}
}

func _EpisodeRemoteService_UpdateConfigs0_HTTP_Handler(srv EpisodeRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEpisodeRemoteServiceUpdateConfigs)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateConfigs(ctx, req.(*UpdateConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type EpisodeRemoteServiceHTTPClient interface {
	GetEpisode(ctx context.Context, req *GetEpisodeRequest, opts ...http.CallOption) (rsp *Episode, err error)
	UpdateConfigs(ctx context.Context, req *UpdateConfigRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type EpisodeRemoteServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewEpisodeRemoteServiceHTTPClient(client *http.Client) EpisodeRemoteServiceHTTPClient {
	return &EpisodeRemoteServiceHTTPClientImpl{client}
}

func (c *EpisodeRemoteServiceHTTPClientImpl) GetEpisode(ctx context.Context, in *GetEpisodeRequest, opts ...http.CallOption) (*Episode, error) {
	var out Episode
	pattern := "/api/episode/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEpisodeRemoteServiceGetEpisode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EpisodeRemoteServiceHTTPClientImpl) UpdateConfigs(ctx context.Context, in *UpdateConfigRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/test/config/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEpisodeRemoteServiceUpdateConfigs))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
