// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: proto/season.proto

package season

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SeasonRemoteService_GetSeason_FullMethodName = "/gnboot.SeasonRemoteService/GetSeason"
)

// SeasonRemoteServiceClient is the client API for SeasonRemoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeasonRemoteServiceClient interface {
	GetSeason(ctx context.Context, in *GetSeasonRequest, opts ...grpc.CallOption) (*SeasonResp, error)
}

type seasonRemoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeasonRemoteServiceClient(cc grpc.ClientConnInterface) SeasonRemoteServiceClient {
	return &seasonRemoteServiceClient{cc}
}

func (c *seasonRemoteServiceClient) GetSeason(ctx context.Context, in *GetSeasonRequest, opts ...grpc.CallOption) (*SeasonResp, error) {
	out := new(SeasonResp)
	err := c.cc.Invoke(ctx, SeasonRemoteService_GetSeason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeasonRemoteServiceServer is the server API for SeasonRemoteService service.
// All implementations must embed UnimplementedSeasonRemoteServiceServer
// for forward compatibility
type SeasonRemoteServiceServer interface {
	GetSeason(context.Context, *GetSeasonRequest) (*SeasonResp, error)
	mustEmbedUnimplementedSeasonRemoteServiceServer()
}

// UnimplementedSeasonRemoteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSeasonRemoteServiceServer struct {
}

func (UnimplementedSeasonRemoteServiceServer) GetSeason(context.Context, *GetSeasonRequest) (*SeasonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeason not implemented")
}
func (UnimplementedSeasonRemoteServiceServer) mustEmbedUnimplementedSeasonRemoteServiceServer() {}

// UnsafeSeasonRemoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeasonRemoteServiceServer will
// result in compilation errors.
type UnsafeSeasonRemoteServiceServer interface {
	mustEmbedUnimplementedSeasonRemoteServiceServer()
}

func RegisterSeasonRemoteServiceServer(s grpc.ServiceRegistrar, srv SeasonRemoteServiceServer) {
	s.RegisterService(&SeasonRemoteService_ServiceDesc, srv)
}

func _SeasonRemoteService_GetSeason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeasonRemoteServiceServer).GetSeason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeasonRemoteService_GetSeason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeasonRemoteServiceServer).GetSeason(ctx, req.(*GetSeasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SeasonRemoteService_ServiceDesc is the grpc.ServiceDesc for SeasonRemoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeasonRemoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnboot.SeasonRemoteService",
	HandlerType: (*SeasonRemoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSeason",
			Handler:    _SeasonRemoteService_GetSeason_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/season.proto",
}
