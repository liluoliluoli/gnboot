// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/liluoliluoli/gnboot/internal/adaptor"
	"github.com/liluoliluoli/gnboot/internal/conf"
	"github.com/liluoliluoli/gnboot/internal/repo"
	"github.com/liluoliluoli/gnboot/internal/server"
	"github.com/liluoliluoli/gnboot/internal/service"
	"github.com/liluoliluoli/gnboot/internal/task/i4k"
)

import (
	_ "github.com/go-cinch/common/plugins/gorm/filter"
	_ "github.com/go-cinch/common/plugins/kratos/encoding/yml"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(c *conf.Bootstrap) (*kratos.App, func(), error) {
	universalClient, err := repo.NewRedis(c)
	if err != nil {
		return nil, nil, err
	}
	tenant, err := repo.NewDB(c)
	if err != nil {
		return nil, nil, err
	}
	sonyflake, err := repo.NewSonyflake(c)
	if err != nil {
		return nil, nil, err
	}
	tracerProvider, err := repo.NewTracer(c)
	if err != nil {
		return nil, nil, err
	}
	data, cleanup := repo.NewData(universalClient, tenant, sonyflake, tracerProvider)
	videoRepo := repo.NewVideoRepo(data)
	actorRepo := repo.NewActorRepo(data)
	videoActorMappingRepo := repo.NewVideoActorMappingRepo(data)
	episodeSubtitleMappingRepo := repo.NewEpisodeSubtitleMappingRepo(data)
	userRepo := repo.NewUserRepo(data)
	videoUserMappingRepo := repo.NewVideoUserMappingRepo(data)
	episodeRepo := repo.NewEpisodeRepo(data)
	videoService := service.NewVideoService(c, videoRepo, actorRepo, videoActorMappingRepo, episodeSubtitleMappingRepo, userRepo, videoUserMappingRepo, episodeRepo)
	videoProvider := adaptor.NewVideoProvider(videoService)
	episodeService := service.NewEpisodeService(c, videoRepo, actorRepo, videoActorMappingRepo, episodeSubtitleMappingRepo, episodeRepo, userRepo, universalClient)
	episodeProvider := adaptor.NewEpisodeProvider(episodeService)
	userService := service.NewUserService(c, userRepo, videoUserMappingRepo)
	userProvider := adaptor.NewUserProvider(userService, universalClient, videoService)
	appVersionRepo := repo.NewAppVersionRepo(data)
	appVersionService := service.NewAppVersionService(c, appVersionRepo)
	appVersionProvider := adaptor.NewAppVersionProvider(appVersionService)
	grpcServer := server.NewGRPCServer(c, videoProvider, episodeProvider, userProvider, appVersionProvider, universalClient)
	httpServer := server.NewHTTPServer(c, videoProvider, episodeProvider, userProvider, appVersionProvider, universalClient)
	i4kSyncTask := i4k.NewI4kSyncTask(c)
	job := server.NewJob(c, i4kSyncTask)
	app := newApp(grpcServer, httpServer, job)
	return app, func() {
		cleanup()
	}, nil
}
