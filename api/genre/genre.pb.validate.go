// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/genre.proto

package genre

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GenreResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GenreResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenreResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GenreRespMultiError, or nil
// if none found.
func (m *GenreResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GenreResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return GenreRespMultiError(errors)
	}

	return nil
}

// GenreRespMultiError is an error wrapping multiple validation errors returned
// by GenreResp.ValidateAll() if the designated constraints aren't met.
type GenreRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenreRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenreRespMultiError) AllErrors() []error { return m }

// GenreRespValidationError is the validation error returned by
// GenreResp.Validate if the designated constraints aren't met.
type GenreRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenreRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenreRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenreRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenreRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenreRespValidationError) ErrorName() string { return "GenreRespValidationError" }

// Error satisfies the builtin error interface
func (e GenreRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenreResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenreRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenreRespValidationError{}

// Validate checks the field values on FindGenreRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FindGenreRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindGenreRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindGenreRequestMultiError, or nil if none found.
func (m *FindGenreRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindGenreRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindGenreRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindGenreRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindGenreRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindGenreRequestMultiError(errors)
	}

	return nil
}

// FindGenreRequestMultiError is an error wrapping multiple validation errors
// returned by FindGenreRequest.ValidateAll() if the designated constraints
// aren't met.
type FindGenreRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindGenreRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindGenreRequestMultiError) AllErrors() []error { return m }

// FindGenreRequestValidationError is the validation error returned by
// FindGenreRequest.Validate if the designated constraints aren't met.
type FindGenreRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindGenreRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindGenreRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindGenreRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindGenreRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindGenreRequestValidationError) ErrorName() string { return "FindGenreRequestValidationError" }

// Error satisfies the builtin error interface
func (e FindGenreRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindGenreRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindGenreRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindGenreRequestValidationError{}

// Validate checks the field values on FindGenreResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FindGenreResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindGenreResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FindGenreRespMultiError, or
// nil if none found.
func (m *FindGenreResp) ValidateAll() error {
	return m.validate(true)
}

func (m *FindGenreResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindGenreRespValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindGenreRespValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindGenreRespValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindGenreRespMultiError(errors)
	}

	return nil
}

// FindGenreRespMultiError is an error wrapping multiple validation errors
// returned by FindGenreResp.ValidateAll() if the designated constraints
// aren't met.
type FindGenreRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindGenreRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindGenreRespMultiError) AllErrors() []error { return m }

// FindGenreRespValidationError is the validation error returned by
// FindGenreResp.Validate if the designated constraints aren't met.
type FindGenreRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindGenreRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindGenreRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindGenreRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindGenreRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindGenreRespValidationError) ErrorName() string { return "FindGenreRespValidationError" }

// Error satisfies the builtin error interface
func (e FindGenreRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindGenreResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindGenreRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindGenreRespValidationError{}
