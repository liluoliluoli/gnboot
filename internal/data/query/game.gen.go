// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	"gnboot/internal/data/model"
)

func newGnboot(db *gorm.DB, opts ...gen.DOOption) gnboot {
	_gnboot := gnboot{}

	_gnboot.gnbootDo.UseDB(db, opts...)
	_gnboot.gnbootDo.UseModel(&model.Gnboot{})

	tableName := _gnboot.gnbootDo.TableName()
	_gnboot.ALL = field.NewAsterisk(tableName)
	_gnboot.ID = field.NewUint64(tableName, "id")
	_gnboot.CreatedAt = field.NewField(tableName, "created_at")
	_gnboot.UpdatedAt = field.NewField(tableName, "updated_at")
	_gnboot.Name = field.NewString(tableName, "name")

	_gnboot.fillFieldMap()

	return _gnboot
}

type gnboot struct {
	gnbootDo gnbootDo

	ALL       field.Asterisk
	ID        field.Uint64 // auto increment id
	CreatedAt field.Field  // create time
	UpdatedAt field.Field  // update time
	Name      field.String // name

	fieldMap map[string]field.Expr
}

func (g gnboot) Table(newTableName string) *gnboot {
	g.gnbootDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gnboot) As(alias string) *gnboot {
	g.gnbootDo.DO = *(g.gnbootDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gnboot) updateTableName(table string) *gnboot {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewUint64(table, "id")
	g.CreatedAt = field.NewField(table, "created_at")
	g.UpdatedAt = field.NewField(table, "updated_at")
	g.Name = field.NewString(table, "name")

	g.fillFieldMap()

	return g
}

func (g *gnboot) WithContext(ctx context.Context) *gnbootDo { return g.gnbootDo.WithContext(ctx) }

func (g gnboot) TableName() string { return g.gnbootDo.TableName() }

func (g gnboot) Alias() string { return g.gnbootDo.Alias() }

func (g gnboot) Columns(cols ...field.Expr) gen.Columns { return g.gnbootDo.Columns(cols...) }

func (g *gnboot) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gnboot) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 4)
	g.fieldMap["id"] = g.ID
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["name"] = g.Name
}

func (g gnboot) clone(db *gorm.DB) gnboot {
	g.gnbootDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gnboot) replaceDB(db *gorm.DB) gnboot {
	g.gnbootDo.ReplaceDB(db)
	return g
}

type gnbootDo struct{ gen.DO }

// SELECT * FROM `@@table` WHERE `id` = @id LIMIT 1
func (g gnbootDo) GetByID(id uint64) (result model.Gnboot) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM `gnboot` WHERE `id` = ? LIMIT 1 ")

	var executeSQL *gorm.DB
	executeSQL = g.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	_ = executeSQL

	return
}

// SELECT * FROM `@@table`
// {{where}}
//
//	{{if val != ""}}
//	  {{if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%")}}
//	    @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val), '%')
//	  {{else if strings.HasPrefix(val, "%")}}
//	    @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val))
//	  {{else if strings.HasSuffix(val, "%")}}
//	    @@col LIKE CONCAT(TRIM(BOTH '%' FROM @val), '%')
//	  {{else}}
//	    @@col = @val
//	  {{end}}
//	{{end}}
//
// {{end}}
// LIMIT 1
func (g gnbootDo) GetByCol(col string, val string) (result model.Gnboot) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM `gnboot` ")
	var whereSQL0 strings.Builder
	if val != "" {
		if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(g.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?), '%') ")
		} else if strings.HasPrefix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(g.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?)) ")
		} else if strings.HasSuffix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(g.Quote(col) + " LIKE CONCAT(TRIM(BOTH '%' FROM ?), '%') ")
		} else {
			params = append(params, val)
			whereSQL0.WriteString(g.Quote(col) + " = ? ")
		}
	}
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString("LIMIT 1 ")

	var executeSQL *gorm.DB
	executeSQL = g.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	_ = executeSQL

	return
}

// SELECT * FROM `@@table`
// {{if len(cols) == len(vals)}}
// {{where}}
//
//	  {{for i, col := range cols}}
//	    {{for j, val := range vals}}
//	      {{if i == j}}
//	        {{if val != ""}}
//	          {{if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%")}}
//	            @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val), '%') AND
//	          {{else if strings.HasPrefix(val, "%")}}
//	            @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val)) AND
//	          {{else if strings.HasSuffix(val, "%")}}
//	            @@col LIKE CONCAT(TRIM(BOTH '%' FROM @val), '%') AND
//	          {{else}}
//	            @@col = @val AND
//	          {{end}}
//	        {{end}}
//	      {{end}}
//	    {{end}}
//	  {{end}}
//	{{end}}
//
// {{end}}
// LIMIT 1
func (g gnbootDo) GetByCols(cols []string, vals []string) (result model.Gnboot) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM `gnboot` ")
	if len(cols) == len(vals) {
		var whereSQL0 strings.Builder
		for i, col := range cols {
			for j, val := range vals {
				if i == j {
					if val != "" {
						if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(g.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?), '%') AND ")
						} else if strings.HasPrefix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(g.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?)) AND ")
						} else if strings.HasSuffix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(g.Quote(col) + " LIKE CONCAT(TRIM(BOTH '%' FROM ?), '%') AND ")
						} else {
							params = append(params, val)
							whereSQL0.WriteString(g.Quote(col) + " = ? AND ")
						}
					}
				}
			}
		}
		helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	}
	generateSQL.WriteString("LIMIT 1 ")

	var executeSQL *gorm.DB
	executeSQL = g.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	_ = executeSQL

	return
}

// SELECT * FROM `@@table`
// {{where}}
//
//	{{if val != ""}}
//	  {{if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%")}}
//	    @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val), '%')
//	  {{else if strings.HasPrefix(val, "%")}}
//	    @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val))
//	  {{else if strings.HasSuffix(val, "%")}}
//	    @@col LIKE CONCAT(TRIM(BOTH '%' FROM @val), '%')
//	  {{else}}
//	    @@col = @val
//	  {{end}}
//	{{end}}
//
// {{end}}
func (g gnbootDo) FindByCol(col string, val string) (result []model.Gnboot) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM `gnboot` ")
	var whereSQL0 strings.Builder
	if val != "" {
		if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(g.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?), '%') ")
		} else if strings.HasPrefix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(g.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?)) ")
		} else if strings.HasSuffix(val, "%") {
			params = append(params, val)
			whereSQL0.WriteString(g.Quote(col) + " LIKE CONCAT(TRIM(BOTH '%' FROM ?), '%') ")
		} else {
			params = append(params, val)
			whereSQL0.WriteString(g.Quote(col) + " = ? ")
		}
	}
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = g.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	_ = executeSQL

	return
}

// SELECT * FROM `@@table`
// {{if len(cols) == len(vals)}}
// {{where}}
//
//	  {{for i, col := range cols}}
//	    {{for j, val := range vals}}
//	      {{if i == j}}
//	        {{if val != ""}}
//	          {{if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%")}}
//	            @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val), '%') AND
//	          {{else if strings.HasPrefix(val, "%")}}
//	            @@col LIKE CONCAT('%', TRIM(BOTH '%' FROM @val)) AND
//	          {{else if strings.HasSuffix(val, "%")}}
//	            @@col LIKE CONCAT(TRIM(BOTH '%' FROM @val), '%') AND
//	          {{else}}
//	            @@col = @val AND
//	          {{end}}
//	        {{end}}
//	      {{end}}
//	    {{end}}
//	  {{end}}
//	{{end}}
//
// {{end}}
func (g gnbootDo) FindByCols(cols []string, vals []string) (result []model.Gnboot) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM `gnboot` ")
	if len(cols) == len(vals) {
		var whereSQL0 strings.Builder
		for i, col := range cols {
			for j, val := range vals {
				if i == j {
					if val != "" {
						if strings.HasPrefix(val, "%") && strings.HasSuffix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(g.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?), '%') AND ")
						} else if strings.HasPrefix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(g.Quote(col) + " LIKE CONCAT('%', TRIM(BOTH '%' FROM ?)) AND ")
						} else if strings.HasSuffix(val, "%") {
							params = append(params, val)
							whereSQL0.WriteString(g.Quote(col) + " LIKE CONCAT(TRIM(BOTH '%' FROM ?), '%') AND ")
						} else {
							params = append(params, val)
							whereSQL0.WriteString(g.Quote(col) + " = ? AND ")
						}
					}
				}
			}
		}
		helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	}

	var executeSQL *gorm.DB
	executeSQL = g.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	_ = executeSQL

	return
}

func (g gnbootDo) Debug() *gnbootDo {
	return g.withDO(g.DO.Debug())
}

func (g gnbootDo) WithContext(ctx context.Context) *gnbootDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gnbootDo) ReadDB() *gnbootDo {
	return g.Clauses(dbresolver.Read)
}

func (g gnbootDo) WriteDB() *gnbootDo {
	return g.Clauses(dbresolver.Write)
}

func (g gnbootDo) Session(config *gorm.Session) *gnbootDo {
	return g.withDO(g.DO.Session(config))
}

func (g gnbootDo) Clauses(conds ...clause.Expression) *gnbootDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gnbootDo) Returning(value interface{}, columns ...string) *gnbootDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gnbootDo) Not(conds ...gen.Condition) *gnbootDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gnbootDo) Or(conds ...gen.Condition) *gnbootDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gnbootDo) Select(conds ...field.Expr) *gnbootDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gnbootDo) Where(conds ...gen.Condition) *gnbootDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gnbootDo) Order(conds ...field.Expr) *gnbootDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gnbootDo) Distinct(cols ...field.Expr) *gnbootDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gnbootDo) Omit(cols ...field.Expr) *gnbootDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gnbootDo) Join(table schema.Tabler, on ...field.Expr) *gnbootDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gnbootDo) LeftJoin(table schema.Tabler, on ...field.Expr) *gnbootDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gnbootDo) RightJoin(table schema.Tabler, on ...field.Expr) *gnbootDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gnbootDo) Group(cols ...field.Expr) *gnbootDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gnbootDo) Having(conds ...gen.Condition) *gnbootDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gnbootDo) Limit(limit int) *gnbootDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gnbootDo) Offset(offset int) *gnbootDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gnbootDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *gnbootDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gnbootDo) Unscoped() *gnbootDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gnbootDo) Create(values ...*model.Gnboot) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gnbootDo) CreateInBatches(values []*model.Gnboot, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gnbootDo) Save(values ...*model.Gnboot) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gnbootDo) First() (*model.Gnboot, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Gnboot), nil
	}
}

func (g gnbootDo) Take() (*model.Gnboot, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Gnboot), nil
	}
}

func (g gnbootDo) Last() (*model.Gnboot, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Gnboot), nil
	}
}

func (g gnbootDo) Find() ([]*model.Gnboot, error) {
	result, err := g.DO.Find()
	return result.([]*model.Gnboot), err
}

func (g gnbootDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Gnboot, err error) {
	buf := make([]*model.Gnboot, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gnbootDo) FindInBatches(result *[]*model.Gnboot, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gnbootDo) Attrs(attrs ...field.AssignExpr) *gnbootDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gnbootDo) Assign(attrs ...field.AssignExpr) *gnbootDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gnbootDo) Joins(fields ...field.RelationField) *gnbootDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gnbootDo) Preload(fields ...field.RelationField) *gnbootDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gnbootDo) FirstOrInit() (*model.Gnboot, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Gnboot), nil
	}
}

func (g gnbootDo) FirstOrCreate() (*model.Gnboot, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Gnboot), nil
	}
}

func (g gnbootDo) FindByPage(offset int, limit int) (result []*model.Gnboot, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gnbootDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gnbootDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gnbootDo) Delete(models ...*model.Gnboot) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gnbootDo) withDO(do gen.Dao) *gnbootDo {
	g.DO = *do.(*gen.DO)
	return g
}
