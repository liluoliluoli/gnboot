// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: proto/user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserRemoteService_UpdateFavorite_FullMethodName       = "/gnboot.UserRemoteService/UpdateFavorite"
	UserRemoteService_UpdatePlayedStatus_FullMethodName   = "/gnboot.UserRemoteService/UpdatePlayedStatus"
	UserRemoteService_Create_FullMethodName               = "/gnboot.UserRemoteService/Create"
	UserRemoteService_Login_FullMethodName                = "/gnboot.UserRemoteService/Login"
	UserRemoteService_Logout_FullMethodName               = "/gnboot.UserRemoteService/Logout"
	UserRemoteService_GetCurrentWatchCount_FullMethodName = "/gnboot.UserRemoteService/GetCurrentWatchCount"
	UserRemoteService_GetUser_FullMethodName              = "/gnboot.UserRemoteService/GetUser"
	UserRemoteService_UpdateNotice_FullMethodName         = "/gnboot.UserRemoteService/UpdateNotice"
	UserRemoteService_UpdatePackageType_FullMethodName    = "/gnboot.UserRemoteService/UpdatePackageType"
)

// UserRemoteServiceClient is the client API for UserRemoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserRemoteServiceClient interface {
	UpdateFavorite(ctx context.Context, in *UpdateFavoriteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdatePlayedStatus(ctx context.Context, in *UpdatePlayedStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Create(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Login(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResp, error)
	Logout(ctx context.Context, in *LogoutUserRequest, opts ...grpc.CallOption) (*LogoutUserResp, error)
	GetCurrentWatchCount(ctx context.Context, in *GetCurrentWatchCountRequest, opts ...grpc.CallOption) (*GetCurrentWatchCountResp, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
	UpdateNotice(ctx context.Context, in *UpdateNoticeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdatePackageType(ctx context.Context, in *UpdatePackageTypeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userRemoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserRemoteServiceClient(cc grpc.ClientConnInterface) UserRemoteServiceClient {
	return &userRemoteServiceClient{cc}
}

func (c *userRemoteServiceClient) UpdateFavorite(ctx context.Context, in *UpdateFavoriteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserRemoteService_UpdateFavorite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRemoteServiceClient) UpdatePlayedStatus(ctx context.Context, in *UpdatePlayedStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserRemoteService_UpdatePlayedStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRemoteServiceClient) Create(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserRemoteService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRemoteServiceClient) Login(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResp, error) {
	out := new(LoginUserResp)
	err := c.cc.Invoke(ctx, UserRemoteService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRemoteServiceClient) Logout(ctx context.Context, in *LogoutUserRequest, opts ...grpc.CallOption) (*LogoutUserResp, error) {
	out := new(LogoutUserResp)
	err := c.cc.Invoke(ctx, UserRemoteService_Logout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRemoteServiceClient) GetCurrentWatchCount(ctx context.Context, in *GetCurrentWatchCountRequest, opts ...grpc.CallOption) (*GetCurrentWatchCountResp, error) {
	out := new(GetCurrentWatchCountResp)
	err := c.cc.Invoke(ctx, UserRemoteService_GetCurrentWatchCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRemoteServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, UserRemoteService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRemoteServiceClient) UpdateNotice(ctx context.Context, in *UpdateNoticeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserRemoteService_UpdateNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRemoteServiceClient) UpdatePackageType(ctx context.Context, in *UpdatePackageTypeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserRemoteService_UpdatePackageType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRemoteServiceServer is the server API for UserRemoteService service.
// All implementations must embed UnimplementedUserRemoteServiceServer
// for forward compatibility
type UserRemoteServiceServer interface {
	UpdateFavorite(context.Context, *UpdateFavoriteRequest) (*emptypb.Empty, error)
	UpdatePlayedStatus(context.Context, *UpdatePlayedStatusRequest) (*emptypb.Empty, error)
	Create(context.Context, *CreateUserRequest) (*emptypb.Empty, error)
	Login(context.Context, *LoginUserRequest) (*LoginUserResp, error)
	Logout(context.Context, *LogoutUserRequest) (*LogoutUserResp, error)
	GetCurrentWatchCount(context.Context, *GetCurrentWatchCountRequest) (*GetCurrentWatchCountResp, error)
	GetUser(context.Context, *GetUserRequest) (*User, error)
	UpdateNotice(context.Context, *UpdateNoticeRequest) (*emptypb.Empty, error)
	UpdatePackageType(context.Context, *UpdatePackageTypeRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserRemoteServiceServer()
}

// UnimplementedUserRemoteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserRemoteServiceServer struct {
}

func (UnimplementedUserRemoteServiceServer) UpdateFavorite(context.Context, *UpdateFavoriteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFavorite not implemented")
}
func (UnimplementedUserRemoteServiceServer) UpdatePlayedStatus(context.Context, *UpdatePlayedStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlayedStatus not implemented")
}
func (UnimplementedUserRemoteServiceServer) Create(context.Context, *CreateUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserRemoteServiceServer) Login(context.Context, *LoginUserRequest) (*LoginUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserRemoteServiceServer) Logout(context.Context, *LogoutUserRequest) (*LogoutUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedUserRemoteServiceServer) GetCurrentWatchCount(context.Context, *GetCurrentWatchCountRequest) (*GetCurrentWatchCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentWatchCount not implemented")
}
func (UnimplementedUserRemoteServiceServer) GetUser(context.Context, *GetUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserRemoteServiceServer) UpdateNotice(context.Context, *UpdateNoticeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotice not implemented")
}
func (UnimplementedUserRemoteServiceServer) UpdatePackageType(context.Context, *UpdatePackageTypeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePackageType not implemented")
}
func (UnimplementedUserRemoteServiceServer) mustEmbedUnimplementedUserRemoteServiceServer() {}

// UnsafeUserRemoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserRemoteServiceServer will
// result in compilation errors.
type UnsafeUserRemoteServiceServer interface {
	mustEmbedUnimplementedUserRemoteServiceServer()
}

func RegisterUserRemoteServiceServer(s grpc.ServiceRegistrar, srv UserRemoteServiceServer) {
	s.RegisterService(&UserRemoteService_ServiceDesc, srv)
}

func _UserRemoteService_UpdateFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRemoteServiceServer).UpdateFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRemoteService_UpdateFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRemoteServiceServer).UpdateFavorite(ctx, req.(*UpdateFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRemoteService_UpdatePlayedStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlayedStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRemoteServiceServer).UpdatePlayedStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRemoteService_UpdatePlayedStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRemoteServiceServer).UpdatePlayedStatus(ctx, req.(*UpdatePlayedStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRemoteService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRemoteServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRemoteService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRemoteServiceServer).Create(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRemoteService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRemoteServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRemoteService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRemoteServiceServer).Login(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRemoteService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRemoteServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRemoteService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRemoteServiceServer).Logout(ctx, req.(*LogoutUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRemoteService_GetCurrentWatchCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentWatchCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRemoteServiceServer).GetCurrentWatchCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRemoteService_GetCurrentWatchCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRemoteServiceServer).GetCurrentWatchCount(ctx, req.(*GetCurrentWatchCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRemoteService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRemoteServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRemoteService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRemoteServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRemoteService_UpdateNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRemoteServiceServer).UpdateNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRemoteService_UpdateNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRemoteServiceServer).UpdateNotice(ctx, req.(*UpdateNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRemoteService_UpdatePackageType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePackageTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRemoteServiceServer).UpdatePackageType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRemoteService_UpdatePackageType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRemoteServiceServer).UpdatePackageType(ctx, req.(*UpdatePackageTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserRemoteService_ServiceDesc is the grpc.ServiceDesc for UserRemoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserRemoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnboot.UserRemoteService",
	HandlerType: (*UserRemoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateFavorite",
			Handler:    _UserRemoteService_UpdateFavorite_Handler,
		},
		{
			MethodName: "UpdatePlayedStatus",
			Handler:    _UserRemoteService_UpdatePlayedStatus_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _UserRemoteService_Create_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserRemoteService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _UserRemoteService_Logout_Handler,
		},
		{
			MethodName: "GetCurrentWatchCount",
			Handler:    _UserRemoteService_GetCurrentWatchCount_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserRemoteService_GetUser_Handler,
		},
		{
			MethodName: "UpdateNotice",
			Handler:    _UserRemoteService_UpdateNotice_Handler,
		},
		{
			MethodName: "UpdatePackageType",
			Handler:    _UserRemoteService_UpdatePackageType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user.proto",
}
