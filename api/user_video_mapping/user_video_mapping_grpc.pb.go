// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: proto/user_video_mapping.proto

package user_video_mapping

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserVideoMappingRemoteService_UpdateFavorite_FullMethodName     = "/gnboot.UserVideoMappingRemoteService/UpdateFavorite"
	UserVideoMappingRemoteService_UpdatePlayedStatus_FullMethodName = "/gnboot.UserVideoMappingRemoteService/UpdatePlayedStatus"
)

// UserVideoMappingRemoteServiceClient is the client API for UserVideoMappingRemoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserVideoMappingRemoteServiceClient interface {
	UpdateFavorite(ctx context.Context, in *UpdateFavoriteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdatePlayedStatus(ctx context.Context, in *UpdatePlayedStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userVideoMappingRemoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserVideoMappingRemoteServiceClient(cc grpc.ClientConnInterface) UserVideoMappingRemoteServiceClient {
	return &userVideoMappingRemoteServiceClient{cc}
}

func (c *userVideoMappingRemoteServiceClient) UpdateFavorite(ctx context.Context, in *UpdateFavoriteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserVideoMappingRemoteService_UpdateFavorite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userVideoMappingRemoteServiceClient) UpdatePlayedStatus(ctx context.Context, in *UpdatePlayedStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserVideoMappingRemoteService_UpdatePlayedStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserVideoMappingRemoteServiceServer is the server API for UserVideoMappingRemoteService service.
// All implementations must embed UnimplementedUserVideoMappingRemoteServiceServer
// for forward compatibility
type UserVideoMappingRemoteServiceServer interface {
	UpdateFavorite(context.Context, *UpdateFavoriteRequest) (*emptypb.Empty, error)
	UpdatePlayedStatus(context.Context, *UpdatePlayedStatusRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserVideoMappingRemoteServiceServer()
}

// UnimplementedUserVideoMappingRemoteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserVideoMappingRemoteServiceServer struct {
}

func (UnimplementedUserVideoMappingRemoteServiceServer) UpdateFavorite(context.Context, *UpdateFavoriteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFavorite not implemented")
}
func (UnimplementedUserVideoMappingRemoteServiceServer) UpdatePlayedStatus(context.Context, *UpdatePlayedStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlayedStatus not implemented")
}
func (UnimplementedUserVideoMappingRemoteServiceServer) mustEmbedUnimplementedUserVideoMappingRemoteServiceServer() {
}

// UnsafeUserVideoMappingRemoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserVideoMappingRemoteServiceServer will
// result in compilation errors.
type UnsafeUserVideoMappingRemoteServiceServer interface {
	mustEmbedUnimplementedUserVideoMappingRemoteServiceServer()
}

func RegisterUserVideoMappingRemoteServiceServer(s grpc.ServiceRegistrar, srv UserVideoMappingRemoteServiceServer) {
	s.RegisterService(&UserVideoMappingRemoteService_ServiceDesc, srv)
}

func _UserVideoMappingRemoteService_UpdateFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserVideoMappingRemoteServiceServer).UpdateFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserVideoMappingRemoteService_UpdateFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserVideoMappingRemoteServiceServer).UpdateFavorite(ctx, req.(*UpdateFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserVideoMappingRemoteService_UpdatePlayedStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlayedStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserVideoMappingRemoteServiceServer).UpdatePlayedStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserVideoMappingRemoteService_UpdatePlayedStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserVideoMappingRemoteServiceServer).UpdatePlayedStatus(ctx, req.(*UpdatePlayedStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserVideoMappingRemoteService_ServiceDesc is the grpc.ServiceDesc for UserVideoMappingRemoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserVideoMappingRemoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnboot.UserVideoMappingRemoteService",
	HandlerType: (*UserVideoMappingRemoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateFavorite",
			Handler:    _UserVideoMappingRemoteService_UpdateFavorite_Handler,
		},
		{
			MethodName: "UpdatePlayedStatus",
			Handler:    _UserVideoMappingRemoteService_UpdatePlayedStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user_video_mapping.proto",
}
