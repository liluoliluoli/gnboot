// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.1
// - protoc             v5.28.3
// source: proto/user_video_mapping.proto

package user_video_mapping

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserVideoMappingRemoteServiceUpdateFavorite = "/gnboot.UserVideoMappingRemoteService/UpdateFavorite"
const OperationUserVideoMappingRemoteServiceUpdatePlayedStatus = "/gnboot.UserVideoMappingRemoteService/UpdatePlayedStatus"

type UserVideoMappingRemoteServiceHTTPServer interface {
	UpdateFavorite(context.Context, *UpdateFavoriteRequest) (*emptypb.Empty, error)
	UpdatePlayedStatus(context.Context, *UpdatePlayedStatusRequest) (*emptypb.Empty, error)
}

func RegisterUserVideoMappingRemoteServiceHTTPServer(s *http.Server, srv UserVideoMappingRemoteServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/markFavorite/update", _UserVideoMappingRemoteService_UpdateFavorite0_HTTP_Handler(srv))
	r.POST("/playedStatus/update", _UserVideoMappingRemoteService_UpdatePlayedStatus0_HTTP_Handler(srv))
}

func _UserVideoMappingRemoteService_UpdateFavorite0_HTTP_Handler(srv UserVideoMappingRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateFavoriteRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserVideoMappingRemoteServiceUpdateFavorite)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateFavorite(ctx, req.(*UpdateFavoriteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _UserVideoMappingRemoteService_UpdatePlayedStatus0_HTTP_Handler(srv UserVideoMappingRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePlayedStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserVideoMappingRemoteServiceUpdatePlayedStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePlayedStatus(ctx, req.(*UpdatePlayedStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type UserVideoMappingRemoteServiceHTTPClient interface {
	UpdateFavorite(ctx context.Context, req *UpdateFavoriteRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdatePlayedStatus(ctx context.Context, req *UpdatePlayedStatusRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type UserVideoMappingRemoteServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewUserVideoMappingRemoteServiceHTTPClient(client *http.Client) UserVideoMappingRemoteServiceHTTPClient {
	return &UserVideoMappingRemoteServiceHTTPClientImpl{client}
}

func (c *UserVideoMappingRemoteServiceHTTPClientImpl) UpdateFavorite(ctx context.Context, in *UpdateFavoriteRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/markFavorite/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserVideoMappingRemoteServiceUpdateFavorite))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserVideoMappingRemoteServiceHTTPClientImpl) UpdatePlayedStatus(ctx context.Context, in *UpdatePlayedStatusRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/playedStatus/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserVideoMappingRemoteServiceUpdatePlayedStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
