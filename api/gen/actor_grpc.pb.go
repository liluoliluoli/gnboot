// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: actor.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ActorRemoteService_FindGenre_FullMethodName = "/gnboot.ActorRemoteService/FindGenre"
)

// ActorRemoteServiceClient is the client API for ActorRemoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActorRemoteServiceClient interface {
	FindGenre(ctx context.Context, in *FindActorRequest, opts ...grpc.CallOption) (*FindActorResp, error)
}

type actorRemoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActorRemoteServiceClient(cc grpc.ClientConnInterface) ActorRemoteServiceClient {
	return &actorRemoteServiceClient{cc}
}

func (c *actorRemoteServiceClient) FindGenre(ctx context.Context, in *FindActorRequest, opts ...grpc.CallOption) (*FindActorResp, error) {
	out := new(FindActorResp)
	err := c.cc.Invoke(ctx, ActorRemoteService_FindGenre_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActorRemoteServiceServer is the server API for ActorRemoteService service.
// All implementations should embed UnimplementedActorRemoteServiceServer
// for forward compatibility
type ActorRemoteServiceServer interface {
	FindGenre(context.Context, *FindActorRequest) (*FindActorResp, error)
}

// UnimplementedActorRemoteServiceServer should be embedded to have forward compatible implementations.
type UnimplementedActorRemoteServiceServer struct {
}

func (UnimplementedActorRemoteServiceServer) FindGenre(context.Context, *FindActorRequest) (*FindActorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindGenre not implemented")
}

// UnsafeActorRemoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActorRemoteServiceServer will
// result in compilation errors.
type UnsafeActorRemoteServiceServer interface {
	mustEmbedUnimplementedActorRemoteServiceServer()
}

func RegisterActorRemoteServiceServer(s grpc.ServiceRegistrar, srv ActorRemoteServiceServer) {
	s.RegisterService(&ActorRemoteService_ServiceDesc, srv)
}

func _ActorRemoteService_FindGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindActorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorRemoteServiceServer).FindGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActorRemoteService_FindGenre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorRemoteServiceServer).FindGenre(ctx, req.(*FindActorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActorRemoteService_ServiceDesc is the grpc.ServiceDesc for ActorRemoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActorRemoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnboot.ActorRemoteService",
	HandlerType: (*ActorRemoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindGenre",
			Handler:    _ActorRemoteService_FindGenre_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "actor.proto",
}
