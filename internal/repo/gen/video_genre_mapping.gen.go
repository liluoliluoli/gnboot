// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liluoliluoli/gnboot/internal/repo/model"
)

func newVideoGenreMapping(db *gorm.DB, opts ...gen.DOOption) videoGenreMapping {
	_videoGenreMapping := videoGenreMapping{}

	_videoGenreMapping.videoGenreMappingDo.UseDB(db, opts...)
	_videoGenreMapping.videoGenreMappingDo.UseModel(&model.VideoGenreMapping{})

	tableName := _videoGenreMapping.videoGenreMappingDo.TableName()
	_videoGenreMapping.ALL = field.NewAsterisk(tableName)
	_videoGenreMapping.ID = field.NewInt64(tableName, "id")
	_videoGenreMapping.VideoType = field.NewString(tableName, "video_type")
	_videoGenreMapping.VideoID = field.NewInt64(tableName, "video_id")
	_videoGenreMapping.GenreID = field.NewInt64(tableName, "genre_id")
	_videoGenreMapping.CreateTime = field.NewTime(tableName, "create_time")
	_videoGenreMapping.UpdateTime = field.NewTime(tableName, "update_time")

	_videoGenreMapping.fillFieldMap()

	return _videoGenreMapping
}

type videoGenreMapping struct {
	videoGenreMappingDo videoGenreMappingDo

	ALL        field.Asterisk
	ID         field.Int64  // 主键
	VideoType  field.String // 影片类型，movie,series,season,episode
	VideoID    field.Int64  // 影片id，根据video_type类型分别来自movie,series,season,episode表
	GenreID    field.Int64  // 流派id
	CreateTime field.Time
	UpdateTime field.Time

	fieldMap map[string]field.Expr
}

func (v videoGenreMapping) Table(newTableName string) *videoGenreMapping {
	v.videoGenreMappingDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v videoGenreMapping) As(alias string) *videoGenreMapping {
	v.videoGenreMappingDo.DO = *(v.videoGenreMappingDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *videoGenreMapping) updateTableName(table string) *videoGenreMapping {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewInt64(table, "id")
	v.VideoType = field.NewString(table, "video_type")
	v.VideoID = field.NewInt64(table, "video_id")
	v.GenreID = field.NewInt64(table, "genre_id")
	v.CreateTime = field.NewTime(table, "create_time")
	v.UpdateTime = field.NewTime(table, "update_time")

	v.fillFieldMap()

	return v
}

func (v *videoGenreMapping) WithContext(ctx context.Context) IVideoGenreMappingDo {
	return v.videoGenreMappingDo.WithContext(ctx)
}

func (v videoGenreMapping) TableName() string { return v.videoGenreMappingDo.TableName() }

func (v videoGenreMapping) Alias() string { return v.videoGenreMappingDo.Alias() }

func (v *videoGenreMapping) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *videoGenreMapping) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 6)
	v.fieldMap["id"] = v.ID
	v.fieldMap["video_type"] = v.VideoType
	v.fieldMap["video_id"] = v.VideoID
	v.fieldMap["genre_id"] = v.GenreID
	v.fieldMap["create_time"] = v.CreateTime
	v.fieldMap["update_time"] = v.UpdateTime
}

func (v videoGenreMapping) clone(db *gorm.DB) videoGenreMapping {
	v.videoGenreMappingDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v videoGenreMapping) replaceDB(db *gorm.DB) videoGenreMapping {
	v.videoGenreMappingDo.ReplaceDB(db)
	return v
}

type videoGenreMappingDo struct{ gen.DO }

type IVideoGenreMappingDo interface {
	gen.SubQuery
	Debug() IVideoGenreMappingDo
	WithContext(ctx context.Context) IVideoGenreMappingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVideoGenreMappingDo
	WriteDB() IVideoGenreMappingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVideoGenreMappingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVideoGenreMappingDo
	Not(conds ...gen.Condition) IVideoGenreMappingDo
	Or(conds ...gen.Condition) IVideoGenreMappingDo
	Select(conds ...field.Expr) IVideoGenreMappingDo
	Where(conds ...gen.Condition) IVideoGenreMappingDo
	Order(conds ...field.Expr) IVideoGenreMappingDo
	Distinct(cols ...field.Expr) IVideoGenreMappingDo
	Omit(cols ...field.Expr) IVideoGenreMappingDo
	Join(table schema.Tabler, on ...field.Expr) IVideoGenreMappingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVideoGenreMappingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVideoGenreMappingDo
	Group(cols ...field.Expr) IVideoGenreMappingDo
	Having(conds ...gen.Condition) IVideoGenreMappingDo
	Limit(limit int) IVideoGenreMappingDo
	Offset(offset int) IVideoGenreMappingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVideoGenreMappingDo
	Unscoped() IVideoGenreMappingDo
	Create(values ...*model.VideoGenreMapping) error
	CreateInBatches(values []*model.VideoGenreMapping, batchSize int) error
	Save(values ...*model.VideoGenreMapping) error
	First() (*model.VideoGenreMapping, error)
	Take() (*model.VideoGenreMapping, error)
	Last() (*model.VideoGenreMapping, error)
	Find() ([]*model.VideoGenreMapping, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VideoGenreMapping, err error)
	FindInBatches(result *[]*model.VideoGenreMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.VideoGenreMapping) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVideoGenreMappingDo
	Assign(attrs ...field.AssignExpr) IVideoGenreMappingDo
	Joins(fields ...field.RelationField) IVideoGenreMappingDo
	Preload(fields ...field.RelationField) IVideoGenreMappingDo
	FirstOrInit() (*model.VideoGenreMapping, error)
	FirstOrCreate() (*model.VideoGenreMapping, error)
	FindByPage(offset int, limit int) (result []*model.VideoGenreMapping, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVideoGenreMappingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	SelectByID(id int64) (result *model.VideoGenreMapping, err error)
}

// SELECT * FROM @@table WHERE id=@id
func (v videoGenreMappingDo) SelectByID(id int64) (result *model.VideoGenreMapping, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM video_genre_mapping WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = v.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (v videoGenreMappingDo) Debug() IVideoGenreMappingDo {
	return v.withDO(v.DO.Debug())
}

func (v videoGenreMappingDo) WithContext(ctx context.Context) IVideoGenreMappingDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v videoGenreMappingDo) ReadDB() IVideoGenreMappingDo {
	return v.Clauses(dbresolver.Read)
}

func (v videoGenreMappingDo) WriteDB() IVideoGenreMappingDo {
	return v.Clauses(dbresolver.Write)
}

func (v videoGenreMappingDo) Session(config *gorm.Session) IVideoGenreMappingDo {
	return v.withDO(v.DO.Session(config))
}

func (v videoGenreMappingDo) Clauses(conds ...clause.Expression) IVideoGenreMappingDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v videoGenreMappingDo) Returning(value interface{}, columns ...string) IVideoGenreMappingDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v videoGenreMappingDo) Not(conds ...gen.Condition) IVideoGenreMappingDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v videoGenreMappingDo) Or(conds ...gen.Condition) IVideoGenreMappingDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v videoGenreMappingDo) Select(conds ...field.Expr) IVideoGenreMappingDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v videoGenreMappingDo) Where(conds ...gen.Condition) IVideoGenreMappingDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v videoGenreMappingDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IVideoGenreMappingDo {
	return v.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (v videoGenreMappingDo) Order(conds ...field.Expr) IVideoGenreMappingDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v videoGenreMappingDo) Distinct(cols ...field.Expr) IVideoGenreMappingDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v videoGenreMappingDo) Omit(cols ...field.Expr) IVideoGenreMappingDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v videoGenreMappingDo) Join(table schema.Tabler, on ...field.Expr) IVideoGenreMappingDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v videoGenreMappingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVideoGenreMappingDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v videoGenreMappingDo) RightJoin(table schema.Tabler, on ...field.Expr) IVideoGenreMappingDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v videoGenreMappingDo) Group(cols ...field.Expr) IVideoGenreMappingDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v videoGenreMappingDo) Having(conds ...gen.Condition) IVideoGenreMappingDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v videoGenreMappingDo) Limit(limit int) IVideoGenreMappingDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v videoGenreMappingDo) Offset(offset int) IVideoGenreMappingDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v videoGenreMappingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVideoGenreMappingDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v videoGenreMappingDo) Unscoped() IVideoGenreMappingDo {
	return v.withDO(v.DO.Unscoped())
}

func (v videoGenreMappingDo) Create(values ...*model.VideoGenreMapping) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v videoGenreMappingDo) CreateInBatches(values []*model.VideoGenreMapping, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v videoGenreMappingDo) Save(values ...*model.VideoGenreMapping) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v videoGenreMappingDo) First() (*model.VideoGenreMapping, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoGenreMapping), nil
	}
}

func (v videoGenreMappingDo) Take() (*model.VideoGenreMapping, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoGenreMapping), nil
	}
}

func (v videoGenreMappingDo) Last() (*model.VideoGenreMapping, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoGenreMapping), nil
	}
}

func (v videoGenreMappingDo) Find() ([]*model.VideoGenreMapping, error) {
	result, err := v.DO.Find()
	return result.([]*model.VideoGenreMapping), err
}

func (v videoGenreMappingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VideoGenreMapping, err error) {
	buf := make([]*model.VideoGenreMapping, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v videoGenreMappingDo) FindInBatches(result *[]*model.VideoGenreMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v videoGenreMappingDo) Attrs(attrs ...field.AssignExpr) IVideoGenreMappingDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v videoGenreMappingDo) Assign(attrs ...field.AssignExpr) IVideoGenreMappingDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v videoGenreMappingDo) Joins(fields ...field.RelationField) IVideoGenreMappingDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v videoGenreMappingDo) Preload(fields ...field.RelationField) IVideoGenreMappingDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v videoGenreMappingDo) FirstOrInit() (*model.VideoGenreMapping, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoGenreMapping), nil
	}
}

func (v videoGenreMappingDo) FirstOrCreate() (*model.VideoGenreMapping, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoGenreMapping), nil
	}
}

func (v videoGenreMappingDo) FindByPage(offset int, limit int) (result []*model.VideoGenreMapping, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v videoGenreMappingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v videoGenreMappingDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v videoGenreMappingDo) Delete(models ...*model.VideoGenreMapping) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *videoGenreMappingDo) withDO(do gen.Dao) *videoGenreMappingDo {
	v.DO = *do.(*gen.DO)
	return v
}
