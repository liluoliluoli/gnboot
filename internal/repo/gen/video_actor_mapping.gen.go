// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/liluoliluoli/gnboot/internal/repo/model"
)

func newVideoActorMapping(db *gorm.DB, opts ...gen.DOOption) videoActorMapping {
	_videoActorMapping := videoActorMapping{}

	_videoActorMapping.videoActorMappingDo.UseDB(db, opts...)
	_videoActorMapping.videoActorMappingDo.UseModel(&model.VideoActorMapping{})

	tableName := _videoActorMapping.videoActorMappingDo.TableName()
	_videoActorMapping.ALL = field.NewAsterisk(tableName)
	_videoActorMapping.ID = field.NewInt64(tableName, "id")
	_videoActorMapping.VideoID = field.NewInt64(tableName, "video_id")
	_videoActorMapping.ActorID = field.NewInt64(tableName, "actor_id")
	_videoActorMapping.Character = field.NewString(tableName, "character")

	_videoActorMapping.fillFieldMap()

	return _videoActorMapping
}

type videoActorMapping struct {
	videoActorMappingDo videoActorMappingDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键
	VideoID   field.Int64  // 影片id
	ActorID   field.Int64  // 演职人员id
	Character field.String // 饰演角色名称

	fieldMap map[string]field.Expr
}

func (v videoActorMapping) Table(newTableName string) *videoActorMapping {
	v.videoActorMappingDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v videoActorMapping) As(alias string) *videoActorMapping {
	v.videoActorMappingDo.DO = *(v.videoActorMappingDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *videoActorMapping) updateTableName(table string) *videoActorMapping {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewInt64(table, "id")
	v.VideoID = field.NewInt64(table, "video_id")
	v.ActorID = field.NewInt64(table, "actor_id")
	v.Character = field.NewString(table, "character")

	v.fillFieldMap()

	return v
}

func (v *videoActorMapping) WithContext(ctx context.Context) IVideoActorMappingDo {
	return v.videoActorMappingDo.WithContext(ctx)
}

func (v videoActorMapping) TableName() string { return v.videoActorMappingDo.TableName() }

func (v videoActorMapping) Alias() string { return v.videoActorMappingDo.Alias() }

func (v *videoActorMapping) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *videoActorMapping) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 4)
	v.fieldMap["id"] = v.ID
	v.fieldMap["video_id"] = v.VideoID
	v.fieldMap["actor_id"] = v.ActorID
	v.fieldMap["character"] = v.Character
}

func (v videoActorMapping) clone(db *gorm.DB) videoActorMapping {
	v.videoActorMappingDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v videoActorMapping) replaceDB(db *gorm.DB) videoActorMapping {
	v.videoActorMappingDo.ReplaceDB(db)
	return v
}

type videoActorMappingDo struct{ gen.DO }

type IVideoActorMappingDo interface {
	gen.SubQuery
	Debug() IVideoActorMappingDo
	WithContext(ctx context.Context) IVideoActorMappingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVideoActorMappingDo
	WriteDB() IVideoActorMappingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVideoActorMappingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVideoActorMappingDo
	Not(conds ...gen.Condition) IVideoActorMappingDo
	Or(conds ...gen.Condition) IVideoActorMappingDo
	Select(conds ...field.Expr) IVideoActorMappingDo
	Where(conds ...gen.Condition) IVideoActorMappingDo
	Order(conds ...field.Expr) IVideoActorMappingDo
	Distinct(cols ...field.Expr) IVideoActorMappingDo
	Omit(cols ...field.Expr) IVideoActorMappingDo
	Join(table schema.Tabler, on ...field.Expr) IVideoActorMappingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVideoActorMappingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVideoActorMappingDo
	Group(cols ...field.Expr) IVideoActorMappingDo
	Having(conds ...gen.Condition) IVideoActorMappingDo
	Limit(limit int) IVideoActorMappingDo
	Offset(offset int) IVideoActorMappingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVideoActorMappingDo
	Unscoped() IVideoActorMappingDo
	Create(values ...*model.VideoActorMapping) error
	CreateInBatches(values []*model.VideoActorMapping, batchSize int) error
	Save(values ...*model.VideoActorMapping) error
	First() (*model.VideoActorMapping, error)
	Take() (*model.VideoActorMapping, error)
	Last() (*model.VideoActorMapping, error)
	Find() ([]*model.VideoActorMapping, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VideoActorMapping, err error)
	FindInBatches(result *[]*model.VideoActorMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.VideoActorMapping) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVideoActorMappingDo
	Assign(attrs ...field.AssignExpr) IVideoActorMappingDo
	Joins(fields ...field.RelationField) IVideoActorMappingDo
	Preload(fields ...field.RelationField) IVideoActorMappingDo
	FirstOrInit() (*model.VideoActorMapping, error)
	FirstOrCreate() (*model.VideoActorMapping, error)
	FindByPage(offset int, limit int) (result []*model.VideoActorMapping, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVideoActorMappingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	SelectByID(id int64) (result *model.VideoActorMapping, err error)
}

// SELECT * FROM @@table WHERE id=@id
func (v videoActorMappingDo) SelectByID(id int64) (result *model.VideoActorMapping, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM video_actor_mapping WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = v.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (v videoActorMappingDo) Debug() IVideoActorMappingDo {
	return v.withDO(v.DO.Debug())
}

func (v videoActorMappingDo) WithContext(ctx context.Context) IVideoActorMappingDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v videoActorMappingDo) ReadDB() IVideoActorMappingDo {
	return v.Clauses(dbresolver.Read)
}

func (v videoActorMappingDo) WriteDB() IVideoActorMappingDo {
	return v.Clauses(dbresolver.Write)
}

func (v videoActorMappingDo) Session(config *gorm.Session) IVideoActorMappingDo {
	return v.withDO(v.DO.Session(config))
}

func (v videoActorMappingDo) Clauses(conds ...clause.Expression) IVideoActorMappingDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v videoActorMappingDo) Returning(value interface{}, columns ...string) IVideoActorMappingDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v videoActorMappingDo) Not(conds ...gen.Condition) IVideoActorMappingDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v videoActorMappingDo) Or(conds ...gen.Condition) IVideoActorMappingDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v videoActorMappingDo) Select(conds ...field.Expr) IVideoActorMappingDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v videoActorMappingDo) Where(conds ...gen.Condition) IVideoActorMappingDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v videoActorMappingDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IVideoActorMappingDo {
	return v.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (v videoActorMappingDo) Order(conds ...field.Expr) IVideoActorMappingDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v videoActorMappingDo) Distinct(cols ...field.Expr) IVideoActorMappingDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v videoActorMappingDo) Omit(cols ...field.Expr) IVideoActorMappingDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v videoActorMappingDo) Join(table schema.Tabler, on ...field.Expr) IVideoActorMappingDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v videoActorMappingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVideoActorMappingDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v videoActorMappingDo) RightJoin(table schema.Tabler, on ...field.Expr) IVideoActorMappingDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v videoActorMappingDo) Group(cols ...field.Expr) IVideoActorMappingDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v videoActorMappingDo) Having(conds ...gen.Condition) IVideoActorMappingDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v videoActorMappingDo) Limit(limit int) IVideoActorMappingDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v videoActorMappingDo) Offset(offset int) IVideoActorMappingDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v videoActorMappingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVideoActorMappingDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v videoActorMappingDo) Unscoped() IVideoActorMappingDo {
	return v.withDO(v.DO.Unscoped())
}

func (v videoActorMappingDo) Create(values ...*model.VideoActorMapping) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v videoActorMappingDo) CreateInBatches(values []*model.VideoActorMapping, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v videoActorMappingDo) Save(values ...*model.VideoActorMapping) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v videoActorMappingDo) First() (*model.VideoActorMapping, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoActorMapping), nil
	}
}

func (v videoActorMappingDo) Take() (*model.VideoActorMapping, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoActorMapping), nil
	}
}

func (v videoActorMappingDo) Last() (*model.VideoActorMapping, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoActorMapping), nil
	}
}

func (v videoActorMappingDo) Find() ([]*model.VideoActorMapping, error) {
	result, err := v.DO.Find()
	return result.([]*model.VideoActorMapping), err
}

func (v videoActorMappingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VideoActorMapping, err error) {
	buf := make([]*model.VideoActorMapping, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v videoActorMappingDo) FindInBatches(result *[]*model.VideoActorMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v videoActorMappingDo) Attrs(attrs ...field.AssignExpr) IVideoActorMappingDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v videoActorMappingDo) Assign(attrs ...field.AssignExpr) IVideoActorMappingDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v videoActorMappingDo) Joins(fields ...field.RelationField) IVideoActorMappingDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v videoActorMappingDo) Preload(fields ...field.RelationField) IVideoActorMappingDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v videoActorMappingDo) FirstOrInit() (*model.VideoActorMapping, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoActorMapping), nil
	}
}

func (v videoActorMappingDo) FirstOrCreate() (*model.VideoActorMapping, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoActorMapping), nil
	}
}

func (v videoActorMappingDo) FindByPage(offset int, limit int) (result []*model.VideoActorMapping, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v videoActorMappingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v videoActorMappingDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v videoActorMappingDo) Delete(models ...*model.VideoActorMapping) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *videoActorMappingDo) withDO(do gen.Dao) *videoActorMappingDo {
	v.DO = *do.(*gen.DO)
	return v
}
