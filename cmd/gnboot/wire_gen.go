// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"gnboot/internal/adaptor"
	"gnboot/internal/conf"
	"gnboot/internal/pkg/task"
	"gnboot/internal/repo"
	"gnboot/internal/server"
	"gnboot/internal/service"
)

import (
	_ "github.com/go-cinch/common/plugins/gorm/filter"
	_ "github.com/go-cinch/common/plugins/kratos/encoding/yml"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(c *conf.Bootstrap) (*kratos.App, func(), error) {
	worker, err := task.New(c)
	if err != nil {
		return nil, nil, err
	}
	universalClient, err := repo.NewRedis(c)
	if err != nil {
		return nil, nil, err
	}
	tenant, err := repo.NewDB(c)
	if err != nil {
		return nil, nil, err
	}
	sonyflake, err := repo.NewSonyflake(c)
	if err != nil {
		return nil, nil, err
	}
	tracerProvider, err := repo.NewTracer(c)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup := repo.NewData(universalClient, tenant, sonyflake, tracerProvider)
	movieRepo := repo.NewMovieRepo(dataData)
	transaction := repo.NewTransaction(dataData)
	cache := repo.NewCache(c, universalClient)
	movieUseCase := service.NewMovieUseCase(c, movieRepo, transaction, cache)
	gnbootService := adaptor.NewGnbootService(worker, movieUseCase)
	grpcServer := server.NewGRPCServer(c, gnbootService)
	httpServer := server.NewHTTPServer(c, gnbootService)
	app := newApp(grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
