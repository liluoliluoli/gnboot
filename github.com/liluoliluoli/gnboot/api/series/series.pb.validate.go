// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/series.proto

package series

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SeriesResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SeriesResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SeriesResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SeriesRespMultiError, or
// nil if none found.
func (m *SeriesResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SeriesResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OriginalTitle

	// no validation rules for Status

	// no validation rules for VoteAverage

	// no validation rules for VoteCount

	// no validation rules for Country

	// no validation rules for Trailer

	// no validation rules for Url

	// no validation rules for Downloaded

	// no validation rules for FileSize

	// no validation rules for Filename

	// no validation rules for Ext

	for idx, item := range m.GetGenres() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SeriesRespValidationError{
						field:  fmt.Sprintf("Genres[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SeriesRespValidationError{
						field:  fmt.Sprintf("Genres[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SeriesRespValidationError{
					field:  fmt.Sprintf("Genres[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetStudios() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SeriesRespValidationError{
						field:  fmt.Sprintf("Studios[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SeriesRespValidationError{
						field:  fmt.Sprintf("Studios[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SeriesRespValidationError{
					field:  fmt.Sprintf("Studios[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetKeywords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SeriesRespValidationError{
						field:  fmt.Sprintf("Keywords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SeriesRespValidationError{
						field:  fmt.Sprintf("Keywords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SeriesRespValidationError{
					field:  fmt.Sprintf("Keywords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for LastPlayedPosition

	// no validation rules for LastPlayedTime

	for idx, item := range m.GetSubtitles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SeriesRespValidationError{
						field:  fmt.Sprintf("Subtitles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SeriesRespValidationError{
						field:  fmt.Sprintf("Subtitles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SeriesRespValidationError{
					field:  fmt.Sprintf("Subtitles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetActors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SeriesRespValidationError{
						field:  fmt.Sprintf("Actors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SeriesRespValidationError{
						field:  fmt.Sprintf("Actors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SeriesRespValidationError{
					field:  fmt.Sprintf("Actors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSeasons() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SeriesRespValidationError{
						field:  fmt.Sprintf("Seasons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SeriesRespValidationError{
						field:  fmt.Sprintf("Seasons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SeriesRespValidationError{
					field:  fmt.Sprintf("Seasons[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for SkipIntro

	// no validation rules for SkipEnding

	if len(errors) > 0 {
		return SeriesRespMultiError(errors)
	}

	return nil
}

// SeriesRespMultiError is an error wrapping multiple validation errors
// returned by SeriesResp.ValidateAll() if the designated constraints aren't met.
type SeriesRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SeriesRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SeriesRespMultiError) AllErrors() []error { return m }

// SeriesRespValidationError is the validation error returned by
// SeriesResp.Validate if the designated constraints aren't met.
type SeriesRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SeriesRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SeriesRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SeriesRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SeriesRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SeriesRespValidationError) ErrorName() string { return "SeriesRespValidationError" }

// Error satisfies the builtin error interface
func (e SeriesRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSeriesResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SeriesRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SeriesRespValidationError{}

// Validate checks the field values on CreateSeriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSeriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSeriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSeriesRequestMultiError, or nil if none found.
func (m *CreateSeriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSeriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return CreateSeriesRequestMultiError(errors)
	}

	return nil
}

// CreateSeriesRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSeriesRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSeriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSeriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSeriesRequestMultiError) AllErrors() []error { return m }

// CreateSeriesRequestValidationError is the validation error returned by
// CreateSeriesRequest.Validate if the designated constraints aren't met.
type CreateSeriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSeriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSeriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSeriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSeriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSeriesRequestValidationError) ErrorName() string {
	return "CreateSeriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSeriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSeriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSeriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSeriesRequestValidationError{}

// Validate checks the field values on FindSeriesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FindSeriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindSeriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindSeriesRequestMultiError, or nil if none found.
func (m *FindSeriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindSeriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindSeriesRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindSeriesRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindSeriesRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Search != nil {
		// no validation rules for Search
	}

	if m.Sort != nil {

		if all {
			switch v := interface{}(m.GetSort()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindSeriesRequestValidationError{
						field:  "Sort",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindSeriesRequestValidationError{
						field:  "Sort",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSort()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindSeriesRequestValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FindSeriesRequestMultiError(errors)
	}

	return nil
}

// FindSeriesRequestMultiError is an error wrapping multiple validation errors
// returned by FindSeriesRequest.ValidateAll() if the designated constraints
// aren't met.
type FindSeriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindSeriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindSeriesRequestMultiError) AllErrors() []error { return m }

// FindSeriesRequestValidationError is the validation error returned by
// FindSeriesRequest.Validate if the designated constraints aren't met.
type FindSeriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindSeriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindSeriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindSeriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindSeriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindSeriesRequestValidationError) ErrorName() string {
	return "FindSeriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindSeriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindSeriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindSeriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindSeriesRequestValidationError{}

// Validate checks the field values on Sort with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Sort) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Sort with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SortMultiError, or nil if none found.
func (m *Sort) ValidateAll() error {
	return m.validate(true)
}

func (m *Sort) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Filter != nil {
		// no validation rules for Filter
	}

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.Direction != nil {
		// no validation rules for Direction
	}

	if len(errors) > 0 {
		return SortMultiError(errors)
	}

	return nil
}

// SortMultiError is an error wrapping multiple validation errors returned by
// Sort.ValidateAll() if the designated constraints aren't met.
type SortMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SortMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SortMultiError) AllErrors() []error { return m }

// SortValidationError is the validation error returned by Sort.Validate if the
// designated constraints aren't met.
type SortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SortValidationError) ErrorName() string { return "SortValidationError" }

// Error satisfies the builtin error interface
func (e SortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SortValidationError{}

// Validate checks the field values on SearchSeriesResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SearchSeriesResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchSeriesResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchSeriesRespMultiError, or nil if none found.
func (m *SearchSeriesResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchSeriesResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchSeriesRespValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchSeriesRespValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchSeriesRespValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchSeriesRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchSeriesRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchSeriesRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchSeriesRespMultiError(errors)
	}

	return nil
}

// SearchSeriesRespMultiError is an error wrapping multiple validation errors
// returned by SearchSeriesResp.ValidateAll() if the designated constraints
// aren't met.
type SearchSeriesRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchSeriesRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchSeriesRespMultiError) AllErrors() []error { return m }

// SearchSeriesRespValidationError is the validation error returned by
// SearchSeriesResp.Validate if the designated constraints aren't met.
type SearchSeriesRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchSeriesRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchSeriesRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchSeriesRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchSeriesRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchSeriesRespValidationError) ErrorName() string { return "SearchSeriesRespValidationError" }

// Error satisfies the builtin error interface
func (e SearchSeriesRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchSeriesResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchSeriesRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchSeriesRespValidationError{}

// Validate checks the field values on FilterSeriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilterSeriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilterSeriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilterSeriesRequestMultiError, or nil if none found.
func (m *FilterSeriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FilterSeriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilterSeriesRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilterSeriesRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilterSeriesRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	// no validation rules for Type

	if len(errors) > 0 {
		return FilterSeriesRequestMultiError(errors)
	}

	return nil
}

// FilterSeriesRequestMultiError is an error wrapping multiple validation
// errors returned by FilterSeriesRequest.ValidateAll() if the designated
// constraints aren't met.
type FilterSeriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilterSeriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilterSeriesRequestMultiError) AllErrors() []error { return m }

// FilterSeriesRequestValidationError is the validation error returned by
// FilterSeriesRequest.Validate if the designated constraints aren't met.
type FilterSeriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterSeriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterSeriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterSeriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterSeriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterSeriesRequestValidationError) ErrorName() string {
	return "FilterSeriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FilterSeriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilterSeriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterSeriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterSeriesRequestValidationError{}

// Validate checks the field values on GetSeriesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSeriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSeriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSeriesRequestMultiError, or nil if none found.
func (m *GetSeriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSeriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetSeriesRequestMultiError(errors)
	}

	return nil
}

// GetSeriesRequestMultiError is an error wrapping multiple validation errors
// returned by GetSeriesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSeriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSeriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSeriesRequestMultiError) AllErrors() []error { return m }

// GetSeriesRequestValidationError is the validation error returned by
// GetSeriesRequest.Validate if the designated constraints aren't met.
type GetSeriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSeriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSeriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSeriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSeriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSeriesRequestValidationError) ErrorName() string { return "GetSeriesRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetSeriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSeriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSeriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSeriesRequestValidationError{}

// Validate checks the field values on UpdateSeriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSeriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSeriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSeriesRequestMultiError, or nil if none found.
func (m *UpdateSeriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSeriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return UpdateSeriesRequestMultiError(errors)
	}

	return nil
}

// UpdateSeriesRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateSeriesRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateSeriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSeriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSeriesRequestMultiError) AllErrors() []error { return m }

// UpdateSeriesRequestValidationError is the validation error returned by
// UpdateSeriesRequest.Validate if the designated constraints aren't met.
type UpdateSeriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSeriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSeriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSeriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSeriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSeriesRequestValidationError) ErrorName() string {
	return "UpdateSeriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSeriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSeriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSeriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSeriesRequestValidationError{}
