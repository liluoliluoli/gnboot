// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: genre.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GenreRemoteService_FindGenre_FullMethodName = "/gnboot.GenreRemoteService/FindGenre"
)

// GenreRemoteServiceClient is the client API for GenreRemoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GenreRemoteServiceClient interface {
	FindGenre(ctx context.Context, in *FindGenreRequest, opts ...grpc.CallOption) (*FindGenreResp, error)
}

type genreRemoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGenreRemoteServiceClient(cc grpc.ClientConnInterface) GenreRemoteServiceClient {
	return &genreRemoteServiceClient{cc}
}

func (c *genreRemoteServiceClient) FindGenre(ctx context.Context, in *FindGenreRequest, opts ...grpc.CallOption) (*FindGenreResp, error) {
	out := new(FindGenreResp)
	err := c.cc.Invoke(ctx, GenreRemoteService_FindGenre_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenreRemoteServiceServer is the server API for GenreRemoteService service.
// All implementations should embed UnimplementedGenreRemoteServiceServer
// for forward compatibility
type GenreRemoteServiceServer interface {
	FindGenre(context.Context, *FindGenreRequest) (*FindGenreResp, error)
}

// UnimplementedGenreRemoteServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGenreRemoteServiceServer struct {
}

func (UnimplementedGenreRemoteServiceServer) FindGenre(context.Context, *FindGenreRequest) (*FindGenreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindGenre not implemented")
}

// UnsafeGenreRemoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GenreRemoteServiceServer will
// result in compilation errors.
type UnsafeGenreRemoteServiceServer interface {
	mustEmbedUnimplementedGenreRemoteServiceServer()
}

func RegisterGenreRemoteServiceServer(s grpc.ServiceRegistrar, srv GenreRemoteServiceServer) {
	s.RegisterService(&GenreRemoteService_ServiceDesc, srv)
}

func _GenreRemoteService_FindGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenreRemoteServiceServer).FindGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenreRemoteService_FindGenre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenreRemoteServiceServer).FindGenre(ctx, req.(*FindGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GenreRemoteService_ServiceDesc is the grpc.ServiceDesc for GenreRemoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GenreRemoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnboot.GenreRemoteService",
	HandlerType: (*GenreRemoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindGenre",
			Handler:    _GenreRemoteService_FindGenre_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "genre.proto",
}
