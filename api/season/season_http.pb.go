// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.1
// - protoc             v5.28.3
// source: proto/season.proto

package season

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSeasonRemoteServiceGetSeason = "/gnboot.SeasonRemoteService/GetSeason"

type SeasonRemoteServiceHTTPServer interface {
	GetSeason(context.Context, *GetSeasonRequest) (*SeasonResp, error)
}

func RegisterSeasonRemoteServiceHTTPServer(s *http.Server, srv SeasonRemoteServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/season/query/id", _SeasonRemoteService_GetSeason0_HTTP_Handler(srv))
}

func _SeasonRemoteService_GetSeason0_HTTP_Handler(srv SeasonRemoteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSeasonRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSeasonRemoteServiceGetSeason)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSeason(ctx, req.(*GetSeasonRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SeasonResp)
		return ctx.Result(200, reply)
	}
}

type SeasonRemoteServiceHTTPClient interface {
	GetSeason(ctx context.Context, req *GetSeasonRequest, opts ...http.CallOption) (rsp *SeasonResp, err error)
}

type SeasonRemoteServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewSeasonRemoteServiceHTTPClient(client *http.Client) SeasonRemoteServiceHTTPClient {
	return &SeasonRemoteServiceHTTPClientImpl{client}
}

func (c *SeasonRemoteServiceHTTPClientImpl) GetSeason(ctx context.Context, in *GetSeasonRequest, opts ...http.CallOption) (*SeasonResp, error) {
	var out SeasonResp
	pattern := "/season/query/id"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSeasonRemoteServiceGetSeason))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
