// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: movie.proto

package gen

import (
	context "context"
	params "gnboot/api/gen/cinch/params"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MovieRemoteService_CreateMovie_FullMethodName = "/gnboot.MovieRemoteService/CreateMovie"
	MovieRemoteService_GetMovie_FullMethodName    = "/gnboot.MovieRemoteService/GetMovie"
	MovieRemoteService_FindMovie_FullMethodName   = "/gnboot.MovieRemoteService/FindMovie"
	MovieRemoteService_UpdateMovie_FullMethodName = "/gnboot.MovieRemoteService/UpdateMovie"
	MovieRemoteService_DeleteMovie_FullMethodName = "/gnboot.MovieRemoteService/DeleteMovie"
)

// MovieRemoteServiceClient is the client API for MovieRemoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieRemoteServiceClient interface {
	// create one Movie record
	CreateMovie(ctx context.Context, in *CreateMovieRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// query one Movie record
	GetMovie(ctx context.Context, in *GetMovieRequest, opts ...grpc.CallOption) (*GetMovieResp, error)
	// query Movie list by page
	FindMovie(ctx context.Context, in *FindMovieRequest, opts ...grpc.CallOption) (*FindMovieResp, error)
	// update one Movie record by id
	UpdateMovie(ctx context.Context, in *UpdateMovieRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// delete one or more Movie record by id
	DeleteMovie(ctx context.Context, in *params.IdsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type movieRemoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieRemoteServiceClient(cc grpc.ClientConnInterface) MovieRemoteServiceClient {
	return &movieRemoteServiceClient{cc}
}

func (c *movieRemoteServiceClient) CreateMovie(ctx context.Context, in *CreateMovieRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MovieRemoteService_CreateMovie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieRemoteServiceClient) GetMovie(ctx context.Context, in *GetMovieRequest, opts ...grpc.CallOption) (*GetMovieResp, error) {
	out := new(GetMovieResp)
	err := c.cc.Invoke(ctx, MovieRemoteService_GetMovie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieRemoteServiceClient) FindMovie(ctx context.Context, in *FindMovieRequest, opts ...grpc.CallOption) (*FindMovieResp, error) {
	out := new(FindMovieResp)
	err := c.cc.Invoke(ctx, MovieRemoteService_FindMovie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieRemoteServiceClient) UpdateMovie(ctx context.Context, in *UpdateMovieRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MovieRemoteService_UpdateMovie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieRemoteServiceClient) DeleteMovie(ctx context.Context, in *params.IdsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MovieRemoteService_DeleteMovie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieRemoteServiceServer is the server API for MovieRemoteService service.
// All implementations should embed UnimplementedMovieRemoteServiceServer
// for forward compatibility
type MovieRemoteServiceServer interface {
	// create one Movie record
	CreateMovie(context.Context, *CreateMovieRequest) (*emptypb.Empty, error)
	// query one Movie record
	GetMovie(context.Context, *GetMovieRequest) (*GetMovieResp, error)
	// query Movie list by page
	FindMovie(context.Context, *FindMovieRequest) (*FindMovieResp, error)
	// update one Movie record by id
	UpdateMovie(context.Context, *UpdateMovieRequest) (*emptypb.Empty, error)
	// delete one or more Movie record by id
	DeleteMovie(context.Context, *params.IdsRequest) (*emptypb.Empty, error)
}

// UnimplementedMovieRemoteServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMovieRemoteServiceServer struct {
}

func (UnimplementedMovieRemoteServiceServer) CreateMovie(context.Context, *CreateMovieRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMovie not implemented")
}
func (UnimplementedMovieRemoteServiceServer) GetMovie(context.Context, *GetMovieRequest) (*GetMovieResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovie not implemented")
}
func (UnimplementedMovieRemoteServiceServer) FindMovie(context.Context, *FindMovieRequest) (*FindMovieResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMovie not implemented")
}
func (UnimplementedMovieRemoteServiceServer) UpdateMovie(context.Context, *UpdateMovieRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMovie not implemented")
}
func (UnimplementedMovieRemoteServiceServer) DeleteMovie(context.Context, *params.IdsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovie not implemented")
}

// UnsafeMovieRemoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieRemoteServiceServer will
// result in compilation errors.
type UnsafeMovieRemoteServiceServer interface {
	mustEmbedUnimplementedMovieRemoteServiceServer()
}

func RegisterMovieRemoteServiceServer(s grpc.ServiceRegistrar, srv MovieRemoteServiceServer) {
	s.RegisterService(&MovieRemoteService_ServiceDesc, srv)
}

func _MovieRemoteService_CreateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieRemoteServiceServer).CreateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieRemoteService_CreateMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieRemoteServiceServer).CreateMovie(ctx, req.(*CreateMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieRemoteService_GetMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieRemoteServiceServer).GetMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieRemoteService_GetMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieRemoteServiceServer).GetMovie(ctx, req.(*GetMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieRemoteService_FindMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieRemoteServiceServer).FindMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieRemoteService_FindMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieRemoteServiceServer).FindMovie(ctx, req.(*FindMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieRemoteService_UpdateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieRemoteServiceServer).UpdateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieRemoteService_UpdateMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieRemoteServiceServer).UpdateMovie(ctx, req.(*UpdateMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieRemoteService_DeleteMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(params.IdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieRemoteServiceServer).DeleteMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieRemoteService_DeleteMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieRemoteServiceServer).DeleteMovie(ctx, req.(*params.IdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MovieRemoteService_ServiceDesc is the grpc.ServiceDesc for MovieRemoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieRemoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnboot.MovieRemoteService",
	HandlerType: (*MovieRemoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMovie",
			Handler:    _MovieRemoteService_CreateMovie_Handler,
		},
		{
			MethodName: "GetMovie",
			Handler:    _MovieRemoteService_GetMovie_Handler,
		},
		{
			MethodName: "FindMovie",
			Handler:    _MovieRemoteService_FindMovie_Handler,
		},
		{
			MethodName: "UpdateMovie",
			Handler:    _MovieRemoteService_UpdateMovie_Handler,
		},
		{
			MethodName: "DeleteMovie",
			Handler:    _MovieRemoteService_DeleteMovie_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "movie.proto",
}
