// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: proto/appversion.proto

package appversion

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AppVersionRemoteService_GetLastVersion_FullMethodName = "/gnboot.AppVersionRemoteService/GetLastVersion"
)

// AppVersionRemoteServiceClient is the client API for AppVersionRemoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppVersionRemoteServiceClient interface {
	GetLastVersion(ctx context.Context, in *GetLastAppVersionRequest, opts ...grpc.CallOption) (*AppVersion, error)
}

type appVersionRemoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppVersionRemoteServiceClient(cc grpc.ClientConnInterface) AppVersionRemoteServiceClient {
	return &appVersionRemoteServiceClient{cc}
}

func (c *appVersionRemoteServiceClient) GetLastVersion(ctx context.Context, in *GetLastAppVersionRequest, opts ...grpc.CallOption) (*AppVersion, error) {
	out := new(AppVersion)
	err := c.cc.Invoke(ctx, AppVersionRemoteService_GetLastVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppVersionRemoteServiceServer is the server API for AppVersionRemoteService service.
// All implementations must embed UnimplementedAppVersionRemoteServiceServer
// for forward compatibility
type AppVersionRemoteServiceServer interface {
	GetLastVersion(context.Context, *GetLastAppVersionRequest) (*AppVersion, error)
	mustEmbedUnimplementedAppVersionRemoteServiceServer()
}

// UnimplementedAppVersionRemoteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAppVersionRemoteServiceServer struct {
}

func (UnimplementedAppVersionRemoteServiceServer) GetLastVersion(context.Context, *GetLastAppVersionRequest) (*AppVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastVersion not implemented")
}
func (UnimplementedAppVersionRemoteServiceServer) mustEmbedUnimplementedAppVersionRemoteServiceServer() {
}

// UnsafeAppVersionRemoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppVersionRemoteServiceServer will
// result in compilation errors.
type UnsafeAppVersionRemoteServiceServer interface {
	mustEmbedUnimplementedAppVersionRemoteServiceServer()
}

func RegisterAppVersionRemoteServiceServer(s grpc.ServiceRegistrar, srv AppVersionRemoteServiceServer) {
	s.RegisterService(&AppVersionRemoteService_ServiceDesc, srv)
}

func _AppVersionRemoteService_GetLastVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastAppVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppVersionRemoteServiceServer).GetLastVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppVersionRemoteService_GetLastVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppVersionRemoteServiceServer).GetLastVersion(ctx, req.(*GetLastAppVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppVersionRemoteService_ServiceDesc is the grpc.ServiceDesc for AppVersionRemoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppVersionRemoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnboot.AppVersionRemoteService",
	HandlerType: (*AppVersionRemoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLastVersion",
			Handler:    _AppVersionRemoteService_GetLastVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/appversion.proto",
}
