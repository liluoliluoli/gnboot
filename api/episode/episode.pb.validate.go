// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/episode.proto

package episode

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Episode with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Episode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Episode with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EpisodeMultiError, or nil if none found.
func (m *Episode) ValidateAll() error {
	return m.validate(true)
}

func (m *Episode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for VideoId

	// no validation rules for Episode

	// no validation rules for EpisodeTitle

	// no validation rules for Url

	// no validation rules for Platform

	// no validation rules for Ext

	// no validation rules for Duration

	for idx, item := range m.GetSubtitles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EpisodeValidationError{
						field:  fmt.Sprintf("Subtitles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EpisodeValidationError{
						field:  fmt.Sprintf("Subtitles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EpisodeValidationError{
					field:  fmt.Sprintf("Subtitles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Ratio

	// no validation rules for DisplayTitle

	for idx, item := range m.GetAudios() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EpisodeValidationError{
						field:  fmt.Sprintf("Audios[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EpisodeValidationError{
						field:  fmt.Sprintf("Audios[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EpisodeValidationError{
					field:  fmt.Sprintf("Audios[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EpisodeMultiError(errors)
	}

	return nil
}

// EpisodeMultiError is an error wrapping multiple validation errors returned
// by Episode.ValidateAll() if the designated constraints aren't met.
type EpisodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EpisodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EpisodeMultiError) AllErrors() []error { return m }

// EpisodeValidationError is the validation error returned by Episode.Validate
// if the designated constraints aren't met.
type EpisodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EpisodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EpisodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EpisodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EpisodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EpisodeValidationError) ErrorName() string { return "EpisodeValidationError" }

// Error satisfies the builtin error interface
func (e EpisodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEpisode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EpisodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EpisodeValidationError{}

// Validate checks the field values on GetEpisodeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetEpisodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEpisodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEpisodeRequestMultiError, or nil if none found.
func (m *GetEpisodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEpisodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetEpisodeRequestMultiError(errors)
	}

	return nil
}

// GetEpisodeRequestMultiError is an error wrapping multiple validation errors
// returned by GetEpisodeRequest.ValidateAll() if the designated constraints
// aren't met.
type GetEpisodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEpisodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEpisodeRequestMultiError) AllErrors() []error { return m }

// GetEpisodeRequestValidationError is the validation error returned by
// GetEpisodeRequest.Validate if the designated constraints aren't met.
type GetEpisodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEpisodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEpisodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEpisodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEpisodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEpisodeRequestValidationError) ErrorName() string {
	return "GetEpisodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEpisodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEpisodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEpisodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEpisodeRequestValidationError{}

// Validate checks the field values on UpdateConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConfigRequestMultiError, or nil if none found.
func (m *UpdateConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BoxIpMapping

	// no validation rules for GenreMapping

	// no validation rules for RegionMapping

	// no validation rules for VideoSyncMapping

	// no validation rules for PathVideoTypeMapping

	// no validation rules for ApikeyMapping

	if len(errors) > 0 {
		return UpdateConfigRequestMultiError(errors)
	}

	return nil
}

// UpdateConfigRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConfigRequestMultiError) AllErrors() []error { return m }

// UpdateConfigRequestValidationError is the validation error returned by
// UpdateConfigRequest.Validate if the designated constraints aren't met.
type UpdateConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConfigRequestValidationError) ErrorName() string {
	return "UpdateConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConfigRequestValidationError{}

// Validate checks the field values on TestFullSyncTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestFullSyncTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestFullSyncTaskRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestFullSyncTaskRequestMultiError, or nil if none found.
func (m *TestFullSyncTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TestFullSyncTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScanPathIds

	if len(errors) > 0 {
		return TestFullSyncTaskRequestMultiError(errors)
	}

	return nil
}

// TestFullSyncTaskRequestMultiError is an error wrapping multiple validation
// errors returned by TestFullSyncTaskRequest.ValidateAll() if the designated
// constraints aren't met.
type TestFullSyncTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestFullSyncTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestFullSyncTaskRequestMultiError) AllErrors() []error { return m }

// TestFullSyncTaskRequestValidationError is the validation error returned by
// TestFullSyncTaskRequest.Validate if the designated constraints aren't met.
type TestFullSyncTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestFullSyncTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestFullSyncTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestFullSyncTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestFullSyncTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestFullSyncTaskRequestValidationError) ErrorName() string {
	return "TestFullSyncTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TestFullSyncTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestFullSyncTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestFullSyncTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestFullSyncTaskRequestValidationError{}

// Validate checks the field values on TestLatestSyncTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestLatestSyncTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestLatestSyncTaskRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestLatestSyncTaskRequestMultiError, or nil if none found.
func (m *TestLatestSyncTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TestLatestSyncTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScanPathIds

	// no validation rules for FindLatestCount

	if len(errors) > 0 {
		return TestLatestSyncTaskRequestMultiError(errors)
	}

	return nil
}

// TestLatestSyncTaskRequestMultiError is an error wrapping multiple validation
// errors returned by TestLatestSyncTaskRequest.ValidateAll() if the
// designated constraints aren't met.
type TestLatestSyncTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestLatestSyncTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestLatestSyncTaskRequestMultiError) AllErrors() []error { return m }

// TestLatestSyncTaskRequestValidationError is the validation error returned by
// TestLatestSyncTaskRequest.Validate if the designated constraints aren't met.
type TestLatestSyncTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestLatestSyncTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestLatestSyncTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestLatestSyncTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestLatestSyncTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestLatestSyncTaskRequestValidationError) ErrorName() string {
	return "TestLatestSyncTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TestLatestSyncTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestLatestSyncTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestLatestSyncTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestLatestSyncTaskRequestValidationError{}

// Validate checks the field values on Audio with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Audio) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Audio with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AudioMultiError, or nil if none found.
func (m *Audio) ValidateAll() error {
	return m.validate(true)
}

func (m *Audio) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Url

	// no validation rules for Title

	// no validation rules for Language

	// no validation rules for MimeType

	if len(errors) > 0 {
		return AudioMultiError(errors)
	}

	return nil
}

// AudioMultiError is an error wrapping multiple validation errors returned by
// Audio.ValidateAll() if the designated constraints aren't met.
type AudioMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AudioMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AudioMultiError) AllErrors() []error { return m }

// AudioValidationError is the validation error returned by Audio.Validate if
// the designated constraints aren't met.
type AudioValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AudioValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AudioValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AudioValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AudioValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AudioValidationError) ErrorName() string { return "AudioValidationError" }

// Error satisfies the builtin error interface
func (e AudioValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAudio.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AudioValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AudioValidationError{}
